
Cuoi_Ki_TTCS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080064f0  080064f0  000074f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067a8  080067a8  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  080067a8  080067a8  000077a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b0  080067b0  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b0  080067b0  000077b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067b4  080067b4  000077b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080067b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000007c  08006834  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08006834  000082b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8d6  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddb  00000000  00000000  00013982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  00015760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089e  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d7c  00000000  00000000  00016b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db62  00000000  00000000  0002d89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a55  00000000  00000000  0003b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d4c  00000000  00000000  000c4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c8be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064d8 	.word	0x080064d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080064d8 	.word	0x080064d8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b96a 	b.w	8000e68 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	460c      	mov	r4, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14e      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bb8:	4694      	mov	ip, r2
 8000bba:	458c      	cmp	ip, r1
 8000bbc:	4686      	mov	lr, r0
 8000bbe:	fab2 f282 	clz	r2, r2
 8000bc2:	d962      	bls.n	8000c8a <__udivmoddi4+0xde>
 8000bc4:	b14a      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc6:	f1c2 0320 	rsb	r3, r2, #32
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	4319      	orrs	r1, r3
 8000bd6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f f68c 	uxth.w	r6, ip
 8000be2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000be6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bea:	fb07 1114 	mls	r1, r7, r4, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb04 f106 	mul.w	r1, r4, r6
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c02:	f080 8112 	bcs.w	8000e2a <__udivmoddi4+0x27e>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 810f 	bls.w	8000e2a <__udivmoddi4+0x27e>
 8000c0c:	3c02      	subs	r4, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a59      	subs	r1, r3, r1
 8000c12:	fa1f f38e 	uxth.w	r3, lr
 8000c16:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c22:	fb00 f606 	mul.w	r6, r0, r6
 8000c26:	429e      	cmp	r6, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x94>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c32:	f080 80fc 	bcs.w	8000e2e <__udivmoddi4+0x282>
 8000c36:	429e      	cmp	r6, r3
 8000c38:	f240 80f9 	bls.w	8000e2e <__udivmoddi4+0x282>
 8000c3c:	4463      	add	r3, ip
 8000c3e:	3802      	subs	r0, #2
 8000c40:	1b9b      	subs	r3, r3, r6
 8000c42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c46:	2100      	movs	r1, #0
 8000c48:	b11d      	cbz	r5, 8000c52 <__udivmoddi4+0xa6>
 8000c4a:	40d3      	lsrs	r3, r2
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d905      	bls.n	8000c66 <__udivmoddi4+0xba>
 8000c5a:	b10d      	cbz	r5, 8000c60 <__udivmoddi4+0xb4>
 8000c5c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c60:	2100      	movs	r1, #0
 8000c62:	4608      	mov	r0, r1
 8000c64:	e7f5      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c66:	fab3 f183 	clz	r1, r3
 8000c6a:	2900      	cmp	r1, #0
 8000c6c:	d146      	bne.n	8000cfc <__udivmoddi4+0x150>
 8000c6e:	42a3      	cmp	r3, r4
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xcc>
 8000c72:	4290      	cmp	r0, r2
 8000c74:	f0c0 80f0 	bcc.w	8000e58 <__udivmoddi4+0x2ac>
 8000c78:	1a86      	subs	r6, r0, r2
 8000c7a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	2d00      	cmp	r5, #0
 8000c82:	d0e6      	beq.n	8000c52 <__udivmoddi4+0xa6>
 8000c84:	e9c5 6300 	strd	r6, r3, [r5]
 8000c88:	e7e3      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000c8a:	2a00      	cmp	r2, #0
 8000c8c:	f040 8090 	bne.w	8000db0 <__udivmoddi4+0x204>
 8000c90:	eba1 040c 	sub.w	r4, r1, ip
 8000c94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c98:	fa1f f78c 	uxth.w	r7, ip
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ca2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ca6:	fb08 4416 	mls	r4, r8, r6, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb07 f006 	mul.w	r0, r7, r6
 8000cb2:	4298      	cmp	r0, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x11c>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x11a>
 8000cc0:	4298      	cmp	r0, r3
 8000cc2:	f200 80cd 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	1a1c      	subs	r4, r3, r0
 8000cca:	fa1f f38e 	uxth.w	r3, lr
 8000cce:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cd2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb00 f707 	mul.w	r7, r0, r7
 8000cde:	429f      	cmp	r7, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x148>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x146>
 8000cec:	429f      	cmp	r7, r3
 8000cee:	f200 80b0 	bhi.w	8000e52 <__udivmoddi4+0x2a6>
 8000cf2:	4620      	mov	r0, r4
 8000cf4:	1bdb      	subs	r3, r3, r7
 8000cf6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cfa:	e7a5      	b.n	8000c48 <__udivmoddi4+0x9c>
 8000cfc:	f1c1 0620 	rsb	r6, r1, #32
 8000d00:	408b      	lsls	r3, r1
 8000d02:	fa22 f706 	lsr.w	r7, r2, r6
 8000d06:	431f      	orrs	r7, r3
 8000d08:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d0c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d10:	ea43 030c 	orr.w	r3, r3, ip
 8000d14:	40f4      	lsrs	r4, r6
 8000d16:	fa00 f801 	lsl.w	r8, r0, r1
 8000d1a:	0c38      	lsrs	r0, r7, #16
 8000d1c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d20:	fbb4 fef0 	udiv	lr, r4, r0
 8000d24:	fa1f fc87 	uxth.w	ip, r7
 8000d28:	fb00 441e 	mls	r4, r0, lr, r4
 8000d2c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d30:	fb0e f90c 	mul.w	r9, lr, ip
 8000d34:	45a1      	cmp	r9, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	d90a      	bls.n	8000d52 <__udivmoddi4+0x1a6>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d42:	f080 8084 	bcs.w	8000e4e <__udivmoddi4+0x2a2>
 8000d46:	45a1      	cmp	r9, r4
 8000d48:	f240 8081 	bls.w	8000e4e <__udivmoddi4+0x2a2>
 8000d4c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	eba4 0409 	sub.w	r4, r4, r9
 8000d56:	fa1f f983 	uxth.w	r9, r3
 8000d5a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d5e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d62:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d66:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x1d2>
 8000d6e:	193c      	adds	r4, r7, r4
 8000d70:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d74:	d267      	bcs.n	8000e46 <__udivmoddi4+0x29a>
 8000d76:	45a4      	cmp	ip, r4
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0x29a>
 8000d7a:	3b02      	subs	r3, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d82:	fba0 9302 	umull	r9, r3, r0, r2
 8000d86:	eba4 040c 	sub.w	r4, r4, ip
 8000d8a:	429c      	cmp	r4, r3
 8000d8c:	46ce      	mov	lr, r9
 8000d8e:	469c      	mov	ip, r3
 8000d90:	d351      	bcc.n	8000e36 <__udivmoddi4+0x28a>
 8000d92:	d04e      	beq.n	8000e32 <__udivmoddi4+0x286>
 8000d94:	b155      	cbz	r5, 8000dac <__udivmoddi4+0x200>
 8000d96:	ebb8 030e 	subs.w	r3, r8, lr
 8000d9a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d9e:	fa04 f606 	lsl.w	r6, r4, r6
 8000da2:	40cb      	lsrs	r3, r1
 8000da4:	431e      	orrs	r6, r3
 8000da6:	40cc      	lsrs	r4, r1
 8000da8:	e9c5 6400 	strd	r6, r4, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	e750      	b.n	8000c52 <__udivmoddi4+0xa6>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f103 	lsr.w	r1, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	fa24 f303 	lsr.w	r3, r4, r3
 8000dc0:	4094      	lsls	r4, r2
 8000dc2:	430c      	orrs	r4, r1
 8000dc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dcc:	fa1f f78c 	uxth.w	r7, ip
 8000dd0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dd8:	0c23      	lsrs	r3, r4, #16
 8000dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dde:	fb00 f107 	mul.w	r1, r0, r7
 8000de2:	4299      	cmp	r1, r3
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x24c>
 8000de6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dea:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dee:	d22c      	bcs.n	8000e4a <__udivmoddi4+0x29e>
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d92a      	bls.n	8000e4a <__udivmoddi4+0x29e>
 8000df4:	3802      	subs	r0, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b2a4      	uxth	r4, r4
 8000dfc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e00:	fb08 3311 	mls	r3, r8, r1, r3
 8000e04:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e08:	fb01 f307 	mul.w	r3, r1, r7
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x276>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e18:	d213      	bcs.n	8000e42 <__udivmoddi4+0x296>
 8000e1a:	42a3      	cmp	r3, r4
 8000e1c:	d911      	bls.n	8000e42 <__udivmoddi4+0x296>
 8000e1e:	3902      	subs	r1, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	1ae4      	subs	r4, r4, r3
 8000e24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e28:	e739      	b.n	8000c9e <__udivmoddi4+0xf2>
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	e6f0      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e2e:	4608      	mov	r0, r1
 8000e30:	e706      	b.n	8000c40 <__udivmoddi4+0x94>
 8000e32:	45c8      	cmp	r8, r9
 8000e34:	d2ae      	bcs.n	8000d94 <__udivmoddi4+0x1e8>
 8000e36:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e3a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e3e:	3801      	subs	r0, #1
 8000e40:	e7a8      	b.n	8000d94 <__udivmoddi4+0x1e8>
 8000e42:	4631      	mov	r1, r6
 8000e44:	e7ed      	b.n	8000e22 <__udivmoddi4+0x276>
 8000e46:	4603      	mov	r3, r0
 8000e48:	e799      	b.n	8000d7e <__udivmoddi4+0x1d2>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e7d4      	b.n	8000df8 <__udivmoddi4+0x24c>
 8000e4e:	46d6      	mov	lr, sl
 8000e50:	e77f      	b.n	8000d52 <__udivmoddi4+0x1a6>
 8000e52:	4463      	add	r3, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e74d      	b.n	8000cf4 <__udivmoddi4+0x148>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	4623      	mov	r3, r4
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e70f      	b.n	8000c80 <__udivmoddi4+0xd4>
 8000e60:	3e02      	subs	r6, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	e730      	b.n	8000cc8 <__udivmoddi4+0x11c>
 8000e66:	bf00      	nop

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000e70:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <DWT_Delay_Init+0x58>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	4a13      	ldr	r2, [pc, #76]	@ (8000ec4 <DWT_Delay_Init+0x58>)
 8000e76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e7a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <DWT_Delay_Init+0x58>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a10      	ldr	r2, [pc, #64]	@ (8000ec4 <DWT_Delay_Init+0x58>)
 8000e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e86:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000e8e:	f023 0301 	bic.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000ea6:	bf00      	nop
     __ASM volatile ("NOP");
 8000ea8:	bf00      	nop
 __ASM volatile ("NOP");
 8000eaa:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <DWT_Delay_Init+0x5c>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000eb8:	2301      	movs	r3, #1
				}
				

		
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000edf0 	.word	0xe000edf0
 8000ec8:	e0001000 	.word	0xe0001000

08000ecc <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <delay+0x40>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000eda:	f002 fceb 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8000f10 <delay+0x44>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000ef0:	bf00      	nop
 8000ef2:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <delay+0x40>)
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3f8      	bcc.n	8000ef2 <delay+0x26>
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e0001000 	.word	0xe0001000
 8000f10:	431bde83 	.word	0x431bde83

08000f14 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f30:	887b      	ldrh	r3, [r7, #2]
 8000f32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f001 f9cc 	bl	80022e0 <HAL_GPIO_Init>
}
 8000f48:	bf00      	nop
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f001 f9ae 	bl	80022e0 <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <DHT_Start>:


void DHT_Start (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f90:	f7ff ff6c 	bl	8000e6c <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f94:	2108      	movs	r1, #8
 8000f96:	480d      	ldr	r0, [pc, #52]	@ (8000fcc <DHT_Start+0x40>)
 8000f98:	f7ff ffbc 	bl	8000f14 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	480a      	ldr	r0, [pc, #40]	@ (8000fcc <DHT_Start+0x40>)
 8000fa2:	f001 fb39 	bl	8002618 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000fa6:	f244 6050 	movw	r0, #18000	@ 0x4650
 8000faa:	f7ff ff8f 	bl	8000ecc <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4806      	ldr	r0, [pc, #24]	@ (8000fcc <DHT_Start+0x40>)
 8000fb4:	f001 fb30 	bl	8002618 <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000fb8:	201e      	movs	r0, #30
 8000fba:	f7ff ff87 	bl	8000ecc <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DHT_Start+0x40>)
 8000fc2:	f7ff ffc5 	bl	8000f50 <Set_Pin_Input>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000fda:	2032      	movs	r0, #50	@ 0x32
 8000fdc:	f7ff ff76 	bl	8000ecc <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	4811      	ldr	r0, [pc, #68]	@ (8001028 <DHT_Check_Response+0x58>)
 8000fe4:	f001 fb00 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10e      	bne.n	800100c <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000fee:	2064      	movs	r0, #100	@ 0x64
 8000ff0:	f7ff ff6c 	bl	8000ecc <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	480c      	ldr	r0, [pc, #48]	@ (8001028 <DHT_Check_Response+0x58>)
 8000ff8:	f001 faf6 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <DHT_Check_Response+0x38>
		{
			Response = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8001008:	23ff      	movs	r3, #255	@ 0xff
 800100a:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 800100c:	bf00      	nop
 800100e:	2108      	movs	r1, #8
 8001010:	4805      	ldr	r0, [pc, #20]	@ (8001028 <DHT_Check_Response+0x58>)
 8001012:	f001 fae9 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f8      	bne.n	800100e <DHT_Check_Response+0x3e>

	return Response;
 800101c:	79fb      	ldrb	r3, [r7, #7]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020400 	.word	0x40020400

0800102c <DHT_Read>:

uint8_t DHT_Read (void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8001032:	2300      	movs	r3, #0
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	e037      	b.n	80010a8 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001038:	bf00      	nop
 800103a:	2108      	movs	r1, #8
 800103c:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <DHT_Read+0x8c>)
 800103e:	f001 fad3 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f8      	beq.n	800103a <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8001048:	2032      	movs	r0, #50	@ 0x32
 800104a:	f7ff ff3f 	bl	8000ecc <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800104e:	2108      	movs	r1, #8
 8001050:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <DHT_Read+0x8c>)
 8001052:	f001 fac9 	bl	80025e8 <HAL_GPIO_ReadPin>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10e      	bne.n	800107a <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2201      	movs	r2, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	b25b      	sxtb	r3, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	b25a      	sxtb	r2, r3
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	4013      	ands	r3, r2
 8001074:	b25b      	sxtb	r3, r3
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	e00b      	b.n	8001092 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	f1c3 0307 	rsb	r3, r3, #7
 8001080:	2201      	movs	r2, #1
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	b25a      	sxtb	r2, r3
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	4313      	orrs	r3, r2
 800108e:	b25b      	sxtb	r3, r3
 8001090:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001092:	bf00      	nop
 8001094:	2108      	movs	r1, #8
 8001096:	4808      	ldr	r0, [pc, #32]	@ (80010b8 <DHT_Read+0x8c>)
 8001098:	f001 faa6 	bl	80025e8 <HAL_GPIO_ReadPin>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f8      	bne.n	8001094 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	3301      	adds	r3, #1
 80010a6:	71bb      	strb	r3, [r7, #6]
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	2b07      	cmp	r3, #7
 80010ac:	d9c4      	bls.n	8001038 <DHT_Read+0xc>
	}
	return i;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020400 	.word	0x40020400

080010bc <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 80010c4:	f7ff ff62 	bl	8000f8c <DHT_Start>
	Presence = DHT_Check_Response ();
 80010c8:	f7ff ff82 	bl	8000fd0 <DHT_Check_Response>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b23      	ldr	r3, [pc, #140]	@ (8001160 <DHT_GetData+0xa4>)
 80010d2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80010d4:	f7ff ffaa 	bl	800102c <DHT_Read>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <DHT_GetData+0xa8>)
 80010de:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80010e0:	f7ff ffa4 	bl	800102c <DHT_Read>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <DHT_GetData+0xac>)
 80010ea:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80010ec:	f7ff ff9e 	bl	800102c <DHT_Read>
 80010f0:	4603      	mov	r3, r0
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <DHT_GetData+0xb0>)
 80010f6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80010f8:	f7ff ff98 	bl	800102c <DHT_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461a      	mov	r2, r3
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <DHT_GetData+0xb4>)
 8001102:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8001104:	f7ff ff92 	bl	800102c <DHT_Read>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <DHT_GetData+0xb8>)
 800110e:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <DHT_GetData+0xb8>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <DHT_GetData+0xa8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <DHT_GetData+0xac>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4413      	add	r3, r2
 8001122:	4a12      	ldr	r2, [pc, #72]	@ (800116c <DHT_GetData+0xb0>)
 8001124:	7812      	ldrb	r2, [r2, #0]
 8001126:	4413      	add	r3, r2
 8001128:	4a11      	ldr	r2, [pc, #68]	@ (8001170 <DHT_GetData+0xb4>)
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	4413      	add	r3, r2
 800112e:	4299      	cmp	r1, r3
 8001130:	d111      	bne.n	8001156 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 8001132:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <DHT_GetData+0xb0>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <DHT_GetData+0xa8>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	edc3 7a01 	vstr	s15, [r3, #4]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
	
	
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000009e 	.word	0x2000009e
 8001164:	20000098 	.word	0x20000098
 8001168:	20000099 	.word	0x20000099
 800116c:	2000009a 	.word	0x2000009a
 8001170:	2000009b 	.word	0x2000009b
 8001174:	2000009c 	.word	0x2000009c

08001178 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001182:	4a38      	ldr	r2, [pc, #224]	@ (8001264 <HD44780_Init+0xec>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001188:	4b37      	ldr	r3, [pc, #220]	@ (8001268 <HD44780_Init+0xf0>)
 800118a:	2208      	movs	r2, #8
 800118c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <HD44780_Init+0xf4>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001194:	4b33      	ldr	r3, [pc, #204]	@ (8001264 <HD44780_Init+0xec>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d907      	bls.n	80011ac <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800119c:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HD44780_Init+0xf4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b31      	ldr	r3, [pc, #196]	@ (800126c <HD44780_Init+0xf4>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	e006      	b.n	80011ba <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80011ac:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <HD44780_Init+0xf4>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <HD44780_Init+0xf4>)
 80011b8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80011ba:	f000 f985 	bl	80014c8 <DelayInit>
  HAL_Delay(50);
 80011be:	2032      	movs	r0, #50	@ 0x32
 80011c0:	f000 ff58 	bl	8002074 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <HD44780_Init+0xf0>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f943 	bl	8001454 <ExpanderWrite>
  HAL_Delay(1000);
 80011ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d2:	f000 ff4f 	bl	8002074 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80011d6:	2030      	movs	r0, #48	@ 0x30
 80011d8:	f000 f92b 	bl	8001432 <Write4Bits>
  DelayUS(4500);
 80011dc:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011e0:	f000 f99c 	bl	800151c <DelayUS>

  Write4Bits(0x03 << 4);
 80011e4:	2030      	movs	r0, #48	@ 0x30
 80011e6:	f000 f924 	bl	8001432 <Write4Bits>
  DelayUS(4500);
 80011ea:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011ee:	f000 f995 	bl	800151c <DelayUS>

  Write4Bits(0x03 << 4);
 80011f2:	2030      	movs	r0, #48	@ 0x30
 80011f4:	f000 f91d 	bl	8001432 <Write4Bits>
  DelayUS(4500);
 80011f8:	f241 1094 	movw	r0, #4500	@ 0x1194
 80011fc:	f000 f98e 	bl	800151c <DelayUS>

  Write4Bits(0x02 << 4);
 8001200:	2020      	movs	r0, #32
 8001202:	f000 f916 	bl	8001432 <Write4Bits>
  DelayUS(100);
 8001206:	2064      	movs	r0, #100	@ 0x64
 8001208:	f000 f988 	bl	800151c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800120c:	4b17      	ldr	r3, [pc, #92]	@ (800126c <HD44780_Init+0xf4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	f043 0320 	orr.w	r3, r3, #32
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f8ce 	bl	80013b8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HD44780_Init+0xf8>)
 800121e:	2204      	movs	r2, #4
 8001220:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001222:	f000 f875 	bl	8001310 <HD44780_Display>
  HD44780_Clear();
 8001226:	f000 f82b 	bl	8001280 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800122a:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HD44780_Init+0xfc>)
 800122c:	2202      	movs	r2, #2
 800122e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HD44780_Init+0xfc>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	b2db      	uxtb	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f8bc 	bl	80013b8 <SendCommand>
  DelayUS(4500);
 8001240:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001244:	f000 f96a 	bl	800151c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001248:	490b      	ldr	r1, [pc, #44]	@ (8001278 <HD44780_Init+0x100>)
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f876 	bl	800133c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001250:	490a      	ldr	r1, [pc, #40]	@ (800127c <HD44780_Init+0x104>)
 8001252:	2001      	movs	r0, #1
 8001254:	f000 f872 	bl	800133c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001258:	f000 f81d 	bl	8001296 <HD44780_Home>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000a2 	.word	0x200000a2
 8001268:	200000a3 	.word	0x200000a3
 800126c:	2000009f 	.word	0x2000009f
 8001270:	200000a0 	.word	0x200000a0
 8001274:	200000a1 	.word	0x200000a1
 8001278:	20000000 	.word	0x20000000
 800127c:	20000008 	.word	0x20000008

08001280 <HD44780_Clear>:

void HD44780_Clear()
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 f897 	bl	80013b8 <SendCommand>
  DelayUS(2000);
 800128a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800128e:	f000 f945 	bl	800151c <DelayUS>
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}

08001296 <HD44780_Home>:

void HD44780_Home()
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800129a:	2002      	movs	r0, #2
 800129c:	f000 f88c 	bl	80013b8 <SendCommand>
  DelayUS(2000);
 80012a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80012a4:	f000 f93a 	bl	800151c <DelayUS>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b087      	sub	sp, #28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	4613      	mov	r3, r2
 80012ba:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HD44780_SetCursor+0x5c>)
 80012be:	f107 0408 	add.w	r4, r7, #8
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <HD44780_SetCursor+0x60>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	79ba      	ldrb	r2, [r7, #6]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d303      	bcc.n	80012da <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HD44780_SetCursor+0x60>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80012da:	79bb      	ldrb	r3, [r7, #6]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3318      	adds	r3, #24
 80012e0:	443b      	add	r3, r7
 80012e2:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	4413      	add	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f85d 	bl	80013b8 <SendCommand>
}
 80012fe:	bf00      	nop
 8001300:	371c      	adds	r7, #28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd90      	pop	{r4, r7, pc}
 8001306:	bf00      	nop
 8001308:	080064f0 	.word	0x080064f0
 800130c:	200000a2 	.word	0x200000a2

08001310 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001314:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HD44780_Display+0x28>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HD44780_Display+0x28>)
 8001320:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <HD44780_Display+0x28>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	b2db      	uxtb	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f843 	bl	80013b8 <SendCommand>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200000a0 	.word	0x200000a0

0800133c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800135a:	b25b      	sxtb	r3, r3
 800135c:	b2db      	uxtb	r3, r3
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f82a 	bl	80013b8 <SendCommand>
  for (int i=0; i<8; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e009      	b.n	800137e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	4413      	add	r3, r2
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f82e 	bl	80013d4 <SendChar>
  for (int i=0; i<8; i++)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3301      	adds	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b07      	cmp	r3, #7
 8001382:	ddf2      	ble.n	800136a <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001396:	e006      	b.n	80013a6 <HD44780_PrintStr+0x18>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f817 	bl	80013d4 <SendChar>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f4      	bne.n	8001398 <HD44780_PrintStr+0xa>
}
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f812 	bl	80013f0 <Send>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2101      	movs	r1, #1
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 f804 	bl	80013f0 <Send>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	4613      	mov	r3, r2
 80013fe:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f023 030f 	bic.w	r3, r3, #15
 8001406:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	4313      	orrs	r3, r2
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f80b 	bl	8001432 <Write4Bits>
  Write4Bits((lownib)|mode);
 800141c:	7bba      	ldrb	r2, [r7, #14]
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4313      	orrs	r3, r2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f000 f804 	bl	8001432 <Write4Bits>
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f808 	bl	8001454 <ExpanderWrite>
  PulseEnable(value);
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 f820 	bl	800148c <PulseEnable>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af02      	add	r7, sp, #8
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <ExpanderWrite+0x30>)
 8001460:	781a      	ldrb	r2, [r3, #0]
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4313      	orrs	r3, r2
 8001466:	b2db      	uxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800146a:	f107 020f 	add.w	r2, r7, #15
 800146e:	230a      	movs	r3, #10
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2301      	movs	r3, #1
 8001474:	214e      	movs	r1, #78	@ 0x4e
 8001476:	4804      	ldr	r0, [pc, #16]	@ (8001488 <ExpanderWrite+0x34>)
 8001478:	f001 fa5e 	bl	8002938 <HAL_I2C_Master_Transmit>
}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000a3 	.word	0x200000a3
 8001488:	200000a4 	.word	0x200000a4

0800148c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd8 	bl	8001454 <ExpanderWrite>
  DelayUS(20);
 80014a4:	2014      	movs	r0, #20
 80014a6:	f000 f839 	bl	800151c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f023 0304 	bic.w	r3, r3, #4
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ffce 	bl	8001454 <ExpanderWrite>
  DelayUS(20);
 80014b8:	2014      	movs	r0, #20
 80014ba:	f000 f82f 	bl	800151c <DelayUS>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <DelayInit>:

static void DelayInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <DelayInit+0x4c>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <DelayInit+0x4c>)
 80014d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014d6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <DelayInit+0x4c>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <DelayInit+0x4c>)
 80014de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014e2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <DelayInit+0x50>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <DelayInit+0x50>)
 80014ea:	f023 0301 	bic.w	r3, r3, #1
 80014ee:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <DelayInit+0x50>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a08      	ldr	r2, [pc, #32]	@ (8001518 <DelayInit+0x50>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <DelayInit+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001502:	bf00      	nop
  __ASM volatile ("NOP");
 8001504:	bf00      	nop
  __ASM volatile ("NOP");
 8001506:	bf00      	nop
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000edf0 	.word	0xe000edf0
 8001518:	e0001000 	.word	0xe0001000

0800151c <DelayUS>:

static void DelayUS(uint32_t us) {
 800151c:	b480      	push	{r7}
 800151e:	b087      	sub	sp, #28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <DelayUS+0x44>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	@ (8001564 <DelayUS+0x48>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	0c9a      	lsrs	r2, r3, #18
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <DelayUS+0x4c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <DelayUS+0x4c>)
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f6      	bhi.n	800153e <DelayUS+0x22>
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	371c      	adds	r7, #28
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000014 	.word	0x20000014
 8001564:	431bde83 	.word	0x431bde83
 8001568:	e0001000 	.word	0xe0001000

0800156c <HAL_GPIO_EXTI_Callback>:
uint8_t flag = 1;
uint8_t co = 1;

// ham dieu khien ngat
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(L298N_in1_GPIO_Port,L298N_in1_Pin);
 8001576:	2120      	movs	r1, #32
 8001578:	481c      	ldr	r0, [pc, #112]	@ (80015ec <HAL_GPIO_EXTI_Callback+0x80>)
 800157a:	f001 f866 	bl	800264a <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(L298N_in2_GPIO_Port,L298N_in2_Pin, LOW);
 800157e:	2200      	movs	r2, #0
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	481a      	ldr	r0, [pc, #104]	@ (80015ec <HAL_GPIO_EXTI_Callback+0x80>)
 8001584:	f001 f848 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(ledred_GPIO_Port,ledred_Pin);
 8001588:	2102      	movs	r1, #2
 800158a:	4819      	ldr	r0, [pc, #100]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0x84>)
 800158c:	f001 f85d 	bl	800264a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(ledgreen_GPIO_Port,ledgreen_Pin);
 8001590:	2101      	movs	r1, #1
 8001592:	4816      	ldr	r0, [pc, #88]	@ (80015ec <HAL_GPIO_EXTI_Callback+0x80>)
 8001594:	f001 f859 	bl	800264a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(ledblue_GPIO_Port,ledblue_Pin);
 8001598:	2110      	movs	r1, #16
 800159a:	4815      	ldr	r0, [pc, #84]	@ (80015f0 <HAL_GPIO_EXTI_Callback+0x84>)
 800159c:	f001 f855 	bl	800264a <HAL_GPIO_TogglePin>
	//HAL_GPIO_TogglePin(coi_GPIO_Port,coi_Pin);
//	for(int i = 0; i <=1; i++){

//	}
	if(ok == 0){
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <HAL_GPIO_EXTI_Callback+0x44>
		ok = 1;
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	e002      	b.n	80015b6 <HAL_GPIO_EXTI_Callback+0x4a>
	}else{
		ok = 0;
 80015b0:	4b10      	ldr	r3, [pc, #64]	@ (80015f4 <HAL_GPIO_EXTI_Callback+0x88>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	}

	if(flag==0){
 80015b6:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d103      	bne.n	80015c6 <HAL_GPIO_EXTI_Callback+0x5a>
		flag = 1;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0x60>
	}else{
		flag = 0;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	@ (80015f8 <HAL_GPIO_EXTI_Callback+0x8c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
	}

	if(co==0){
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_GPIO_EXTI_Callback+0x90>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d103      	bne.n	80015dc <HAL_GPIO_EXTI_Callback+0x70>
			co = 1;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_GPIO_EXTI_Callback+0x90>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		}else{
			co = 0;
		}
}
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_EXTI_Callback+0x76>
			co = 0;
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_GPIO_EXTI_Callback+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020000 	.word	0x40020000
 80015f4:	2000015c 	.word	0x2000015c
 80015f8:	20000010 	.word	0x20000010
 80015fc:	20000011 	.word	0x20000011

08001600 <main>:

int main(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001604:	f000 fcc4 	bl	8001f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001608:	f000 f936 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160c:	f000 f9f8 	bl	8001a00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001610:	f000 f9cc 	bl	80019ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001614:	f000 f99c 	bl	8001950 <MX_I2C1_Init>
  HD44780_Init(2);
 8001618:	2002      	movs	r0, #2
 800161a:	f7ff fdad 	bl	8001178 <HD44780_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   HD44780_Clear();
 800161e:	f7ff fe2f 	bl	8001280 <HD44780_Clear>
   HD44780_SetCursor(2,0);
 8001622:	2100      	movs	r1, #0
 8001624:	2002      	movs	r0, #2
 8001626:	f7ff fe41 	bl	80012ac <HD44780_SetCursor>
   HD44780_PrintStr("HELLO C.A.T");
 800162a:	483c      	ldr	r0, [pc, #240]	@ (800171c <main+0x11c>)
 800162c:	f7ff feaf 	bl	800138e <HD44780_PrintStr>
   HD44780_SetCursor(1,1);
 8001630:	2101      	movs	r1, #1
 8001632:	2001      	movs	r0, #1
 8001634:	f7ff fe3a 	bl	80012ac <HD44780_SetCursor>
   HD44780_PrintStr("Chao_moi_nguoi");
 8001638:	4839      	ldr	r0, [pc, #228]	@ (8001720 <main+0x120>)
 800163a:	f7ff fea8 	bl	800138e <HD44780_PrintStr>


  while (1)
  {

	  Read_DataDHT();
 800163e:	f000 f87f 	bl	8001740 <Read_DataDHT>


	  if(nhiet_do >=35 && flag == 1){
 8001642:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <main+0x124>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b22      	cmp	r3, #34	@ 0x22
 8001648:	d920      	bls.n	800168c <main+0x8c>
 800164a:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <main+0x128>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11c      	bne.n	800168c <main+0x8c>
	          HAL_GPIO_WritePin(ledred_GPIO_Port,ledred_Pin, HIGH);
 8001652:	2201      	movs	r2, #1
 8001654:	2102      	movs	r1, #2
 8001656:	4835      	ldr	r0, [pc, #212]	@ (800172c <main+0x12c>)
 8001658:	f000 ffde 	bl	8002618 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(ledgreen_GPIO_Port,ledgreen_Pin, HIGH);
 800165c:	2201      	movs	r2, #1
 800165e:	2101      	movs	r1, #1
 8001660:	4833      	ldr	r0, [pc, #204]	@ (8001730 <main+0x130>)
 8001662:	f000 ffd9 	bl	8002618 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(ledblue_GPIO_Port,ledblue_Pin, HIGH);
 8001666:	2201      	movs	r2, #1
 8001668:	2110      	movs	r1, #16
 800166a:	4830      	ldr	r0, [pc, #192]	@ (800172c <main+0x12c>)
 800166c:	f000 ffd4 	bl	8002618 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(L298N_in1_GPIO_Port,L298N_in1_Pin, HIGH);
 8001670:	2201      	movs	r2, #1
 8001672:	2120      	movs	r1, #32
 8001674:	482e      	ldr	r0, [pc, #184]	@ (8001730 <main+0x130>)
 8001676:	f000 ffcf 	bl	8002618 <HAL_GPIO_WritePin>
	          HAL_GPIO_WritePin(L298N_in2_GPIO_Port,L298N_in2_Pin, LOW);
 800167a:	2200      	movs	r2, #0
 800167c:	2180      	movs	r1, #128	@ 0x80
 800167e:	482c      	ldr	r0, [pc, #176]	@ (8001730 <main+0x130>)
 8001680:	f000 ffca 	bl	8002618 <HAL_GPIO_WritePin>
	          ok = 1;
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <main+0x134>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e023      	b.n	80016d4 <main+0xd4>
	  }else if (nhiet_do < 35 && co == 1){
 800168c:	4b25      	ldr	r3, [pc, #148]	@ (8001724 <main+0x124>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b22      	cmp	r3, #34	@ 0x22
 8001692:	d81f      	bhi.n	80016d4 <main+0xd4>
 8001694:	4b28      	ldr	r3, [pc, #160]	@ (8001738 <main+0x138>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d11b      	bne.n	80016d4 <main+0xd4>
	      HAL_GPIO_WritePin(ledred_GPIO_Port,ledred_Pin, LOW);
 800169c:	2200      	movs	r2, #0
 800169e:	2102      	movs	r1, #2
 80016a0:	4822      	ldr	r0, [pc, #136]	@ (800172c <main+0x12c>)
 80016a2:	f000 ffb9 	bl	8002618 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(ledgreen_GPIO_Port,ledgreen_Pin, LOW);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2101      	movs	r1, #1
 80016aa:	4821      	ldr	r0, [pc, #132]	@ (8001730 <main+0x130>)
 80016ac:	f000 ffb4 	bl	8002618 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(ledblue_GPIO_Port,ledblue_Pin, LOW);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2110      	movs	r1, #16
 80016b4:	481d      	ldr	r0, [pc, #116]	@ (800172c <main+0x12c>)
 80016b6:	f000 ffaf 	bl	8002618 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(L298N_in1_GPIO_Port,L298N_in1_Pin, LOW);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2120      	movs	r1, #32
 80016be:	481c      	ldr	r0, [pc, #112]	@ (8001730 <main+0x130>)
 80016c0:	f000 ffaa 	bl	8002618 <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(L298N_in2_GPIO_Port,L298N_in2_Pin, LOW);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	4819      	ldr	r0, [pc, #100]	@ (8001730 <main+0x130>)
 80016ca:	f000 ffa5 	bl	8002618 <HAL_GPIO_WritePin>
	      ok = 0;
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <main+0x134>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
	         }

    if(ok == 1){
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <main+0x134>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d109      	bne.n	80016f0 <main+0xf0>
    	status[0]='O';
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <main+0x13c>)
 80016de:	224f      	movs	r2, #79	@ 0x4f
 80016e0:	701a      	strb	r2, [r3, #0]
    	status[1]='N';
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <main+0x13c>)
 80016e4:	224e      	movs	r2, #78	@ 0x4e
 80016e6:	705a      	strb	r2, [r3, #1]
    	status[2]=' ';
 80016e8:	4b14      	ldr	r3, [pc, #80]	@ (800173c <main+0x13c>)
 80016ea:	2220      	movs	r2, #32
 80016ec:	709a      	strb	r2, [r3, #2]
 80016ee:	e00c      	b.n	800170a <main+0x10a>

    }else if(ok == 0){
 80016f0:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <main+0x134>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d108      	bne.n	800170a <main+0x10a>
    	status[0]='O';
 80016f8:	4b10      	ldr	r3, [pc, #64]	@ (800173c <main+0x13c>)
 80016fa:	224f      	movs	r2, #79	@ 0x4f
 80016fc:	701a      	strb	r2, [r3, #0]
    	status[1]='F';
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <main+0x13c>)
 8001700:	2246      	movs	r2, #70	@ 0x46
 8001702:	705a      	strb	r2, [r3, #1]
    	status[2]='F';
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <main+0x13c>)
 8001706:	2246      	movs	r2, #70	@ 0x46
 8001708:	709a      	strb	r2, [r3, #2]
    }
    HD44780_SetCursor(13,0);
 800170a:	2100      	movs	r1, #0
 800170c:	200d      	movs	r0, #13
 800170e:	f7ff fdcd 	bl	80012ac <HD44780_SetCursor>
    HD44780_PrintStr(status);
 8001712:	480a      	ldr	r0, [pc, #40]	@ (800173c <main+0x13c>)
 8001714:	f7ff fe3b 	bl	800138e <HD44780_PrintStr>
	  Read_DataDHT();
 8001718:	e791      	b.n	800163e <main+0x3e>
 800171a:	bf00      	nop
 800171c:	08006500 	.word	0x08006500
 8001720:	0800650c 	.word	0x0800650c
 8001724:	2000015b 	.word	0x2000015b
 8001728:	20000010 	.word	0x20000010
 800172c:	40020000 	.word	0x40020000
 8001730:	40020400 	.word	0x40020400
 8001734:	2000015c 	.word	0x2000015c
 8001738:	20000011 	.word	0x20000011
 800173c:	20000158 	.word	0x20000158

08001740 <Read_DataDHT>:
/**
  * @brief System Clock Configuration
  * @retval None
  */

void Read_DataDHT(void){
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0

	DHT_GetData(&DHT11_Data);
 8001746:	4842      	ldr	r0, [pc, #264]	@ (8001850 <Read_DataDHT+0x110>)
 8001748:	f7ff fcb8 	bl	80010bc <DHT_GetData>
	temp = DHT11_Data.Temperature;
 800174c:	4b40      	ldr	r3, [pc, #256]	@ (8001850 <Read_DataDHT+0x110>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a40      	ldr	r2, [pc, #256]	@ (8001854 <Read_DataDHT+0x114>)
 8001752:	6013      	str	r3, [r2, #0]
	humi = DHT11_Data.Humidity;
 8001754:	4b3e      	ldr	r3, [pc, #248]	@ (8001850 <Read_DataDHT+0x110>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a3f      	ldr	r2, [pc, #252]	@ (8001858 <Read_DataDHT+0x118>)
 800175a:	6013      	str	r3, [r2, #0]

	last = HAL_GetTick();
 800175c:	f000 fc7e 	bl	800205c <HAL_GetTick>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <Read_DataDHT+0x11c>)
 8001766:	601a      	str	r2, [r3, #0]

	nhiet_do = temp;
 8001768:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <Read_DataDHT+0x114>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001772:	edc7 7a01 	vstr	s15, [r7, #4]
 8001776:	793b      	ldrb	r3, [r7, #4]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b39      	ldr	r3, [pc, #228]	@ (8001860 <Read_DataDHT+0x120>)
 800177c:	701a      	strb	r2, [r3, #0]
	float T  = temp;
 800177e:	4b35      	ldr	r3, [pc, #212]	@ (8001854 <Read_DataDHT+0x114>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
	float H  = humi;
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <Read_DataDHT+0x118>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	623b      	str	r3, [r7, #32]
	char DHT11[20];
	while(1){
		if(HAL_GetTick() - last >= 1200){
 800178a:	f000 fc67 	bl	800205c <HAL_GetTick>
 800178e:	4603      	mov	r3, r0
 8001790:	4a32      	ldr	r2, [pc, #200]	@ (800185c <Read_DataDHT+0x11c>)
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800179a:	d3f6      	bcc.n	800178a <Read_DataDHT+0x4a>

					i++;
 800179c:	4b31      	ldr	r3, [pc, #196]	@ (8001864 <Read_DataDHT+0x124>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	4a30      	ldr	r2, [pc, #192]	@ (8001864 <Read_DataDHT+0x124>)
 80017a4:	6013      	str	r3, [r2, #0]
					//in ra lcd nhiet do
					   HD44780_Clear();
 80017a6:	f7ff fd6b 	bl	8001280 <HD44780_Clear>
					   HD44780_SetCursor(1,0);
 80017aa:	2100      	movs	r1, #0
 80017ac:	2001      	movs	r0, #1
 80017ae:	f7ff fd7d 	bl	80012ac <HD44780_SetCursor>
					   HD44780_PrintStr("C.A.T");
 80017b2:	482d      	ldr	r0, [pc, #180]	@ (8001868 <Read_DataDHT+0x128>)
 80017b4:	f7ff fdeb 	bl	800138e <HD44780_PrintStr>
					   HD44780_SetCursor(9,0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2009      	movs	r0, #9
 80017bc:	f7ff fd76 	bl	80012ac <HD44780_SetCursor>
					   HD44780_PrintStr("Fan:");
 80017c0:	482a      	ldr	r0, [pc, #168]	@ (800186c <Read_DataDHT+0x12c>)
 80017c2:	f7ff fde4 	bl	800138e <HD44780_PrintStr>

					   // doi so thanh ky tu
					   	gcvt(T, 2, DHT11);
 80017c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80017c8:	f7fe febe 	bl	8000548 <__aeabi_f2d>
 80017cc:	4604      	mov	r4, r0
 80017ce:	460d      	mov	r5, r1
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	4619      	mov	r1, r3
 80017d6:	2002      	movs	r0, #2
 80017d8:	ec45 4b10 	vmov	d0, r4, r5
 80017dc:	f002 fb62 	bl	8003ea4 <gcvt>
					   // in nhiet do ra lcd
					   	HD44780_SetCursor(0,1);
 80017e0:	2101      	movs	r1, #1
 80017e2:	2000      	movs	r0, #0
 80017e4:	f7ff fd62 	bl	80012ac <HD44780_SetCursor>
					   	HD44780_PrintStr("TEMP: ");
 80017e8:	4821      	ldr	r0, [pc, #132]	@ (8001870 <Read_DataDHT+0x130>)
 80017ea:	f7ff fdd0 	bl	800138e <HD44780_PrintStr>
					   	HD44780_SetCursor(5,1);
 80017ee:	2101      	movs	r1, #1
 80017f0:	2005      	movs	r0, #5
 80017f2:	f7ff fd5b 	bl	80012ac <HD44780_SetCursor>
					   	HD44780_PrintStr(DHT11);
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fdc7 	bl	800138e <HD44780_PrintStr>

					   	// doi so thanh ky tu
					   	gcvt(H, 2, DHT11);
 8001800:	6a38      	ldr	r0, [r7, #32]
 8001802:	f7fe fea1 	bl	8000548 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	4619      	mov	r1, r3
 8001810:	2002      	movs	r0, #2
 8001812:	ec45 4b10 	vmov	d0, r4, r5
 8001816:	f002 fb45 	bl	8003ea4 <gcvt>
					   	// in nhiet do ra lcd
					   	HD44780_SetCursor(9,1);
 800181a:	2101      	movs	r1, #1
 800181c:	2009      	movs	r0, #9
 800181e:	f7ff fd45 	bl	80012ac <HD44780_SetCursor>
					   	HD44780_PrintStr("Humi: ");
 8001822:	4814      	ldr	r0, [pc, #80]	@ (8001874 <Read_DataDHT+0x134>)
 8001824:	f7ff fdb3 	bl	800138e <HD44780_PrintStr>
					   	HD44780_SetCursor(14,1);
 8001828:	2101      	movs	r1, #1
 800182a:	200e      	movs	r0, #14
 800182c:	f7ff fd3e 	bl	80012ac <HD44780_SetCursor>
					   	HD44780_PrintStr(DHT11);
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fdaa 	bl	800138e <HD44780_PrintStr>

					last = HAL_GetTick();
 800183a:	f000 fc0f 	bl	800205c <HAL_GetTick>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b06      	ldr	r3, [pc, #24]	@ (800185c <Read_DataDHT+0x11c>)
 8001844:	601a      	str	r2, [r3, #0]
					break;
 8001846:	bf00      	nop
				}
	}
}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	20000140 	.word	0x20000140
 8001854:	20000148 	.word	0x20000148
 8001858:	2000014c 	.word	0x2000014c
 800185c:	20000154 	.word	0x20000154
 8001860:	2000015b 	.word	0x2000015b
 8001864:	20000150 	.word	0x20000150
 8001868:	0800651c 	.word	0x0800651c
 800186c:	08006524 	.word	0x08006524
 8001870:	0800652c 	.word	0x0800652c
 8001874:	08006534 	.word	0x08006534

08001878 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	@ 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	@ 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fc3d 	bl	8004106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b29      	ldr	r3, [pc, #164]	@ (8001948 <SystemClock_Config+0xd0>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	4a28      	ldr	r2, [pc, #160]	@ (8001948 <SystemClock_Config+0xd0>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ac:	4b26      	ldr	r3, [pc, #152]	@ (8001948 <SystemClock_Config+0xd0>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <SystemClock_Config+0xd4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80018c4:	4a21      	ldr	r2, [pc, #132]	@ (800194c <SystemClock_Config+0xd4>)
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b1f      	ldr	r3, [pc, #124]	@ (800194c <SystemClock_Config+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018e0:	2310      	movs	r3, #16
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e4:	2302      	movs	r3, #2
 80018e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e8:	2300      	movs	r3, #0
 80018ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ec:	2310      	movs	r3, #16
 80018ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80018f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018f6:	2304      	movs	r3, #4
 80018f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018fa:	2307      	movs	r3, #7
 80018fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fe:	f107 0320 	add.w	r3, r7, #32
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fb72 	bl	8002fec <HAL_RCC_OscConfig>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800190e:	f000 f943 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001912:	230f      	movs	r3, #15
 8001914:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001916:	2302      	movs	r3, #2
 8001918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800191e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	2102      	movs	r1, #2
 800192e:	4618      	mov	r0, r3
 8001930:	f001 fdd4 	bl	80034dc <HAL_RCC_ClockConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800193a:	f000 f92d 	bl	8001b98 <Error_Handler>
  }
}
 800193e:	bf00      	nop
 8001940:	3750      	adds	r7, #80	@ 0x50
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40007000 	.word	0x40007000

08001950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001956:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <MX_I2C1_Init+0x54>)
 8001958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800195a:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <MX_I2C1_Init+0x50>)
 800195c:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <MX_I2C1_Init+0x58>)
 800195e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001966:	4b0e      	ldr	r3, [pc, #56]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001968:	2200      	movs	r2, #0
 800196a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <MX_I2C1_Init+0x50>)
 800196e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001974:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <MX_I2C1_Init+0x50>)
 8001988:	2200      	movs	r2, #0
 800198a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800198c:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <MX_I2C1_Init+0x50>)
 800198e:	f000 fe8f 	bl	80026b0 <HAL_I2C_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001998:	f000 f8fe 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200000a4 	.word	0x200000a4
 80019a4:	40005400 	.word	0x40005400
 80019a8:	000186a0 	.word	0x000186a0

080019ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <MX_USART2_UART_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f001 ff9a 	bl	800391c <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ee:	f000 f8d3 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000f8 	.word	0x200000f8
 80019fc:	40004400 	.word	0x40004400

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0314 	add.w	r3, r7, #20
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
 8001a14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b58      	ldr	r3, [pc, #352]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b54      	ldr	r3, [pc, #336]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a53      	ldr	r2, [pc, #332]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a4c      	ldr	r2, [pc, #304]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
 8001a6e:	4b46      	ldr	r3, [pc, #280]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a45      	ldr	r2, [pc, #276]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b43      	ldr	r3, [pc, #268]	@ (8001b88 <MX_GPIO_Init+0x188>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2120      	movs	r1, #32
 8001a8a:	4840      	ldr	r0, [pc, #256]	@ (8001b8c <MX_GPIO_Init+0x18c>)
 8001a8c:	f000 fdc4 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */ // nt nhan user
  GPIO_InitStruct.Pin = B1_Pin;
 8001a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a96:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483a      	ldr	r0, [pc, #232]	@ (8001b90 <MX_GPIO_Init+0x190>)
 8001aa8:	f000 fc1a 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */ // led board
  GPIO_InitStruct.Pin = LD2_Pin;
 8001aac:	2320      	movs	r3, #32
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4832      	ldr	r0, [pc, #200]	@ (8001b8c <MX_GPIO_Init+0x18c>)
 8001ac4:	f000 fc0c 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */ // nut nhan A10
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ace:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	482b      	ldr	r0, [pc, #172]	@ (8001b8c <MX_GPIO_Init+0x18c>)
 8001ae0:	f000 fbfe 	bl	80022e0 <HAL_GPIO_Init>

  // ledred A1
    GPIO_InitStruct.Pin = ledred_Pin;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001af0:	2301      	movs	r3, #1
 8001af2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ledred_GPIO_Port, &GPIO_InitStruct);
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	4619      	mov	r1, r3
 8001afa:	4824      	ldr	r0, [pc, #144]	@ (8001b8c <MX_GPIO_Init+0x18c>)
 8001afc:	f000 fbf0 	bl	80022e0 <HAL_GPIO_Init>

    // ledgreen A4
   GPIO_InitStruct.Pin = ledgreen_Pin;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b04:	2301      	movs	r3, #1
 8001b06:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(ledgreen_GPIO_Port, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	481f      	ldr	r0, [pc, #124]	@ (8001b94 <MX_GPIO_Init+0x194>)
 8001b18:	f000 fbe2 	bl	80022e0 <HAL_GPIO_Init>
   // ledblue A4
   GPIO_InitStruct.Pin = ledblue_Pin;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(ledblue_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4816      	ldr	r0, [pc, #88]	@ (8001b8c <MX_GPIO_Init+0x18c>)
 8001b34:	f000 fbd4 	bl	80022e0 <HAL_GPIO_Init>
   // L2998N_in1
   GPIO_InitStruct.Pin = L298N_in1_Pin;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b44:	2301      	movs	r3, #1
 8001b46:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L298N_in1_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4811      	ldr	r0, [pc, #68]	@ (8001b94 <MX_GPIO_Init+0x194>)
 8001b50:	f000 fbc6 	bl	80022e0 <HAL_GPIO_Init>
   // L28N_in2
   GPIO_InitStruct.Pin = L298N_in2_Pin;
 8001b54:	2380      	movs	r3, #128	@ 0x80
 8001b56:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(L298N_in2_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480a      	ldr	r0, [pc, #40]	@ (8001b94 <MX_GPIO_Init+0x194>)
 8001b6c:	f000 fbb8 	bl	80022e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2028      	movs	r0, #40	@ 0x28
 8001b76:	f000 fb7c 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b7a:	2028      	movs	r0, #40	@ 0x28
 8001b7c:	f000 fb95 	bl	80022aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b80:	bf00      	nop
 8001b82:	3728      	adds	r7, #40	@ 0x28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020400 	.word	0x40020400

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	bf00      	nop
 8001ba2:	e7fd      	b.n	8001ba0 <Error_Handler+0x8>

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001be2:	2007      	movs	r0, #7
 8001be4:	f000 fb3a 	bl	800225c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be8:	bf00      	nop
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08a      	sub	sp, #40	@ 0x28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <HAL_I2C_MspInit+0x84>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d12c      	bne.n	8001c70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c38:	2312      	movs	r3, #18
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c44:	2304      	movs	r3, #4
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <HAL_I2C_MspInit+0x8c>)
 8001c50:	f000 fb46 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_I2C_MspInit+0x88>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400

08001c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08a      	sub	sp, #40	@ 0x28
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	f107 0314 	add.w	r3, r7, #20
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	@ (8001d08 <HAL_UART_MspInit+0x84>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d12b      	bne.n	8001cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	4b18      	ldr	r3, [pc, #96]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	4b11      	ldr	r3, [pc, #68]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a10      	ldr	r2, [pc, #64]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d0c <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cde:	230c      	movs	r3, #12
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cee:	2307      	movs	r3, #7
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	@ (8001d10 <HAL_UART_MspInit+0x8c>)
 8001cfa:	f000 faf1 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cfe:	bf00      	nop
 8001d00:	3728      	adds	r7, #40	@ 0x28
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40004400 	.word	0x40004400
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020000 	.word	0x40020000

08001d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <NMI_Handler+0x4>

08001d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <HardFault_Handler+0x4>

08001d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <MemManage_Handler+0x4>

08001d2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <BusFault_Handler+0x4>

08001d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d38:	bf00      	nop
 8001d3a:	e7fd      	b.n	8001d38 <UsageFault_Handler+0x4>

08001d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6a:	f000 f963 	bl	8002034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d76:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d7a:	f000 fc81 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d7e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d82:	f000 fc7d 	bl	8002680 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  return 1;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <_kill>:

int _kill(int pid, int sig)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da4:	f002 f9fe 	bl	80041a4 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2216      	movs	r2, #22
 8001dac:	601a      	str	r2, [r3, #0]
  return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_exit>:

void _exit (int status)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffe7 	bl	8001d9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <_exit+0x12>

08001dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e00a      	b.n	8001df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de2:	f3af 8000 	nop.w
 8001de6:	4601      	mov	r1, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf0      	blt.n	8001de2 <_read+0x12>
  }

  return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e009      	b.n	8001e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf1      	blt.n	8001e1c <_write+0x12>
  }
  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <_isatty>:

int _isatty(int file)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec0:	4b13      	ldr	r3, [pc, #76]	@ (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	@ (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ece:	4b10      	ldr	r3, [pc, #64]	@ (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001edc:	f002 f962 	bl	80041a4 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eec:	4b08      	ldr	r3, [pc, #32]	@ (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef2:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	@ (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20018000 	.word	0x20018000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000160 	.word	0x20000160
 8001f14:	200002b8 	.word	0x200002b8

08001f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <SystemInit+0x20>)
 8001f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <SystemInit+0x20>)
 8001f24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f40:	f7ff ffea 	bl	8001f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480c      	ldr	r0, [pc, #48]	@ (8001f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f46:	490d      	ldr	r1, [pc, #52]	@ (8001f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f002 f921 	bl	80041b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f6e:	f7ff fb47 	bl	8001600 <main>
  bx  lr    
 8001f72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f7c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001f80:	080067b8 	.word	0x080067b8
  ldr r2, =_sbss
 8001f84:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001f88:	200002b4 	.word	0x200002b4

08001f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f8c:	e7fe      	b.n	8001f8c <ADC_IRQHandler>
	...

08001f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f94:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd0 <HAL_Init+0x40>)
 8001f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <HAL_Init+0x40>)
 8001fa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a07      	ldr	r2, [pc, #28]	@ (8001fd0 <HAL_Init+0x40>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f000 f94f 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f808 	bl	8001fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff fdee 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00

08001fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fdc:	4b12      	ldr	r3, [pc, #72]	@ (8002028 <HAL_InitTick+0x54>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x58>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f967 	bl	80022c6 <HAL_SYSTICK_Config>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00e      	b.n	8002020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d80a      	bhi.n	800201e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f000 f92f 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <HAL_InitTick+0x5c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
 800201c:	e000      	b.n	8002020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000014 	.word	0x20000014
 800202c:	2000001c 	.word	0x2000001c
 8002030:	20000018 	.word	0x20000018

08002034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <HAL_IncTick+0x20>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x24>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4413      	add	r3, r2
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_IncTick+0x24>)
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	2000001c 	.word	0x2000001c
 8002058:	20000164 	.word	0x20000164

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000164 	.word	0x20000164

08002074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800207c:	f7ff ffee 	bl	800205c <HAL_GetTick>
 8002080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800208c:	d005      	beq.n	800209a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800208e:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_Delay+0x44>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	461a      	mov	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209a:	bf00      	nop
 800209c:	f7ff ffde 	bl	800205c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d8f7      	bhi.n	800209c <HAL_Delay+0x28>
  {
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	2000001c 	.word	0x2000001c

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	@ (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	@ (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	@ (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	@ (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	@ 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff29 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff3e 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff31 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e159      	b.n	80025b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8148 	bne.w	80025aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80a2 	beq.w	80025aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b57      	ldr	r3, [pc, #348]	@ (80025c8 <HAL_GPIO_Init+0x2e8>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a56      	ldr	r2, [pc, #344]	@ (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b54      	ldr	r3, [pc, #336]	@ (80025c8 <HAL_GPIO_Init+0x2e8>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a52      	ldr	r2, [pc, #328]	@ (80025cc <HAL_GPIO_Init+0x2ec>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	@ (80025d0 <HAL_GPIO_Init+0x2f0>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x202>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	@ (80025d4 <HAL_GPIO_Init+0x2f4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x1fe>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a47      	ldr	r2, [pc, #284]	@ (80025d8 <HAL_GPIO_Init+0x2f8>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x1fa>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a46      	ldr	r2, [pc, #280]	@ (80025dc <HAL_GPIO_Init+0x2fc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x1f6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a45      	ldr	r2, [pc, #276]	@ (80025e0 <HAL_GPIO_Init+0x300>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x1f2>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x204>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	@ (80025cc <HAL_GPIO_Init+0x2ec>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a2f      	ldr	r2, [pc, #188]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b2d      	ldr	r3, [pc, #180]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a24      	ldr	r2, [pc, #144]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1a      	ldr	r2, [pc, #104]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b18      	ldr	r3, [pc, #96]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a0f      	ldr	r2, [pc, #60]	@ (80025e4 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f aea2 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	@ 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40013c00 	.word	0x40013c00

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	691a      	ldr	r2, [r3, #16]
 80025f8:	887b      	ldrh	r3, [r7, #2]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
 8002604:	e001      	b.n	800260a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	619a      	str	r2, [r3, #24]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800265c:	887a      	ldrh	r2, [r7, #2]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	041a      	lsls	r2, r3, #16
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43d9      	mvns	r1, r3
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	400b      	ands	r3, r1
 800266c:	431a      	orrs	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800268a:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002696:	4a05      	ldr	r2, [pc, #20]	@ (80026ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ff64 	bl	800156c <HAL_GPIO_EXTI_Callback>
  }
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e12b      	b.n	800291a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fa8c 	bl	8001bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	@ 0x24
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002702:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002714:	f001 f8da 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 8002718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4a81      	ldr	r2, [pc, #516]	@ (8002924 <HAL_I2C_Init+0x274>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d807      	bhi.n	8002734 <HAL_I2C_Init+0x84>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a80      	ldr	r2, [pc, #512]	@ (8002928 <HAL_I2C_Init+0x278>)
 8002728:	4293      	cmp	r3, r2
 800272a:	bf94      	ite	ls
 800272c:	2301      	movls	r3, #1
 800272e:	2300      	movhi	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e006      	b.n	8002742 <HAL_I2C_Init+0x92>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4a7d      	ldr	r2, [pc, #500]	@ (800292c <HAL_I2C_Init+0x27c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0e7      	b.n	800291a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4a78      	ldr	r2, [pc, #480]	@ (8002930 <HAL_I2C_Init+0x280>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9b      	lsrs	r3, r3, #18
 8002754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	4a6a      	ldr	r2, [pc, #424]	@ (8002924 <HAL_I2C_Init+0x274>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d802      	bhi.n	8002784 <HAL_I2C_Init+0xd4>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	3301      	adds	r3, #1
 8002782:	e009      	b.n	8002798 <HAL_I2C_Init+0xe8>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800278a:	fb02 f303 	mul.w	r3, r2, r3
 800278e:	4a69      	ldr	r2, [pc, #420]	@ (8002934 <HAL_I2C_Init+0x284>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	3301      	adds	r3, #1
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	495c      	ldr	r1, [pc, #368]	@ (8002924 <HAL_I2C_Init+0x274>)
 80027b4:	428b      	cmp	r3, r1
 80027b6:	d819      	bhi.n	80027ec <HAL_I2C_Init+0x13c>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e59      	subs	r1, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c6:	1c59      	adds	r1, r3, #1
 80027c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80027cc:	400b      	ands	r3, r1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_I2C_Init+0x138>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	1e59      	subs	r1, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e0:	3301      	adds	r3, #1
 80027e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e6:	e051      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027e8:	2304      	movs	r3, #4
 80027ea:	e04f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d111      	bne.n	8002818 <HAL_I2C_Init+0x168>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	440b      	add	r3, r1
 8002802:	fbb0 f3f3 	udiv	r3, r0, r3
 8002806:	3301      	adds	r3, #1
 8002808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf0c      	ite	eq
 8002810:	2301      	moveq	r3, #1
 8002812:	2300      	movne	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	e012      	b.n	800283e <HAL_I2C_Init+0x18e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	1e58      	subs	r0, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6859      	ldr	r1, [r3, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	0099      	lsls	r1, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	fbb0 f3f3 	udiv	r3, r0, r3
 800282e:	3301      	adds	r3, #1
 8002830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_I2C_Init+0x196>
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_I2C_Init+0x1dc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10e      	bne.n	800286c <HAL_I2C_Init+0x1bc>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1e58      	subs	r0, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	460b      	mov	r3, r1
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	440b      	add	r3, r1
 800285c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800286a:	e00f      	b.n	800288c <HAL_I2C_Init+0x1dc>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e58      	subs	r0, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6859      	ldr	r1, [r3, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	0099      	lsls	r1, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002882:	3301      	adds	r3, #1
 8002884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	6809      	ldr	r1, [r1, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80028ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6911      	ldr	r1, [r2, #16]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68d2      	ldr	r2, [r2, #12]
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2220      	movs	r2, #32
 8002906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	000186a0 	.word	0x000186a0
 8002928:	001e847f 	.word	0x001e847f
 800292c:	003d08ff 	.word	0x003d08ff
 8002930:	431bde83 	.word	0x431bde83
 8002934:	10624dd3 	.word	0x10624dd3

08002938 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	461a      	mov	r2, r3
 8002944:	460b      	mov	r3, r1
 8002946:	817b      	strh	r3, [r7, #10]
 8002948:	4613      	mov	r3, r2
 800294a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7ff fb86 	bl	800205c <HAL_GetTick>
 8002950:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	f040 80e0 	bne.w	8002b20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	2319      	movs	r3, #25
 8002966:	2201      	movs	r2, #1
 8002968:	4970      	ldr	r1, [pc, #448]	@ (8002b2c <HAL_I2C_Master_Transmit+0x1f4>)
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f964 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	e0d3      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x50>
 8002984:	2302      	movs	r3, #2
 8002986:	e0cc      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d007      	beq.n	80029ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2221      	movs	r2, #33	@ 0x21
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2210      	movs	r2, #16
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a50      	ldr	r2, [pc, #320]	@ (8002b30 <HAL_I2C_Master_Transmit+0x1f8>)
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029f0:	8979      	ldrh	r1, [r7, #10]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	6a3a      	ldr	r2, [r7, #32]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f89c 	bl	8002b34 <I2C_MasterRequestWrite>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08d      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a1c:	e066      	b.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	6a39      	ldr	r1, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa22 	bl	8002e6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00d      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d107      	bne.n	8002a46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06b      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	781a      	ldrb	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11b      	bne.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d017      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	781a      	ldrb	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	6a39      	ldr	r1, [r7, #32]
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f000 fa19 	bl	8002efc <I2C_WaitOnBTFFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d107      	bne.n	8002ae8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e01a      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d194      	bne.n	8002a1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	00100002 	.word	0x00100002
 8002b30:	ffff0000 	.word	0xffff0000

08002b34 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	460b      	mov	r3, r1
 8002b42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d006      	beq.n	8002b5e <I2C_MasterRequestWrite+0x2a>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d003      	beq.n	8002b5e <I2C_MasterRequestWrite+0x2a>
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b5c:	d108      	bne.n	8002b70 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	e00b      	b.n	8002b88 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	2b12      	cmp	r3, #18
 8002b76:	d107      	bne.n	8002b88 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f84f 	bl	8002c38 <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00d      	beq.n	8002bbc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bae:	d103      	bne.n	8002bb8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e035      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bc4:	d108      	bne.n	8002bd8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bc6:	897b      	ldrh	r3, [r7, #10]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002bd4:	611a      	str	r2, [r3, #16]
 8002bd6:	e01b      	b.n	8002c10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bd8:	897b      	ldrh	r3, [r7, #10]
 8002bda:	11db      	asrs	r3, r3, #7
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	f003 0306 	and.w	r3, r3, #6
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f063 030f 	orn	r3, r3, #15
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	490e      	ldr	r1, [pc, #56]	@ (8002c30 <I2C_MasterRequestWrite+0xfc>)
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f898 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e010      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c06:	897b      	ldrh	r3, [r7, #10]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	4907      	ldr	r1, [pc, #28]	@ (8002c34 <I2C_MasterRequestWrite+0x100>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f888 	bl	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	00010008 	.word	0x00010008
 8002c34:	00010002 	.word	0x00010002

08002c38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c48:	e048      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d044      	beq.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c52:	f7ff fa03 	bl	800205c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d302      	bcc.n	8002c68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d139      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf0c      	ite	eq
 8002c84:	2301      	moveq	r3, #1
 8002c86:	2300      	movne	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	e00c      	b.n	8002ca8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf0c      	ite	eq
 8002ca0:	2301      	moveq	r3, #1
 8002ca2:	2300      	movne	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d116      	bne.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc8:	f043 0220 	orr.w	r2, r3, #32
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e023      	b.n	8002d24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d10d      	bne.n	8002d02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	43da      	mvns	r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	e00c      	b.n	8002d1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d093      	beq.n	8002c4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	e071      	b.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d4a:	d123      	bne.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	f043 0204 	orr.w	r2, r3, #4
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e067      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	d041      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7ff f95e 	bl	800205c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d302      	bcc.n	8002db2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d136      	bne.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	0c1b      	lsrs	r3, r3, #16
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d10c      	bne.n	8002dd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e00b      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0c:	f043 0220 	orr.w	r2, r3, #32
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e021      	b.n	8002e64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	0c1b      	lsrs	r3, r3, #16
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d10c      	bne.n	8002e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	43da      	mvns	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	4013      	ands	r3, r2
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf14      	ite	ne
 8002e3c:	2301      	movne	r3, #1
 8002e3e:	2300      	moveq	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e00b      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	bf14      	ite	ne
 8002e56:	2301      	movne	r3, #1
 8002e58:	2300      	moveq	r3, #0
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f47f af6d 	bne.w	8002d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e78:	e034      	b.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 f886 	bl	8002f8c <I2C_IsAcknowledgeFailed>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e034      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d028      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e92:	f7ff f8e3 	bl	800205c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d302      	bcc.n	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d11d      	bne.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb2:	2b80      	cmp	r3, #128	@ 0x80
 8002eb4:	d016      	beq.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eee:	2b80      	cmp	r3, #128	@ 0x80
 8002ef0:	d1c3      	bne.n	8002e7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f08:	e034      	b.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f83e 	bl	8002f8c <I2C_IsAcknowledgeFailed>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e034      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f20:	d028      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7ff f89b 	bl	800205c <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11d      	bne.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d016      	beq.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e007      	b.n	8002f84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d1c3      	bne.n	8002f0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa2:	d11b      	bne.n	8002fdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f043 0204 	orr.w	r2, r3, #4
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e267      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d075      	beq.n	80030f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300a:	4b88      	ldr	r3, [pc, #544]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b04      	cmp	r3, #4
 8003014:	d00c      	beq.n	8003030 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b85      	ldr	r3, [pc, #532]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800301e:	2b08      	cmp	r3, #8
 8003020:	d112      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003022:	4b82      	ldr	r3, [pc, #520]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800302e:	d10b      	bne.n	8003048 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	4b7e      	ldr	r3, [pc, #504]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d05b      	beq.n	80030f4 <HAL_RCC_OscConfig+0x108>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d157      	bne.n	80030f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e242      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x74>
 8003052:	4b76      	ldr	r3, [pc, #472]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a75      	ldr	r2, [pc, #468]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	e01d      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x98>
 800306a:	4b70      	ldr	r3, [pc, #448]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6f      	ldr	r2, [pc, #444]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4b6d      	ldr	r3, [pc, #436]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a6c      	ldr	r2, [pc, #432]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800307c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003080:	6013      	str	r3, [r2, #0]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0xb0>
 8003084:	4b69      	ldr	r3, [pc, #420]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a68      	ldr	r2, [pc, #416]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b66      	ldr	r3, [pc, #408]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a65      	ldr	r2, [pc, #404]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe ffda 	bl	800205c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe ffd6 	bl	800205c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e207      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b5b      	ldr	r3, [pc, #364]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0xc0>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe ffc6 	bl	800205c <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe ffc2 	bl	800205c <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e1f3      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e6:	4b51      	ldr	r3, [pc, #324]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0xe8>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d063      	beq.n	80031ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003102:	4b4a      	ldr	r3, [pc, #296]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b47      	ldr	r3, [pc, #284]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003116:	2b08      	cmp	r3, #8
 8003118:	d11c      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311a:	4b44      	ldr	r3, [pc, #272]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d116      	bne.n	8003154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e1c7      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4937      	ldr	r1, [pc, #220]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003152:	e03a      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d020      	beq.n	800319e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b34      	ldr	r3, [pc, #208]	@ (8003230 <HAL_RCC_OscConfig+0x244>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003162:	f7fe ff7b 	bl	800205c <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316a:	f7fe ff77 	bl	800205c <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e1a8      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317c:	4b2b      	ldr	r3, [pc, #172]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003188:	4b28      	ldr	r3, [pc, #160]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4925      	ldr	r1, [pc, #148]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003198:	4313      	orrs	r3, r2
 800319a:	600b      	str	r3, [r1, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_RCC_OscConfig+0x244>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe ff5a 	bl	800205c <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ac:	f7fe ff56 	bl	800205c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e187      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031be:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d036      	beq.n	8003244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <HAL_RCC_OscConfig+0x248>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe ff3a 	bl	800205c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ec:	f7fe ff36 	bl	800205c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e167      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_RCC_OscConfig+0x240>)
 8003200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0x200>
 800320a:	e01b      	b.n	8003244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	@ (8003234 <HAL_RCC_OscConfig+0x248>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe ff23 	bl	800205c <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003218:	e00e      	b.n	8003238 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe ff1f 	bl	800205c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d907      	bls.n	8003238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e150      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800322c:	40023800 	.word	0x40023800
 8003230:	42470000 	.word	0x42470000
 8003234:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003238:	4b88      	ldr	r3, [pc, #544]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 800323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ea      	bne.n	800321a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 8097 	beq.w	8003380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003252:	2300      	movs	r3, #0
 8003254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003256:	4b81      	ldr	r3, [pc, #516]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10f      	bne.n	8003282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	4b7d      	ldr	r3, [pc, #500]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	4a7c      	ldr	r2, [pc, #496]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003270:	6413      	str	r3, [r2, #64]	@ 0x40
 8003272:	4b7a      	ldr	r3, [pc, #488]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b77      	ldr	r3, [pc, #476]	@ (8003460 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b74      	ldr	r3, [pc, #464]	@ (8003460 <HAL_RCC_OscConfig+0x474>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a73      	ldr	r2, [pc, #460]	@ (8003460 <HAL_RCC_OscConfig+0x474>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe fedf 	bl	800205c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fe fedb 	bl	800205c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e10c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003460 <HAL_RCC_OscConfig+0x474>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x2ea>
 80032c8:	4b64      	ldr	r3, [pc, #400]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032cc:	4a63      	ldr	r2, [pc, #396]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d4:	e01c      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b05      	cmp	r3, #5
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x30c>
 80032de:	4b5f      	ldr	r3, [pc, #380]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a5e      	ldr	r2, [pc, #376]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	4b5c      	ldr	r3, [pc, #368]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ee:	4a5b      	ldr	r2, [pc, #364]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f6:	e00b      	b.n	8003310 <HAL_RCC_OscConfig+0x324>
 80032f8:	4b58      	ldr	r3, [pc, #352]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a57      	ldr	r2, [pc, #348]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0301 	bic.w	r3, r3, #1
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
 8003304:	4b55      	ldr	r3, [pc, #340]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003308:	4a54      	ldr	r2, [pc, #336]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 800330a:	f023 0304 	bic.w	r3, r3, #4
 800330e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d015      	beq.n	8003344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe fea0 	bl	800205c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e00a      	b.n	8003336 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe fe9c 	bl	800205c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332e:	4293      	cmp	r3, r2
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e0cb      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003336:	4b49      	ldr	r3, [pc, #292]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0ee      	beq.n	8003320 <HAL_RCC_OscConfig+0x334>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003344:	f7fe fe8a 	bl	800205c <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	e00a      	b.n	8003362 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334c:	f7fe fe86 	bl	800205c <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e0b5      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ee      	bne.n	800334c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800336e:	7dfb      	ldrb	r3, [r7, #23]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d105      	bne.n	8003380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003374:	4b39      	ldr	r3, [pc, #228]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	4a38      	ldr	r2, [pc, #224]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a1 	beq.w	80034cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338a:	4b34      	ldr	r3, [pc, #208]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 030c 	and.w	r3, r3, #12
 8003392:	2b08      	cmp	r3, #8
 8003394:	d05c      	beq.n	8003450 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d141      	bne.n	8003422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b31      	ldr	r3, [pc, #196]	@ (8003464 <HAL_RCC_OscConfig+0x478>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe fe5a 	bl	800205c <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe fe56 	bl	800205c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e087      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	085b      	lsrs	r3, r3, #1
 80033e2:	3b01      	subs	r3, #1
 80033e4:	041b      	lsls	r3, r3, #16
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ec:	061b      	lsls	r3, r3, #24
 80033ee:	491b      	ldr	r1, [pc, #108]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <HAL_RCC_OscConfig+0x478>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fe2f 	bl	800205c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fe2b 	bl	800205c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e05c      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x416>
 8003420:	e054      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b10      	ldr	r3, [pc, #64]	@ (8003464 <HAL_RCC_OscConfig+0x478>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003428:	f7fe fe18 	bl	800205c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fe14 	bl	800205c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e045      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b06      	ldr	r3, [pc, #24]	@ (800345c <HAL_RCC_OscConfig+0x470>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x444>
 800344e:	e03d      	b.n	80034cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e038      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
 8003464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003468:	4b1b      	ldr	r3, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x4ec>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d028      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003480:	429a      	cmp	r2, r3
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d11a      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800349e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d111      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	085b      	lsrs	r3, r3, #1
 80034b0:	3b01      	subs	r3, #1
 80034b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0cc      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f0:	4b68      	ldr	r3, [pc, #416]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d90c      	bls.n	8003518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034fe:	4b65      	ldr	r3, [pc, #404]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003506:	4b63      	ldr	r3, [pc, #396]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d001      	beq.n	8003518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0b8      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003530:	4b59      	ldr	r3, [pc, #356]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a58      	ldr	r2, [pc, #352]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800353a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003548:	4b53      	ldr	r3, [pc, #332]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a52      	ldr	r2, [pc, #328]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003554:	4b50      	ldr	r3, [pc, #320]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	494d      	ldr	r1, [pc, #308]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003562:	4313      	orrs	r3, r2
 8003564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d044      	beq.n	80035fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d107      	bne.n	800358a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357a:	4b47      	ldr	r3, [pc, #284]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d119      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e07f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d003      	beq.n	800359a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003596:	2b03      	cmp	r3, #3
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359a:	4b3f      	ldr	r3, [pc, #252]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e067      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ba:	4b37      	ldr	r3, [pc, #220]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 0203 	bic.w	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4934      	ldr	r1, [pc, #208]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035cc:	f7fe fd46 	bl	800205c <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fd42 	bl	800205c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04f      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 020c 	and.w	r2, r3, #12
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1eb      	bne.n	80035d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d20c      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003612:	4b20      	ldr	r3, [pc, #128]	@ (8003694 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e032      	b.n	800368a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003630:	4b19      	ldr	r3, [pc, #100]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4916      	ldr	r1, [pc, #88]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	4313      	orrs	r3, r2
 8003640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d009      	beq.n	8003662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800364e:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	490e      	ldr	r1, [pc, #56]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	4313      	orrs	r3, r2
 8003660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003662:	f000 f821 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003666:	4602      	mov	r2, r0
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	091b      	lsrs	r3, r3, #4
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	490a      	ldr	r1, [pc, #40]	@ (800369c <HAL_RCC_ClockConfig+0x1c0>)
 8003674:	5ccb      	ldrb	r3, [r1, r3]
 8003676:	fa22 f303 	lsr.w	r3, r2, r3
 800367a:	4a09      	ldr	r2, [pc, #36]	@ (80036a0 <HAL_RCC_ClockConfig+0x1c4>)
 800367c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fca6 	bl	8001fd4 <HAL_InitTick>

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023c00 	.word	0x40023c00
 8003698:	40023800 	.word	0x40023800
 800369c:	0800653c 	.word	0x0800653c
 80036a0:	20000014 	.word	0x20000014
 80036a4:	20000018 	.word	0x20000018

080036a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ac:	b094      	sub	sp, #80	@ 0x50
 80036ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b4:	2300      	movs	r3, #0
 80036b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b8:	2300      	movs	r3, #0
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c0:	4b79      	ldr	r3, [pc, #484]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d00d      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x40>
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	f200 80e1 	bhi.w	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x34>
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d003      	beq.n	80036e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80036da:	e0db      	b.n	8003894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b73      	ldr	r3, [pc, #460]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 80036de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80036e0:	e0db      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e2:	4b73      	ldr	r3, [pc, #460]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80036e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036e6:	e0d8      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e8:	4b6f      	ldr	r3, [pc, #444]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f2:	4b6d      	ldr	r3, [pc, #436]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fe:	4b6a      	ldr	r3, [pc, #424]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	2200      	movs	r2, #0
 8003706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003708:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800370a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800370c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003710:	633b      	str	r3, [r7, #48]	@ 0x30
 8003712:	2300      	movs	r3, #0
 8003714:	637b      	str	r3, [r7, #52]	@ 0x34
 8003716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800371a:	4622      	mov	r2, r4
 800371c:	462b      	mov	r3, r5
 800371e:	f04f 0000 	mov.w	r0, #0
 8003722:	f04f 0100 	mov.w	r1, #0
 8003726:	0159      	lsls	r1, r3, #5
 8003728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800372c:	0150      	lsls	r0, r2, #5
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4621      	mov	r1, r4
 8003734:	1a51      	subs	r1, r2, r1
 8003736:	6139      	str	r1, [r7, #16]
 8003738:	4629      	mov	r1, r5
 800373a:	eb63 0301 	sbc.w	r3, r3, r1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800374c:	4659      	mov	r1, fp
 800374e:	018b      	lsls	r3, r1, #6
 8003750:	4651      	mov	r1, sl
 8003752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003756:	4651      	mov	r1, sl
 8003758:	018a      	lsls	r2, r1, #6
 800375a:	4651      	mov	r1, sl
 800375c:	ebb2 0801 	subs.w	r8, r2, r1
 8003760:	4659      	mov	r1, fp
 8003762:	eb63 0901 	sbc.w	r9, r3, r1
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377a:	4690      	mov	r8, r2
 800377c:	4699      	mov	r9, r3
 800377e:	4623      	mov	r3, r4
 8003780:	eb18 0303 	adds.w	r3, r8, r3
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	462b      	mov	r3, r5
 8003788:	eb49 0303 	adc.w	r3, r9, r3
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	f04f 0200 	mov.w	r2, #0
 8003792:	f04f 0300 	mov.w	r3, #0
 8003796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800379a:	4629      	mov	r1, r5
 800379c:	024b      	lsls	r3, r1, #9
 800379e:	4621      	mov	r1, r4
 80037a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a4:	4621      	mov	r1, r4
 80037a6:	024a      	lsls	r2, r1, #9
 80037a8:	4610      	mov	r0, r2
 80037aa:	4619      	mov	r1, r3
 80037ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ae:	2200      	movs	r2, #0
 80037b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037b8:	f7fd f9e0 	bl	8000b7c <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4613      	mov	r3, r2
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e058      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c6:	4b38      	ldr	r3, [pc, #224]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	099b      	lsrs	r3, r3, #6
 80037cc:	2200      	movs	r2, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	4611      	mov	r1, r2
 80037d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	2300      	movs	r3, #0
 80037da:	627b      	str	r3, [r7, #36]	@ 0x24
 80037dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037e0:	4642      	mov	r2, r8
 80037e2:	464b      	mov	r3, r9
 80037e4:	f04f 0000 	mov.w	r0, #0
 80037e8:	f04f 0100 	mov.w	r1, #0
 80037ec:	0159      	lsls	r1, r3, #5
 80037ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037f2:	0150      	lsls	r0, r2, #5
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4641      	mov	r1, r8
 80037fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80037fe:	4649      	mov	r1, r9
 8003800:	eb63 0b01 	sbc.w	fp, r3, r1
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003818:	ebb2 040a 	subs.w	r4, r2, sl
 800381c:	eb63 050b 	sbc.w	r5, r3, fp
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	00eb      	lsls	r3, r5, #3
 800382a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382e:	00e2      	lsls	r2, r4, #3
 8003830:	4614      	mov	r4, r2
 8003832:	461d      	mov	r5, r3
 8003834:	4643      	mov	r3, r8
 8003836:	18e3      	adds	r3, r4, r3
 8003838:	603b      	str	r3, [r7, #0]
 800383a:	464b      	mov	r3, r9
 800383c:	eb45 0303 	adc.w	r3, r5, r3
 8003840:	607b      	str	r3, [r7, #4]
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800384e:	4629      	mov	r1, r5
 8003850:	028b      	lsls	r3, r1, #10
 8003852:	4621      	mov	r1, r4
 8003854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003858:	4621      	mov	r1, r4
 800385a:	028a      	lsls	r2, r1, #10
 800385c:	4610      	mov	r0, r2
 800385e:	4619      	mov	r1, r3
 8003860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003862:	2200      	movs	r2, #0
 8003864:	61bb      	str	r3, [r7, #24]
 8003866:	61fa      	str	r2, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	f7fd f986 	bl	8000b7c <__aeabi_uldivmod>
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4613      	mov	r3, r2
 8003876:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	0c1b      	lsrs	r3, r3, #16
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	3301      	adds	r3, #1
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800388a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003892:	e002      	b.n	800389a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003894:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x204>)
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800389c:	4618      	mov	r0, r3
 800389e:	3750      	adds	r7, #80	@ 0x50
 80038a0:	46bd      	mov	sp, r7
 80038a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a6:	bf00      	nop
 80038a8:	40023800 	.word	0x40023800
 80038ac:	00f42400 	.word	0x00f42400
 80038b0:	007a1200 	.word	0x007a1200

080038b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b8:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000014 	.word	0x20000014

080038cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d0:	f7ff fff0 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	0a9b      	lsrs	r3, r3, #10
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	4903      	ldr	r1, [pc, #12]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e2:	5ccb      	ldrb	r3, [r1, r3]
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	40023800 	.word	0x40023800
 80038f0:	0800654c 	.word	0x0800654c

080038f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038f8:	f7ff ffdc 	bl	80038b4 <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0b5b      	lsrs	r3, r3, #13
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4903      	ldr	r1, [pc, #12]	@ (8003918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	0800654c 	.word	0x0800654c

0800391c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e042      	b.n	80039b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe f99e 	bl	8001c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800395e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f82b 	bl	80039bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691a      	ldr	r2, [r3, #16]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695a      	ldr	r2, [r3, #20]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b0c0      	sub	sp, #256	@ 0x100
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	68d9      	ldr	r1, [r3, #12]
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	ea40 0301 	orr.w	r3, r0, r1
 80039e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a14:	f021 010c 	bic.w	r1, r1, #12
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a22:	430b      	orrs	r3, r1
 8003a24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	6999      	ldr	r1, [r3, #24]
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	ea40 0301 	orr.w	r3, r0, r1
 8003a42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8003c88 <UART_SetConfig+0x2cc>)
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d005      	beq.n	8003a5c <UART_SetConfig+0xa0>
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4b8d      	ldr	r3, [pc, #564]	@ (8003c8c <UART_SetConfig+0x2d0>)
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d104      	bne.n	8003a66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a5c:	f7ff ff4a 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
 8003a60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a64:	e003      	b.n	8003a6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a66:	f7ff ff31 	bl	80038cc <HAL_RCC_GetPCLK1Freq>
 8003a6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a78:	f040 810c 	bne.w	8003c94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a8e:	4622      	mov	r2, r4
 8003a90:	462b      	mov	r3, r5
 8003a92:	1891      	adds	r1, r2, r2
 8003a94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a96:	415b      	adcs	r3, r3
 8003a98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	eb12 0801 	adds.w	r8, r2, r1
 8003aa4:	4629      	mov	r1, r5
 8003aa6:	eb43 0901 	adc.w	r9, r3, r1
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ab6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003abe:	4690      	mov	r8, r2
 8003ac0:	4699      	mov	r9, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	eb18 0303 	adds.w	r3, r8, r3
 8003ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003acc:	462b      	mov	r3, r5
 8003ace:	eb49 0303 	adc.w	r3, r9, r3
 8003ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ae2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ae6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003aea:	460b      	mov	r3, r1
 8003aec:	18db      	adds	r3, r3, r3
 8003aee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003af0:	4613      	mov	r3, r2
 8003af2:	eb42 0303 	adc.w	r3, r2, r3
 8003af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003af8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003afc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b00:	f7fd f83c 	bl	8000b7c <__aeabi_uldivmod>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4b61      	ldr	r3, [pc, #388]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003b0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	011c      	lsls	r4, r3, #4
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b34:	4641      	mov	r1, r8
 8003b36:	eb12 0a01 	adds.w	sl, r2, r1
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	eb43 0b01 	adc.w	fp, r3, r1
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b54:	4692      	mov	sl, r2
 8003b56:	469b      	mov	fp, r3
 8003b58:	4643      	mov	r3, r8
 8003b5a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b62:	464b      	mov	r3, r9
 8003b64:	eb4b 0303 	adc.w	r3, fp, r3
 8003b68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b80:	460b      	mov	r3, r1
 8003b82:	18db      	adds	r3, r3, r3
 8003b84:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b86:	4613      	mov	r3, r2
 8003b88:	eb42 0303 	adc.w	r3, r2, r3
 8003b8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b96:	f7fc fff1 	bl	8000b7c <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2264      	movs	r2, #100	@ 0x64
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	1acb      	subs	r3, r1, r3
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bb6:	4b36      	ldr	r3, [pc, #216]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003bb8:	fba3 2302 	umull	r2, r3, r3, r2
 8003bbc:	095b      	lsrs	r3, r3, #5
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bc4:	441c      	add	r4, r3
 8003bc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	1891      	adds	r1, r2, r2
 8003bde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003be0:	415b      	adcs	r3, r3
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003be8:	4641      	mov	r1, r8
 8003bea:	1851      	adds	r1, r2, r1
 8003bec:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bee:	4649      	mov	r1, r9
 8003bf0:	414b      	adcs	r3, r1
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c00:	4659      	mov	r1, fp
 8003c02:	00cb      	lsls	r3, r1, #3
 8003c04:	4651      	mov	r1, sl
 8003c06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c0a:	4651      	mov	r1, sl
 8003c0c:	00ca      	lsls	r2, r1, #3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	4603      	mov	r3, r0
 8003c14:	4642      	mov	r2, r8
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c1c:	464b      	mov	r3, r9
 8003c1e:	460a      	mov	r2, r1
 8003c20:	eb42 0303 	adc.w	r3, r2, r3
 8003c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	18db      	adds	r3, r3, r3
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c42:	4613      	mov	r3, r2
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c52:	f7fc ff93 	bl	8000b7c <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003c5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	2164      	movs	r1, #100	@ 0x64
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	3332      	adds	r3, #50	@ 0x32
 8003c6e:	4a08      	ldr	r2, [pc, #32]	@ (8003c90 <UART_SetConfig+0x2d4>)
 8003c70:	fba2 2303 	umull	r2, r3, r2, r3
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	f003 0207 	and.w	r2, r3, #7
 8003c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4422      	add	r2, r4
 8003c82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c84:	e106      	b.n	8003e94 <UART_SetConfig+0x4d8>
 8003c86:	bf00      	nop
 8003c88:	40011000 	.word	0x40011000
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ca2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	464b      	mov	r3, r9
 8003caa:	1891      	adds	r1, r2, r2
 8003cac:	6239      	str	r1, [r7, #32]
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	1854      	adds	r4, r2, r1
 8003cba:	4649      	mov	r1, r9
 8003cbc:	eb43 0501 	adc.w	r5, r3, r1
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	00eb      	lsls	r3, r5, #3
 8003cca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cce:	00e2      	lsls	r2, r4, #3
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	461d      	mov	r5, r3
 8003cd4:	4643      	mov	r3, r8
 8003cd6:	18e3      	adds	r3, r4, r3
 8003cd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cdc:	464b      	mov	r3, r9
 8003cde:	eb45 0303 	adc.w	r3, r5, r3
 8003ce2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d02:	4629      	mov	r1, r5
 8003d04:	008b      	lsls	r3, r1, #2
 8003d06:	4621      	mov	r1, r4
 8003d08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	008a      	lsls	r2, r1, #2
 8003d10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d14:	f7fc ff32 	bl	8000b7c <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ea0 <UART_SetConfig+0x4e4>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	011c      	lsls	r4, r3, #4
 8003d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	1891      	adds	r1, r2, r2
 8003d3e:	61b9      	str	r1, [r7, #24]
 8003d40:	415b      	adcs	r3, r3
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d48:	4641      	mov	r1, r8
 8003d4a:	1851      	adds	r1, r2, r1
 8003d4c:	6139      	str	r1, [r7, #16]
 8003d4e:	4649      	mov	r1, r9
 8003d50:	414b      	adcs	r3, r1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d60:	4659      	mov	r1, fp
 8003d62:	00cb      	lsls	r3, r1, #3
 8003d64:	4651      	mov	r1, sl
 8003d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	00ca      	lsls	r2, r1, #3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	4642      	mov	r2, r8
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d7c:	464b      	mov	r3, r9
 8003d7e:	460a      	mov	r2, r1
 8003d80:	eb42 0303 	adc.w	r3, r2, r3
 8003d84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003da0:	4649      	mov	r1, r9
 8003da2:	008b      	lsls	r3, r1, #2
 8003da4:	4641      	mov	r1, r8
 8003da6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003daa:	4641      	mov	r1, r8
 8003dac:	008a      	lsls	r2, r1, #2
 8003dae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003db2:	f7fc fee3 	bl	8000b7c <__aeabi_uldivmod>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4b38      	ldr	r3, [pc, #224]	@ (8003ea0 <UART_SetConfig+0x4e4>)
 8003dbe:	fba3 2301 	umull	r2, r3, r3, r1
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	2264      	movs	r2, #100	@ 0x64
 8003dc6:	fb02 f303 	mul.w	r3, r2, r3
 8003dca:	1acb      	subs	r3, r1, r3
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	3332      	adds	r3, #50	@ 0x32
 8003dd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ea0 <UART_SetConfig+0x4e4>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ddc:	441c      	add	r4, r3
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003de6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003de8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dec:	4642      	mov	r2, r8
 8003dee:	464b      	mov	r3, r9
 8003df0:	1891      	adds	r1, r2, r2
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	415b      	adcs	r3, r3
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	1851      	adds	r1, r2, r1
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	4649      	mov	r1, r9
 8003e04:	414b      	adcs	r3, r1
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e14:	4659      	mov	r1, fp
 8003e16:	00cb      	lsls	r3, r1, #3
 8003e18:	4651      	mov	r1, sl
 8003e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1e:	4651      	mov	r1, sl
 8003e20:	00ca      	lsls	r2, r1, #3
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	4642      	mov	r2, r8
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e2e:	464b      	mov	r3, r9
 8003e30:	460a      	mov	r2, r1
 8003e32:	eb42 0303 	adc.w	r3, r2, r3
 8003e36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e42:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e50:	4649      	mov	r1, r9
 8003e52:	008b      	lsls	r3, r1, #2
 8003e54:	4641      	mov	r1, r8
 8003e56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	008a      	lsls	r2, r1, #2
 8003e5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e62:	f7fc fe8b 	bl	8000b7c <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <UART_SetConfig+0x4e4>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	@ 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	3332      	adds	r3, #50	@ 0x32
 8003e7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <UART_SetConfig+0x4e4>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4422      	add	r2, r4
 8003e92:	609a      	str	r2, [r3, #8]
}
 8003e94:	bf00      	nop
 8003e96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea0:	51eb851f 	.word	0x51eb851f

08003ea4 <gcvt>:
 8003ea4:	b530      	push	{r4, r5, lr}
 8003ea6:	ed2d 8b02 	vpush	{d8}
 8003eaa:	eeb0 8a40 	vmov.f32	s16, s0
 8003eae:	eef0 8a60 	vmov.f32	s17, s1
 8003eb2:	460c      	mov	r4, r1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	4605      	mov	r5, r0
 8003eba:	2300      	movs	r3, #0
 8003ebc:	ec51 0b10 	vmov	r0, r1, d0
 8003ec0:	f7fc fe0c 	bl	8000adc <__aeabi_dcmplt>
 8003ec4:	4622      	mov	r2, r4
 8003ec6:	b118      	cbz	r0, 8003ed0 <gcvt+0x2c>
 8003ec8:	232d      	movs	r3, #45	@ 0x2d
 8003eca:	f802 3b01 	strb.w	r3, [r2], #1
 8003ece:	3d01      	subs	r5, #1
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4809      	ldr	r0, [pc, #36]	@ (8003ef8 <gcvt+0x54>)
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	2367      	movs	r3, #103	@ 0x67
 8003eda:	eeb0 0a48 	vmov.f32	s0, s16
 8003ede:	eef0 0a68 	vmov.f32	s1, s17
 8003ee2:	6800      	ldr	r0, [r0, #0]
 8003ee4:	f000 faf8 	bl	80044d8 <_gcvt>
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	bf18      	it	ne
 8003eec:	4620      	movne	r0, r4
 8003eee:	b003      	add	sp, #12
 8003ef0:	ecbd 8b02 	vpop	{d8}
 8003ef4:	bd30      	pop	{r4, r5, pc}
 8003ef6:	bf00      	nop
 8003ef8:	2000002c 	.word	0x2000002c

08003efc <std>:
 8003efc:	2300      	movs	r3, #0
 8003efe:	b510      	push	{r4, lr}
 8003f00:	4604      	mov	r4, r0
 8003f02:	e9c0 3300 	strd	r3, r3, [r0]
 8003f06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f0a:	6083      	str	r3, [r0, #8]
 8003f0c:	8181      	strh	r1, [r0, #12]
 8003f0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f10:	81c2      	strh	r2, [r0, #14]
 8003f12:	6183      	str	r3, [r0, #24]
 8003f14:	4619      	mov	r1, r3
 8003f16:	2208      	movs	r2, #8
 8003f18:	305c      	adds	r0, #92	@ 0x5c
 8003f1a:	f000 f8f4 	bl	8004106 <memset>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f54 <std+0x58>)
 8003f20:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <std+0x5c>)
 8003f24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f26:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <std+0x60>)
 8003f28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <std+0x64>)
 8003f2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <std+0x68>)
 8003f30:	6224      	str	r4, [r4, #32]
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d006      	beq.n	8003f44 <std+0x48>
 8003f36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f3a:	4294      	cmp	r4, r2
 8003f3c:	d002      	beq.n	8003f44 <std+0x48>
 8003f3e:	33d0      	adds	r3, #208	@ 0xd0
 8003f40:	429c      	cmp	r4, r3
 8003f42:	d105      	bne.n	8003f50 <std+0x54>
 8003f44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f4c:	f000 b954 	b.w	80041f8 <__retarget_lock_init_recursive>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	08004081 	.word	0x08004081
 8003f58:	080040a3 	.word	0x080040a3
 8003f5c:	080040db 	.word	0x080040db
 8003f60:	080040ff 	.word	0x080040ff
 8003f64:	20000168 	.word	0x20000168

08003f68 <stdio_exit_handler>:
 8003f68:	4a02      	ldr	r2, [pc, #8]	@ (8003f74 <stdio_exit_handler+0xc>)
 8003f6a:	4903      	ldr	r1, [pc, #12]	@ (8003f78 <stdio_exit_handler+0x10>)
 8003f6c:	4803      	ldr	r0, [pc, #12]	@ (8003f7c <stdio_exit_handler+0x14>)
 8003f6e:	f000 b869 	b.w	8004044 <_fwalk_sglue>
 8003f72:	bf00      	nop
 8003f74:	20000020 	.word	0x20000020
 8003f78:	08004769 	.word	0x08004769
 8003f7c:	20000030 	.word	0x20000030

08003f80 <cleanup_stdio>:
 8003f80:	6841      	ldr	r1, [r0, #4]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb4 <cleanup_stdio+0x34>)
 8003f84:	4299      	cmp	r1, r3
 8003f86:	b510      	push	{r4, lr}
 8003f88:	4604      	mov	r4, r0
 8003f8a:	d001      	beq.n	8003f90 <cleanup_stdio+0x10>
 8003f8c:	f000 fbec 	bl	8004768 <_fflush_r>
 8003f90:	68a1      	ldr	r1, [r4, #8]
 8003f92:	4b09      	ldr	r3, [pc, #36]	@ (8003fb8 <cleanup_stdio+0x38>)
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d002      	beq.n	8003f9e <cleanup_stdio+0x1e>
 8003f98:	4620      	mov	r0, r4
 8003f9a:	f000 fbe5 	bl	8004768 <_fflush_r>
 8003f9e:	68e1      	ldr	r1, [r4, #12]
 8003fa0:	4b06      	ldr	r3, [pc, #24]	@ (8003fbc <cleanup_stdio+0x3c>)
 8003fa2:	4299      	cmp	r1, r3
 8003fa4:	d004      	beq.n	8003fb0 <cleanup_stdio+0x30>
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fac:	f000 bbdc 	b.w	8004768 <_fflush_r>
 8003fb0:	bd10      	pop	{r4, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000168 	.word	0x20000168
 8003fb8:	200001d0 	.word	0x200001d0
 8003fbc:	20000238 	.word	0x20000238

08003fc0 <global_stdio_init.part.0>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <global_stdio_init.part.0+0x30>)
 8003fc4:	4c0b      	ldr	r4, [pc, #44]	@ (8003ff4 <global_stdio_init.part.0+0x34>)
 8003fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ff8 <global_stdio_init.part.0+0x38>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	4620      	mov	r0, r4
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2104      	movs	r1, #4
 8003fd0:	f7ff ff94 	bl	8003efc <std>
 8003fd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fd8:	2201      	movs	r2, #1
 8003fda:	2109      	movs	r1, #9
 8003fdc:	f7ff ff8e 	bl	8003efc <std>
 8003fe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fea:	2112      	movs	r1, #18
 8003fec:	f7ff bf86 	b.w	8003efc <std>
 8003ff0:	200002a0 	.word	0x200002a0
 8003ff4:	20000168 	.word	0x20000168
 8003ff8:	08003f69 	.word	0x08003f69

08003ffc <__sfp_lock_acquire>:
 8003ffc:	4801      	ldr	r0, [pc, #4]	@ (8004004 <__sfp_lock_acquire+0x8>)
 8003ffe:	f000 b8fc 	b.w	80041fa <__retarget_lock_acquire_recursive>
 8004002:	bf00      	nop
 8004004:	200002a9 	.word	0x200002a9

08004008 <__sfp_lock_release>:
 8004008:	4801      	ldr	r0, [pc, #4]	@ (8004010 <__sfp_lock_release+0x8>)
 800400a:	f000 b8f7 	b.w	80041fc <__retarget_lock_release_recursive>
 800400e:	bf00      	nop
 8004010:	200002a9 	.word	0x200002a9

08004014 <__sinit>:
 8004014:	b510      	push	{r4, lr}
 8004016:	4604      	mov	r4, r0
 8004018:	f7ff fff0 	bl	8003ffc <__sfp_lock_acquire>
 800401c:	6a23      	ldr	r3, [r4, #32]
 800401e:	b11b      	cbz	r3, 8004028 <__sinit+0x14>
 8004020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004024:	f7ff bff0 	b.w	8004008 <__sfp_lock_release>
 8004028:	4b04      	ldr	r3, [pc, #16]	@ (800403c <__sinit+0x28>)
 800402a:	6223      	str	r3, [r4, #32]
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <__sinit+0x2c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1f5      	bne.n	8004020 <__sinit+0xc>
 8004034:	f7ff ffc4 	bl	8003fc0 <global_stdio_init.part.0>
 8004038:	e7f2      	b.n	8004020 <__sinit+0xc>
 800403a:	bf00      	nop
 800403c:	08003f81 	.word	0x08003f81
 8004040:	200002a0 	.word	0x200002a0

08004044 <_fwalk_sglue>:
 8004044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4607      	mov	r7, r0
 800404a:	4688      	mov	r8, r1
 800404c:	4614      	mov	r4, r2
 800404e:	2600      	movs	r6, #0
 8004050:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004054:	f1b9 0901 	subs.w	r9, r9, #1
 8004058:	d505      	bpl.n	8004066 <_fwalk_sglue+0x22>
 800405a:	6824      	ldr	r4, [r4, #0]
 800405c:	2c00      	cmp	r4, #0
 800405e:	d1f7      	bne.n	8004050 <_fwalk_sglue+0xc>
 8004060:	4630      	mov	r0, r6
 8004062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004066:	89ab      	ldrh	r3, [r5, #12]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d907      	bls.n	800407c <_fwalk_sglue+0x38>
 800406c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004070:	3301      	adds	r3, #1
 8004072:	d003      	beq.n	800407c <_fwalk_sglue+0x38>
 8004074:	4629      	mov	r1, r5
 8004076:	4638      	mov	r0, r7
 8004078:	47c0      	blx	r8
 800407a:	4306      	orrs	r6, r0
 800407c:	3568      	adds	r5, #104	@ 0x68
 800407e:	e7e9      	b.n	8004054 <_fwalk_sglue+0x10>

08004080 <__sread>:
 8004080:	b510      	push	{r4, lr}
 8004082:	460c      	mov	r4, r1
 8004084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004088:	f000 f868 	bl	800415c <_read_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	bfab      	itete	ge
 8004090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004092:	89a3      	ldrhlt	r3, [r4, #12]
 8004094:	181b      	addge	r3, r3, r0
 8004096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800409a:	bfac      	ite	ge
 800409c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800409e:	81a3      	strhlt	r3, [r4, #12]
 80040a0:	bd10      	pop	{r4, pc}

080040a2 <__swrite>:
 80040a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a6:	461f      	mov	r7, r3
 80040a8:	898b      	ldrh	r3, [r1, #12]
 80040aa:	05db      	lsls	r3, r3, #23
 80040ac:	4605      	mov	r5, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	4616      	mov	r6, r2
 80040b2:	d505      	bpl.n	80040c0 <__swrite+0x1e>
 80040b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b8:	2302      	movs	r3, #2
 80040ba:	2200      	movs	r2, #0
 80040bc:	f000 f83c 	bl	8004138 <_lseek_r>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80040ca:	81a3      	strh	r3, [r4, #12]
 80040cc:	4632      	mov	r2, r6
 80040ce:	463b      	mov	r3, r7
 80040d0:	4628      	mov	r0, r5
 80040d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040d6:	f000 b853 	b.w	8004180 <_write_r>

080040da <__sseek>:
 80040da:	b510      	push	{r4, lr}
 80040dc:	460c      	mov	r4, r1
 80040de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e2:	f000 f829 	bl	8004138 <_lseek_r>
 80040e6:	1c43      	adds	r3, r0, #1
 80040e8:	89a3      	ldrh	r3, [r4, #12]
 80040ea:	bf15      	itete	ne
 80040ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80040ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80040f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80040f6:	81a3      	strheq	r3, [r4, #12]
 80040f8:	bf18      	it	ne
 80040fa:	81a3      	strhne	r3, [r4, #12]
 80040fc:	bd10      	pop	{r4, pc}

080040fe <__sclose>:
 80040fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004102:	f000 b809 	b.w	8004118 <_close_r>

08004106 <memset>:
 8004106:	4402      	add	r2, r0
 8004108:	4603      	mov	r3, r0
 800410a:	4293      	cmp	r3, r2
 800410c:	d100      	bne.n	8004110 <memset+0xa>
 800410e:	4770      	bx	lr
 8004110:	f803 1b01 	strb.w	r1, [r3], #1
 8004114:	e7f9      	b.n	800410a <memset+0x4>
	...

08004118 <_close_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	4d06      	ldr	r5, [pc, #24]	@ (8004134 <_close_r+0x1c>)
 800411c:	2300      	movs	r3, #0
 800411e:	4604      	mov	r4, r0
 8004120:	4608      	mov	r0, r1
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	f7fd fe8d 	bl	8001e42 <_close>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_close_r+0x1a>
 800412c:	682b      	ldr	r3, [r5, #0]
 800412e:	b103      	cbz	r3, 8004132 <_close_r+0x1a>
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	200002a4 	.word	0x200002a4

08004138 <_lseek_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	4d07      	ldr	r5, [pc, #28]	@ (8004158 <_lseek_r+0x20>)
 800413c:	4604      	mov	r4, r0
 800413e:	4608      	mov	r0, r1
 8004140:	4611      	mov	r1, r2
 8004142:	2200      	movs	r2, #0
 8004144:	602a      	str	r2, [r5, #0]
 8004146:	461a      	mov	r2, r3
 8004148:	f7fd fea2 	bl	8001e90 <_lseek>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d102      	bne.n	8004156 <_lseek_r+0x1e>
 8004150:	682b      	ldr	r3, [r5, #0]
 8004152:	b103      	cbz	r3, 8004156 <_lseek_r+0x1e>
 8004154:	6023      	str	r3, [r4, #0]
 8004156:	bd38      	pop	{r3, r4, r5, pc}
 8004158:	200002a4 	.word	0x200002a4

0800415c <_read_r>:
 800415c:	b538      	push	{r3, r4, r5, lr}
 800415e:	4d07      	ldr	r5, [pc, #28]	@ (800417c <_read_r+0x20>)
 8004160:	4604      	mov	r4, r0
 8004162:	4608      	mov	r0, r1
 8004164:	4611      	mov	r1, r2
 8004166:	2200      	movs	r2, #0
 8004168:	602a      	str	r2, [r5, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	f7fd fe30 	bl	8001dd0 <_read>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_read_r+0x1e>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_read_r+0x1e>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	200002a4 	.word	0x200002a4

08004180 <_write_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d07      	ldr	r5, [pc, #28]	@ (80041a0 <_write_r+0x20>)
 8004184:	4604      	mov	r4, r0
 8004186:	4608      	mov	r0, r1
 8004188:	4611      	mov	r1, r2
 800418a:	2200      	movs	r2, #0
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fd fe3b 	bl	8001e0a <_write>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_write_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_write_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	200002a4 	.word	0x200002a4

080041a4 <__errno>:
 80041a4:	4b01      	ldr	r3, [pc, #4]	@ (80041ac <__errno+0x8>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	2000002c 	.word	0x2000002c

080041b0 <__libc_init_array>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4d0d      	ldr	r5, [pc, #52]	@ (80041e8 <__libc_init_array+0x38>)
 80041b4:	4c0d      	ldr	r4, [pc, #52]	@ (80041ec <__libc_init_array+0x3c>)
 80041b6:	1b64      	subs	r4, r4, r5
 80041b8:	10a4      	asrs	r4, r4, #2
 80041ba:	2600      	movs	r6, #0
 80041bc:	42a6      	cmp	r6, r4
 80041be:	d109      	bne.n	80041d4 <__libc_init_array+0x24>
 80041c0:	4d0b      	ldr	r5, [pc, #44]	@ (80041f0 <__libc_init_array+0x40>)
 80041c2:	4c0c      	ldr	r4, [pc, #48]	@ (80041f4 <__libc_init_array+0x44>)
 80041c4:	f002 f988 	bl	80064d8 <_init>
 80041c8:	1b64      	subs	r4, r4, r5
 80041ca:	10a4      	asrs	r4, r4, #2
 80041cc:	2600      	movs	r6, #0
 80041ce:	42a6      	cmp	r6, r4
 80041d0:	d105      	bne.n	80041de <__libc_init_array+0x2e>
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d8:	4798      	blx	r3
 80041da:	3601      	adds	r6, #1
 80041dc:	e7ee      	b.n	80041bc <__libc_init_array+0xc>
 80041de:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e2:	4798      	blx	r3
 80041e4:	3601      	adds	r6, #1
 80041e6:	e7f2      	b.n	80041ce <__libc_init_array+0x1e>
 80041e8:	080067b0 	.word	0x080067b0
 80041ec:	080067b0 	.word	0x080067b0
 80041f0:	080067b0 	.word	0x080067b0
 80041f4:	080067b4 	.word	0x080067b4

080041f8 <__retarget_lock_init_recursive>:
 80041f8:	4770      	bx	lr

080041fa <__retarget_lock_acquire_recursive>:
 80041fa:	4770      	bx	lr

080041fc <__retarget_lock_release_recursive>:
 80041fc:	4770      	bx	lr
	...

08004200 <_free_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4605      	mov	r5, r0
 8004204:	2900      	cmp	r1, #0
 8004206:	d041      	beq.n	800428c <_free_r+0x8c>
 8004208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800420c:	1f0c      	subs	r4, r1, #4
 800420e:	2b00      	cmp	r3, #0
 8004210:	bfb8      	it	lt
 8004212:	18e4      	addlt	r4, r4, r3
 8004214:	f000 f8e0 	bl	80043d8 <__malloc_lock>
 8004218:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <_free_r+0x90>)
 800421a:	6813      	ldr	r3, [r2, #0]
 800421c:	b933      	cbnz	r3, 800422c <_free_r+0x2c>
 800421e:	6063      	str	r3, [r4, #4]
 8004220:	6014      	str	r4, [r2, #0]
 8004222:	4628      	mov	r0, r5
 8004224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004228:	f000 b8dc 	b.w	80043e4 <__malloc_unlock>
 800422c:	42a3      	cmp	r3, r4
 800422e:	d908      	bls.n	8004242 <_free_r+0x42>
 8004230:	6820      	ldr	r0, [r4, #0]
 8004232:	1821      	adds	r1, r4, r0
 8004234:	428b      	cmp	r3, r1
 8004236:	bf01      	itttt	eq
 8004238:	6819      	ldreq	r1, [r3, #0]
 800423a:	685b      	ldreq	r3, [r3, #4]
 800423c:	1809      	addeq	r1, r1, r0
 800423e:	6021      	streq	r1, [r4, #0]
 8004240:	e7ed      	b.n	800421e <_free_r+0x1e>
 8004242:	461a      	mov	r2, r3
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	b10b      	cbz	r3, 800424c <_free_r+0x4c>
 8004248:	42a3      	cmp	r3, r4
 800424a:	d9fa      	bls.n	8004242 <_free_r+0x42>
 800424c:	6811      	ldr	r1, [r2, #0]
 800424e:	1850      	adds	r0, r2, r1
 8004250:	42a0      	cmp	r0, r4
 8004252:	d10b      	bne.n	800426c <_free_r+0x6c>
 8004254:	6820      	ldr	r0, [r4, #0]
 8004256:	4401      	add	r1, r0
 8004258:	1850      	adds	r0, r2, r1
 800425a:	4283      	cmp	r3, r0
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	d1e0      	bne.n	8004222 <_free_r+0x22>
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	6053      	str	r3, [r2, #4]
 8004266:	4408      	add	r0, r1
 8004268:	6010      	str	r0, [r2, #0]
 800426a:	e7da      	b.n	8004222 <_free_r+0x22>
 800426c:	d902      	bls.n	8004274 <_free_r+0x74>
 800426e:	230c      	movs	r3, #12
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	e7d6      	b.n	8004222 <_free_r+0x22>
 8004274:	6820      	ldr	r0, [r4, #0]
 8004276:	1821      	adds	r1, r4, r0
 8004278:	428b      	cmp	r3, r1
 800427a:	bf04      	itt	eq
 800427c:	6819      	ldreq	r1, [r3, #0]
 800427e:	685b      	ldreq	r3, [r3, #4]
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	bf04      	itt	eq
 8004284:	1809      	addeq	r1, r1, r0
 8004286:	6021      	streq	r1, [r4, #0]
 8004288:	6054      	str	r4, [r2, #4]
 800428a:	e7ca      	b.n	8004222 <_free_r+0x22>
 800428c:	bd38      	pop	{r3, r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	200002b0 	.word	0x200002b0

08004294 <sbrk_aligned>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4e0f      	ldr	r6, [pc, #60]	@ (80042d4 <sbrk_aligned+0x40>)
 8004298:	460c      	mov	r4, r1
 800429a:	6831      	ldr	r1, [r6, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	b911      	cbnz	r1, 80042a6 <sbrk_aligned+0x12>
 80042a0:	f000 fa8a 	bl	80047b8 <_sbrk_r>
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 fa85 	bl	80047b8 <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d103      	bne.n	80042ba <sbrk_aligned+0x26>
 80042b2:	f04f 34ff 	mov.w	r4, #4294967295
 80042b6:	4620      	mov	r0, r4
 80042b8:	bd70      	pop	{r4, r5, r6, pc}
 80042ba:	1cc4      	adds	r4, r0, #3
 80042bc:	f024 0403 	bic.w	r4, r4, #3
 80042c0:	42a0      	cmp	r0, r4
 80042c2:	d0f8      	beq.n	80042b6 <sbrk_aligned+0x22>
 80042c4:	1a21      	subs	r1, r4, r0
 80042c6:	4628      	mov	r0, r5
 80042c8:	f000 fa76 	bl	80047b8 <_sbrk_r>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d1f2      	bne.n	80042b6 <sbrk_aligned+0x22>
 80042d0:	e7ef      	b.n	80042b2 <sbrk_aligned+0x1e>
 80042d2:	bf00      	nop
 80042d4:	200002ac 	.word	0x200002ac

080042d8 <_malloc_r>:
 80042d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042dc:	1ccd      	adds	r5, r1, #3
 80042de:	f025 0503 	bic.w	r5, r5, #3
 80042e2:	3508      	adds	r5, #8
 80042e4:	2d0c      	cmp	r5, #12
 80042e6:	bf38      	it	cc
 80042e8:	250c      	movcc	r5, #12
 80042ea:	2d00      	cmp	r5, #0
 80042ec:	4606      	mov	r6, r0
 80042ee:	db01      	blt.n	80042f4 <_malloc_r+0x1c>
 80042f0:	42a9      	cmp	r1, r5
 80042f2:	d904      	bls.n	80042fe <_malloc_r+0x26>
 80042f4:	230c      	movs	r3, #12
 80042f6:	6033      	str	r3, [r6, #0]
 80042f8:	2000      	movs	r0, #0
 80042fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043d4 <_malloc_r+0xfc>
 8004302:	f000 f869 	bl	80043d8 <__malloc_lock>
 8004306:	f8d8 3000 	ldr.w	r3, [r8]
 800430a:	461c      	mov	r4, r3
 800430c:	bb44      	cbnz	r4, 8004360 <_malloc_r+0x88>
 800430e:	4629      	mov	r1, r5
 8004310:	4630      	mov	r0, r6
 8004312:	f7ff ffbf 	bl	8004294 <sbrk_aligned>
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	4604      	mov	r4, r0
 800431a:	d158      	bne.n	80043ce <_malloc_r+0xf6>
 800431c:	f8d8 4000 	ldr.w	r4, [r8]
 8004320:	4627      	mov	r7, r4
 8004322:	2f00      	cmp	r7, #0
 8004324:	d143      	bne.n	80043ae <_malloc_r+0xd6>
 8004326:	2c00      	cmp	r4, #0
 8004328:	d04b      	beq.n	80043c2 <_malloc_r+0xea>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	4639      	mov	r1, r7
 800432e:	4630      	mov	r0, r6
 8004330:	eb04 0903 	add.w	r9, r4, r3
 8004334:	f000 fa40 	bl	80047b8 <_sbrk_r>
 8004338:	4581      	cmp	r9, r0
 800433a:	d142      	bne.n	80043c2 <_malloc_r+0xea>
 800433c:	6821      	ldr	r1, [r4, #0]
 800433e:	1a6d      	subs	r5, r5, r1
 8004340:	4629      	mov	r1, r5
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff ffa6 	bl	8004294 <sbrk_aligned>
 8004348:	3001      	adds	r0, #1
 800434a:	d03a      	beq.n	80043c2 <_malloc_r+0xea>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	442b      	add	r3, r5
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	f8d8 3000 	ldr.w	r3, [r8]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	bb62      	cbnz	r2, 80043b4 <_malloc_r+0xdc>
 800435a:	f8c8 7000 	str.w	r7, [r8]
 800435e:	e00f      	b.n	8004380 <_malloc_r+0xa8>
 8004360:	6822      	ldr	r2, [r4, #0]
 8004362:	1b52      	subs	r2, r2, r5
 8004364:	d420      	bmi.n	80043a8 <_malloc_r+0xd0>
 8004366:	2a0b      	cmp	r2, #11
 8004368:	d917      	bls.n	800439a <_malloc_r+0xc2>
 800436a:	1961      	adds	r1, r4, r5
 800436c:	42a3      	cmp	r3, r4
 800436e:	6025      	str	r5, [r4, #0]
 8004370:	bf18      	it	ne
 8004372:	6059      	strne	r1, [r3, #4]
 8004374:	6863      	ldr	r3, [r4, #4]
 8004376:	bf08      	it	eq
 8004378:	f8c8 1000 	streq.w	r1, [r8]
 800437c:	5162      	str	r2, [r4, r5]
 800437e:	604b      	str	r3, [r1, #4]
 8004380:	4630      	mov	r0, r6
 8004382:	f000 f82f 	bl	80043e4 <__malloc_unlock>
 8004386:	f104 000b 	add.w	r0, r4, #11
 800438a:	1d23      	adds	r3, r4, #4
 800438c:	f020 0007 	bic.w	r0, r0, #7
 8004390:	1ac2      	subs	r2, r0, r3
 8004392:	bf1c      	itt	ne
 8004394:	1a1b      	subne	r3, r3, r0
 8004396:	50a3      	strne	r3, [r4, r2]
 8004398:	e7af      	b.n	80042fa <_malloc_r+0x22>
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	42a3      	cmp	r3, r4
 800439e:	bf0c      	ite	eq
 80043a0:	f8c8 2000 	streq.w	r2, [r8]
 80043a4:	605a      	strne	r2, [r3, #4]
 80043a6:	e7eb      	b.n	8004380 <_malloc_r+0xa8>
 80043a8:	4623      	mov	r3, r4
 80043aa:	6864      	ldr	r4, [r4, #4]
 80043ac:	e7ae      	b.n	800430c <_malloc_r+0x34>
 80043ae:	463c      	mov	r4, r7
 80043b0:	687f      	ldr	r7, [r7, #4]
 80043b2:	e7b6      	b.n	8004322 <_malloc_r+0x4a>
 80043b4:	461a      	mov	r2, r3
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d1fb      	bne.n	80043b4 <_malloc_r+0xdc>
 80043bc:	2300      	movs	r3, #0
 80043be:	6053      	str	r3, [r2, #4]
 80043c0:	e7de      	b.n	8004380 <_malloc_r+0xa8>
 80043c2:	230c      	movs	r3, #12
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	4630      	mov	r0, r6
 80043c8:	f000 f80c 	bl	80043e4 <__malloc_unlock>
 80043cc:	e794      	b.n	80042f8 <_malloc_r+0x20>
 80043ce:	6005      	str	r5, [r0, #0]
 80043d0:	e7d6      	b.n	8004380 <_malloc_r+0xa8>
 80043d2:	bf00      	nop
 80043d4:	200002b0 	.word	0x200002b0

080043d8 <__malloc_lock>:
 80043d8:	4801      	ldr	r0, [pc, #4]	@ (80043e0 <__malloc_lock+0x8>)
 80043da:	f7ff bf0e 	b.w	80041fa <__retarget_lock_acquire_recursive>
 80043de:	bf00      	nop
 80043e0:	200002a8 	.word	0x200002a8

080043e4 <__malloc_unlock>:
 80043e4:	4801      	ldr	r0, [pc, #4]	@ (80043ec <__malloc_unlock+0x8>)
 80043e6:	f7ff bf09 	b.w	80041fc <__retarget_lock_release_recursive>
 80043ea:	bf00      	nop
 80043ec:	200002a8 	.word	0x200002a8

080043f0 <print_e>:
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b087      	sub	sp, #28
 80043f4:	461e      	mov	r6, r3
 80043f6:	ab04      	add	r3, sp, #16
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	ab03      	add	r3, sp, #12
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	460c      	mov	r4, r1
 8004400:	ab05      	add	r3, sp, #20
 8004402:	2102      	movs	r1, #2
 8004404:	4615      	mov	r5, r2
 8004406:	3201      	adds	r2, #1
 8004408:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800440a:	f000 fa75 	bl	80048f8 <_dtoa_r>
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004414:	4293      	cmp	r3, r2
 8004416:	4601      	mov	r1, r0
 8004418:	d104      	bne.n	8004424 <print_e+0x34>
 800441a:	4620      	mov	r0, r4
 800441c:	f000 f9dc 	bl	80047d8 <strcpy>
 8004420:	b007      	add	sp, #28
 8004422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004424:	7802      	ldrb	r2, [r0, #0]
 8004426:	f804 2b01 	strb.w	r2, [r4], #1
 800442a:	2d00      	cmp	r5, #0
 800442c:	bfc8      	it	gt
 800442e:	2701      	movgt	r7, #1
 8004430:	222e      	movs	r2, #46	@ 0x2e
 8004432:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004436:	b108      	cbz	r0, 800443c <print_e+0x4c>
 8004438:	2d00      	cmp	r5, #0
 800443a:	dc29      	bgt.n	8004490 <print_e+0xa0>
 800443c:	2e67      	cmp	r6, #103	@ 0x67
 800443e:	d038      	beq.n	80044b2 <print_e+0xc2>
 8004440:	2e47      	cmp	r6, #71	@ 0x47
 8004442:	d038      	beq.n	80044b6 <print_e+0xc6>
 8004444:	222e      	movs	r2, #46	@ 0x2e
 8004446:	2130      	movs	r1, #48	@ 0x30
 8004448:	2d00      	cmp	r5, #0
 800444a:	dc2a      	bgt.n	80044a2 <print_e+0xb2>
 800444c:	1e5a      	subs	r2, r3, #1
 800444e:	2a00      	cmp	r2, #0
 8004450:	bfb8      	it	lt
 8004452:	f1c3 0301 	rsblt	r3, r3, #1
 8004456:	9205      	str	r2, [sp, #20]
 8004458:	bfaa      	itet	ge
 800445a:	232b      	movge	r3, #43	@ 0x2b
 800445c:	9305      	strlt	r3, [sp, #20]
 800445e:	7063      	strbge	r3, [r4, #1]
 8004460:	9b05      	ldr	r3, [sp, #20]
 8004462:	7026      	strb	r6, [r4, #0]
 8004464:	bfbc      	itt	lt
 8004466:	222d      	movlt	r2, #45	@ 0x2d
 8004468:	7062      	strblt	r2, [r4, #1]
 800446a:	2b63      	cmp	r3, #99	@ 0x63
 800446c:	dc25      	bgt.n	80044ba <print_e+0xca>
 800446e:	1ca1      	adds	r1, r4, #2
 8004470:	9b05      	ldr	r3, [sp, #20]
 8004472:	220a      	movs	r2, #10
 8004474:	fb93 f2f2 	sdiv	r2, r3, r2
 8004478:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 800447c:	7008      	strb	r0, [r1, #0]
 800447e:	f06f 0009 	mvn.w	r0, #9
 8004482:	fb00 3302 	mla	r3, r0, r2, r3
 8004486:	3330      	adds	r3, #48	@ 0x30
 8004488:	704b      	strb	r3, [r1, #1]
 800448a:	2300      	movs	r3, #0
 800448c:	708b      	strb	r3, [r1, #2]
 800448e:	e7c7      	b.n	8004420 <print_e+0x30>
 8004490:	b10f      	cbz	r7, 8004496 <print_e+0xa6>
 8004492:	f804 2b01 	strb.w	r2, [r4], #1
 8004496:	7808      	ldrb	r0, [r1, #0]
 8004498:	f804 0b01 	strb.w	r0, [r4], #1
 800449c:	3d01      	subs	r5, #1
 800449e:	2700      	movs	r7, #0
 80044a0:	e7c7      	b.n	8004432 <print_e+0x42>
 80044a2:	b10f      	cbz	r7, 80044a8 <print_e+0xb8>
 80044a4:	f804 2b01 	strb.w	r2, [r4], #1
 80044a8:	f804 1b01 	strb.w	r1, [r4], #1
 80044ac:	3d01      	subs	r5, #1
 80044ae:	2700      	movs	r7, #0
 80044b0:	e7ca      	b.n	8004448 <print_e+0x58>
 80044b2:	2665      	movs	r6, #101	@ 0x65
 80044b4:	e7ca      	b.n	800444c <print_e+0x5c>
 80044b6:	2645      	movs	r6, #69	@ 0x45
 80044b8:	e7c8      	b.n	800444c <print_e+0x5c>
 80044ba:	2264      	movs	r2, #100	@ 0x64
 80044bc:	fb93 f2f2 	sdiv	r2, r3, r2
 80044c0:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 80044c4:	70a0      	strb	r0, [r4, #2]
 80044c6:	f06f 0063 	mvn.w	r0, #99	@ 0x63
 80044ca:	fb00 3302 	mla	r3, r0, r2, r3
 80044ce:	1ce1      	adds	r1, r4, #3
 80044d0:	9305      	str	r3, [sp, #20]
 80044d2:	e7cd      	b.n	8004470 <print_e+0x80>
 80044d4:	0000      	movs	r0, r0
	...

080044d8 <_gcvt>:
 80044d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	ec59 8b10 	vmov	r8, r9, d0
 80044e0:	b086      	sub	sp, #24
 80044e2:	4605      	mov	r5, r0
 80044e4:	460c      	mov	r4, r1
 80044e6:	4616      	mov	r6, r2
 80044e8:	469a      	mov	sl, r3
 80044ea:	2200      	movs	r2, #0
 80044ec:	2300      	movs	r3, #0
 80044ee:	4640      	mov	r0, r8
 80044f0:	4649      	mov	r1, r9
 80044f2:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80044f4:	f7fc faf2 	bl	8000adc <__aeabi_dcmplt>
 80044f8:	b110      	cbz	r0, 8004500 <_gcvt+0x28>
 80044fa:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80044fe:	4699      	mov	r9, r3
 8004500:	2200      	movs	r2, #0
 8004502:	2300      	movs	r3, #0
 8004504:	4640      	mov	r0, r8
 8004506:	4649      	mov	r1, r9
 8004508:	f7fc fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800450c:	b138      	cbz	r0, 800451e <_gcvt+0x46>
 800450e:	2330      	movs	r3, #48	@ 0x30
 8004510:	7033      	strb	r3, [r6, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	7073      	strb	r3, [r6, #1]
 8004516:	4630      	mov	r0, r6
 8004518:	b006      	add	sp, #24
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	a34e      	add	r3, pc, #312	@ (adr r3, 8004658 <_gcvt+0x180>)
 8004520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004524:	4640      	mov	r0, r8
 8004526:	4649      	mov	r1, r9
 8004528:	f7fc fae2 	bl	8000af0 <__aeabi_dcmple>
 800452c:	b148      	cbz	r0, 8004542 <_gcvt+0x6a>
 800452e:	ec49 8b10 	vmov	d0, r8, r9
 8004532:	9700      	str	r7, [sp, #0]
 8004534:	4653      	mov	r3, sl
 8004536:	1e62      	subs	r2, r4, #1
 8004538:	4631      	mov	r1, r6
 800453a:	4628      	mov	r0, r5
 800453c:	f7ff ff58 	bl	80043f0 <print_e>
 8004540:	e7e9      	b.n	8004516 <_gcvt+0x3e>
 8004542:	4620      	mov	r0, r4
 8004544:	f001 fb26 	bl	8005b94 <_mprec_log10>
 8004548:	4642      	mov	r2, r8
 800454a:	ec51 0b10 	vmov	r0, r1, d0
 800454e:	464b      	mov	r3, r9
 8004550:	f7fc face 	bl	8000af0 <__aeabi_dcmple>
 8004554:	2800      	cmp	r0, #0
 8004556:	d1ea      	bne.n	800452e <_gcvt+0x56>
 8004558:	ab05      	add	r3, sp, #20
 800455a:	9301      	str	r3, [sp, #4]
 800455c:	ab04      	add	r3, sp, #16
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	4622      	mov	r2, r4
 8004562:	ab03      	add	r3, sp, #12
 8004564:	2102      	movs	r1, #2
 8004566:	ec49 8b10 	vmov	d0, r8, r9
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f9c4 	bl	80048f8 <_dtoa_r>
 8004570:	9a03      	ldr	r2, [sp, #12]
 8004572:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004576:	429a      	cmp	r2, r3
 8004578:	4601      	mov	r1, r0
 800457a:	d00e      	beq.n	800459a <_gcvt+0xc2>
 800457c:	4633      	mov	r3, r6
 800457e:	4608      	mov	r0, r1
 8004580:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004584:	9d03      	ldr	r5, [sp, #12]
 8004586:	b10a      	cbz	r2, 800458c <_gcvt+0xb4>
 8004588:	2d00      	cmp	r5, #0
 800458a:	dc0a      	bgt.n	80045a2 <_gcvt+0xca>
 800458c:	1931      	adds	r1, r6, r4
 800458e:	1ac9      	subs	r1, r1, r3
 8004590:	462c      	mov	r4, r5
 8004592:	2200      	movs	r2, #0
 8004594:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8004598:	e00c      	b.n	80045b4 <_gcvt+0xdc>
 800459a:	4630      	mov	r0, r6
 800459c:	f000 f91c 	bl	80047d8 <strcpy>
 80045a0:	e7b9      	b.n	8004516 <_gcvt+0x3e>
 80045a2:	3d01      	subs	r5, #1
 80045a4:	f803 2b01 	strb.w	r2, [r3], #1
 80045a8:	9503      	str	r5, [sp, #12]
 80045aa:	e7e8      	b.n	800457e <_gcvt+0xa6>
 80045ac:	f803 cb01 	strb.w	ip, [r3], #1
 80045b0:	3901      	subs	r1, #1
 80045b2:	2201      	movs	r2, #1
 80045b4:	2c00      	cmp	r4, #0
 80045b6:	4625      	mov	r5, r4
 80045b8:	dc2e      	bgt.n	8004618 <_gcvt+0x140>
 80045ba:	b102      	cbz	r2, 80045be <_gcvt+0xe6>
 80045bc:	9403      	str	r4, [sp, #12]
 80045be:	b90f      	cbnz	r7, 80045c4 <_gcvt+0xec>
 80045c0:	7802      	ldrb	r2, [r0, #0]
 80045c2:	b332      	cbz	r2, 8004612 <_gcvt+0x13a>
 80045c4:	42b3      	cmp	r3, r6
 80045c6:	bf04      	itt	eq
 80045c8:	2230      	moveq	r2, #48	@ 0x30
 80045ca:	f803 2b01 	strbeq.w	r2, [r3], #1
 80045ce:	222e      	movs	r2, #46	@ 0x2e
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	9a03      	ldr	r2, [sp, #12]
 80045d4:	461c      	mov	r4, r3
 80045d6:	f04f 0c00 	mov.w	ip, #0
 80045da:	1ad5      	subs	r5, r2, r3
 80045dc:	f04f 0e30 	mov.w	lr, #48	@ 0x30
 80045e0:	42e5      	cmn	r5, r4
 80045e2:	d421      	bmi.n	8004628 <_gcvt+0x150>
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	f1c2 0400 	rsb	r4, r2, #0
 80045ea:	bfd4      	ite	le
 80045ec:	4625      	movle	r5, r4
 80045ee:	2500      	movgt	r5, #0
 80045f0:	3501      	adds	r5, #1
 80045f2:	442b      	add	r3, r5
 80045f4:	f1bc 0f00 	cmp.w	ip, #0
 80045f8:	d004      	beq.n	8004604 <_gcvt+0x12c>
 80045fa:	2a00      	cmp	r2, #0
 80045fc:	bfc8      	it	gt
 80045fe:	2400      	movgt	r4, #0
 8004600:	4422      	add	r2, r4
 8004602:	9203      	str	r2, [sp, #12]
 8004604:	1e42      	subs	r2, r0, #1
 8004606:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800460a:	b108      	cbz	r0, 8004610 <_gcvt+0x138>
 800460c:	2900      	cmp	r1, #0
 800460e:	dc10      	bgt.n	8004632 <_gcvt+0x15a>
 8004610:	b9e7      	cbnz	r7, 800464c <_gcvt+0x174>
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	e77e      	b.n	8004516 <_gcvt+0x3e>
 8004618:	2900      	cmp	r1, #0
 800461a:	f104 34ff 	add.w	r4, r4, #4294967295
 800461e:	dcc5      	bgt.n	80045ac <_gcvt+0xd4>
 8004620:	2a00      	cmp	r2, #0
 8004622:	d0cc      	beq.n	80045be <_gcvt+0xe6>
 8004624:	9503      	str	r5, [sp, #12]
 8004626:	e7ca      	b.n	80045be <_gcvt+0xe6>
 8004628:	f804 ef01 	strb.w	lr, [r4, #1]!
 800462c:	f04f 0c01 	mov.w	ip, #1
 8004630:	e7d6      	b.n	80045e0 <_gcvt+0x108>
 8004632:	f803 0b01 	strb.w	r0, [r3], #1
 8004636:	3901      	subs	r1, #1
 8004638:	e7e5      	b.n	8004606 <_gcvt+0x12e>
 800463a:	f802 5b01 	strb.w	r5, [r2], #1
 800463e:	1aa0      	subs	r0, r4, r2
 8004640:	2800      	cmp	r0, #0
 8004642:	dcfa      	bgt.n	800463a <_gcvt+0x162>
 8004644:	2900      	cmp	r1, #0
 8004646:	bfa8      	it	ge
 8004648:	185b      	addge	r3, r3, r1
 800464a:	e7e2      	b.n	8004612 <_gcvt+0x13a>
 800464c:	461a      	mov	r2, r3
 800464e:	185c      	adds	r4, r3, r1
 8004650:	2530      	movs	r5, #48	@ 0x30
 8004652:	e7f4      	b.n	800463e <_gcvt+0x166>
 8004654:	f3af 8000 	nop.w
 8004658:	eb1c432d 	.word	0xeb1c432d
 800465c:	3f1a36e2 	.word	0x3f1a36e2

08004660 <__sflush_r>:
 8004660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004668:	0716      	lsls	r6, r2, #28
 800466a:	4605      	mov	r5, r0
 800466c:	460c      	mov	r4, r1
 800466e:	d454      	bmi.n	800471a <__sflush_r+0xba>
 8004670:	684b      	ldr	r3, [r1, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	dc02      	bgt.n	800467c <__sflush_r+0x1c>
 8004676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	dd48      	ble.n	800470e <__sflush_r+0xae>
 800467c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800467e:	2e00      	cmp	r6, #0
 8004680:	d045      	beq.n	800470e <__sflush_r+0xae>
 8004682:	2300      	movs	r3, #0
 8004684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004688:	682f      	ldr	r7, [r5, #0]
 800468a:	6a21      	ldr	r1, [r4, #32]
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	d030      	beq.n	80046f2 <__sflush_r+0x92>
 8004690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	0759      	lsls	r1, r3, #29
 8004696:	d505      	bpl.n	80046a4 <__sflush_r+0x44>
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	1ad2      	subs	r2, r2, r3
 800469c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800469e:	b10b      	cbz	r3, 80046a4 <__sflush_r+0x44>
 80046a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046a2:	1ad2      	subs	r2, r2, r3
 80046a4:	2300      	movs	r3, #0
 80046a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046a8:	6a21      	ldr	r1, [r4, #32]
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b0      	blx	r6
 80046ae:	1c43      	adds	r3, r0, #1
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	d106      	bne.n	80046c2 <__sflush_r+0x62>
 80046b4:	6829      	ldr	r1, [r5, #0]
 80046b6:	291d      	cmp	r1, #29
 80046b8:	d82b      	bhi.n	8004712 <__sflush_r+0xb2>
 80046ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <__sflush_r+0x104>)
 80046bc:	410a      	asrs	r2, r1
 80046be:	07d6      	lsls	r6, r2, #31
 80046c0:	d427      	bmi.n	8004712 <__sflush_r+0xb2>
 80046c2:	2200      	movs	r2, #0
 80046c4:	6062      	str	r2, [r4, #4]
 80046c6:	04d9      	lsls	r1, r3, #19
 80046c8:	6922      	ldr	r2, [r4, #16]
 80046ca:	6022      	str	r2, [r4, #0]
 80046cc:	d504      	bpl.n	80046d8 <__sflush_r+0x78>
 80046ce:	1c42      	adds	r2, r0, #1
 80046d0:	d101      	bne.n	80046d6 <__sflush_r+0x76>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	b903      	cbnz	r3, 80046d8 <__sflush_r+0x78>
 80046d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80046d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80046da:	602f      	str	r7, [r5, #0]
 80046dc:	b1b9      	cbz	r1, 800470e <__sflush_r+0xae>
 80046de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80046e2:	4299      	cmp	r1, r3
 80046e4:	d002      	beq.n	80046ec <__sflush_r+0x8c>
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7ff fd8a 	bl	8004200 <_free_r>
 80046ec:	2300      	movs	r3, #0
 80046ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80046f0:	e00d      	b.n	800470e <__sflush_r+0xae>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4628      	mov	r0, r5
 80046f6:	47b0      	blx	r6
 80046f8:	4602      	mov	r2, r0
 80046fa:	1c50      	adds	r0, r2, #1
 80046fc:	d1c9      	bne.n	8004692 <__sflush_r+0x32>
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0c6      	beq.n	8004692 <__sflush_r+0x32>
 8004704:	2b1d      	cmp	r3, #29
 8004706:	d001      	beq.n	800470c <__sflush_r+0xac>
 8004708:	2b16      	cmp	r3, #22
 800470a:	d11e      	bne.n	800474a <__sflush_r+0xea>
 800470c:	602f      	str	r7, [r5, #0]
 800470e:	2000      	movs	r0, #0
 8004710:	e022      	b.n	8004758 <__sflush_r+0xf8>
 8004712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004716:	b21b      	sxth	r3, r3
 8004718:	e01b      	b.n	8004752 <__sflush_r+0xf2>
 800471a:	690f      	ldr	r7, [r1, #16]
 800471c:	2f00      	cmp	r7, #0
 800471e:	d0f6      	beq.n	800470e <__sflush_r+0xae>
 8004720:	0793      	lsls	r3, r2, #30
 8004722:	680e      	ldr	r6, [r1, #0]
 8004724:	bf08      	it	eq
 8004726:	694b      	ldreq	r3, [r1, #20]
 8004728:	600f      	str	r7, [r1, #0]
 800472a:	bf18      	it	ne
 800472c:	2300      	movne	r3, #0
 800472e:	eba6 0807 	sub.w	r8, r6, r7
 8004732:	608b      	str	r3, [r1, #8]
 8004734:	f1b8 0f00 	cmp.w	r8, #0
 8004738:	dde9      	ble.n	800470e <__sflush_r+0xae>
 800473a:	6a21      	ldr	r1, [r4, #32]
 800473c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800473e:	4643      	mov	r3, r8
 8004740:	463a      	mov	r2, r7
 8004742:	4628      	mov	r0, r5
 8004744:	47b0      	blx	r6
 8004746:	2800      	cmp	r0, #0
 8004748:	dc08      	bgt.n	800475c <__sflush_r+0xfc>
 800474a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800475c:	4407      	add	r7, r0
 800475e:	eba8 0800 	sub.w	r8, r8, r0
 8004762:	e7e7      	b.n	8004734 <__sflush_r+0xd4>
 8004764:	dfbffffe 	.word	0xdfbffffe

08004768 <_fflush_r>:
 8004768:	b538      	push	{r3, r4, r5, lr}
 800476a:	690b      	ldr	r3, [r1, #16]
 800476c:	4605      	mov	r5, r0
 800476e:	460c      	mov	r4, r1
 8004770:	b913      	cbnz	r3, 8004778 <_fflush_r+0x10>
 8004772:	2500      	movs	r5, #0
 8004774:	4628      	mov	r0, r5
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	b118      	cbz	r0, 8004782 <_fflush_r+0x1a>
 800477a:	6a03      	ldr	r3, [r0, #32]
 800477c:	b90b      	cbnz	r3, 8004782 <_fflush_r+0x1a>
 800477e:	f7ff fc49 	bl	8004014 <__sinit>
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f3      	beq.n	8004772 <_fflush_r+0xa>
 800478a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800478c:	07d0      	lsls	r0, r2, #31
 800478e:	d404      	bmi.n	800479a <_fflush_r+0x32>
 8004790:	0599      	lsls	r1, r3, #22
 8004792:	d402      	bmi.n	800479a <_fflush_r+0x32>
 8004794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004796:	f7ff fd30 	bl	80041fa <__retarget_lock_acquire_recursive>
 800479a:	4628      	mov	r0, r5
 800479c:	4621      	mov	r1, r4
 800479e:	f7ff ff5f 	bl	8004660 <__sflush_r>
 80047a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80047a4:	07da      	lsls	r2, r3, #31
 80047a6:	4605      	mov	r5, r0
 80047a8:	d4e4      	bmi.n	8004774 <_fflush_r+0xc>
 80047aa:	89a3      	ldrh	r3, [r4, #12]
 80047ac:	059b      	lsls	r3, r3, #22
 80047ae:	d4e1      	bmi.n	8004774 <_fflush_r+0xc>
 80047b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047b2:	f7ff fd23 	bl	80041fc <__retarget_lock_release_recursive>
 80047b6:	e7dd      	b.n	8004774 <_fflush_r+0xc>

080047b8 <_sbrk_r>:
 80047b8:	b538      	push	{r3, r4, r5, lr}
 80047ba:	4d06      	ldr	r5, [pc, #24]	@ (80047d4 <_sbrk_r+0x1c>)
 80047bc:	2300      	movs	r3, #0
 80047be:	4604      	mov	r4, r0
 80047c0:	4608      	mov	r0, r1
 80047c2:	602b      	str	r3, [r5, #0]
 80047c4:	f7fd fb72 	bl	8001eac <_sbrk>
 80047c8:	1c43      	adds	r3, r0, #1
 80047ca:	d102      	bne.n	80047d2 <_sbrk_r+0x1a>
 80047cc:	682b      	ldr	r3, [r5, #0]
 80047ce:	b103      	cbz	r3, 80047d2 <_sbrk_r+0x1a>
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	bd38      	pop	{r3, r4, r5, pc}
 80047d4:	200002a4 	.word	0x200002a4

080047d8 <strcpy>:
 80047d8:	4603      	mov	r3, r0
 80047da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047de:	f803 2b01 	strb.w	r2, [r3], #1
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d1f9      	bne.n	80047da <strcpy+0x2>
 80047e6:	4770      	bx	lr

080047e8 <quorem>:
 80047e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	6903      	ldr	r3, [r0, #16]
 80047ee:	690c      	ldr	r4, [r1, #16]
 80047f0:	42a3      	cmp	r3, r4
 80047f2:	4607      	mov	r7, r0
 80047f4:	db7e      	blt.n	80048f4 <quorem+0x10c>
 80047f6:	3c01      	subs	r4, #1
 80047f8:	f101 0814 	add.w	r8, r1, #20
 80047fc:	00a3      	lsls	r3, r4, #2
 80047fe:	f100 0514 	add.w	r5, r0, #20
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800480e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004812:	3301      	adds	r3, #1
 8004814:	429a      	cmp	r2, r3
 8004816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800481a:	fbb2 f6f3 	udiv	r6, r2, r3
 800481e:	d32e      	bcc.n	800487e <quorem+0x96>
 8004820:	f04f 0a00 	mov.w	sl, #0
 8004824:	46c4      	mov	ip, r8
 8004826:	46ae      	mov	lr, r5
 8004828:	46d3      	mov	fp, sl
 800482a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800482e:	b298      	uxth	r0, r3
 8004830:	fb06 a000 	mla	r0, r6, r0, sl
 8004834:	0c02      	lsrs	r2, r0, #16
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	fb06 2303 	mla	r3, r6, r3, r2
 800483c:	f8de 2000 	ldr.w	r2, [lr]
 8004840:	b280      	uxth	r0, r0
 8004842:	b292      	uxth	r2, r2
 8004844:	1a12      	subs	r2, r2, r0
 8004846:	445a      	add	r2, fp
 8004848:	f8de 0000 	ldr.w	r0, [lr]
 800484c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004850:	b29b      	uxth	r3, r3
 8004852:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004856:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800485a:	b292      	uxth	r2, r2
 800485c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004860:	45e1      	cmp	r9, ip
 8004862:	f84e 2b04 	str.w	r2, [lr], #4
 8004866:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800486a:	d2de      	bcs.n	800482a <quorem+0x42>
 800486c:	9b00      	ldr	r3, [sp, #0]
 800486e:	58eb      	ldr	r3, [r5, r3]
 8004870:	b92b      	cbnz	r3, 800487e <quorem+0x96>
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	3b04      	subs	r3, #4
 8004876:	429d      	cmp	r5, r3
 8004878:	461a      	mov	r2, r3
 800487a:	d32f      	bcc.n	80048dc <quorem+0xf4>
 800487c:	613c      	str	r4, [r7, #16]
 800487e:	4638      	mov	r0, r7
 8004880:	f001 f880 	bl	8005984 <__mcmp>
 8004884:	2800      	cmp	r0, #0
 8004886:	db25      	blt.n	80048d4 <quorem+0xec>
 8004888:	4629      	mov	r1, r5
 800488a:	2000      	movs	r0, #0
 800488c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004890:	f8d1 c000 	ldr.w	ip, [r1]
 8004894:	fa1f fe82 	uxth.w	lr, r2
 8004898:	fa1f f38c 	uxth.w	r3, ip
 800489c:	eba3 030e 	sub.w	r3, r3, lr
 80048a0:	4403      	add	r3, r0
 80048a2:	0c12      	lsrs	r2, r2, #16
 80048a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048b2:	45c1      	cmp	r9, r8
 80048b4:	f841 3b04 	str.w	r3, [r1], #4
 80048b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048bc:	d2e6      	bcs.n	800488c <quorem+0xa4>
 80048be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048c6:	b922      	cbnz	r2, 80048d2 <quorem+0xea>
 80048c8:	3b04      	subs	r3, #4
 80048ca:	429d      	cmp	r5, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	d30b      	bcc.n	80048e8 <quorem+0x100>
 80048d0:	613c      	str	r4, [r7, #16]
 80048d2:	3601      	adds	r6, #1
 80048d4:	4630      	mov	r0, r6
 80048d6:	b003      	add	sp, #12
 80048d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	3b04      	subs	r3, #4
 80048e0:	2a00      	cmp	r2, #0
 80048e2:	d1cb      	bne.n	800487c <quorem+0x94>
 80048e4:	3c01      	subs	r4, #1
 80048e6:	e7c6      	b.n	8004876 <quorem+0x8e>
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	3b04      	subs	r3, #4
 80048ec:	2a00      	cmp	r2, #0
 80048ee:	d1ef      	bne.n	80048d0 <quorem+0xe8>
 80048f0:	3c01      	subs	r4, #1
 80048f2:	e7ea      	b.n	80048ca <quorem+0xe2>
 80048f4:	2000      	movs	r0, #0
 80048f6:	e7ee      	b.n	80048d6 <quorem+0xee>

080048f8 <_dtoa_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	69c7      	ldr	r7, [r0, #28]
 80048fe:	b099      	sub	sp, #100	@ 0x64
 8004900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004904:	ec55 4b10 	vmov	r4, r5, d0
 8004908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800490a:	9109      	str	r1, [sp, #36]	@ 0x24
 800490c:	4683      	mov	fp, r0
 800490e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004912:	b97f      	cbnz	r7, 8004934 <_dtoa_r+0x3c>
 8004914:	2010      	movs	r0, #16
 8004916:	f000 fdb3 	bl	8005480 <malloc>
 800491a:	4602      	mov	r2, r0
 800491c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004920:	b920      	cbnz	r0, 800492c <_dtoa_r+0x34>
 8004922:	4ba7      	ldr	r3, [pc, #668]	@ (8004bc0 <_dtoa_r+0x2c8>)
 8004924:	21ef      	movs	r1, #239	@ 0xef
 8004926:	48a7      	ldr	r0, [pc, #668]	@ (8004bc4 <_dtoa_r+0x2cc>)
 8004928:	f001 f960 	bl	8005bec <__assert_func>
 800492c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004930:	6007      	str	r7, [r0, #0]
 8004932:	60c7      	str	r7, [r0, #12]
 8004934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	b159      	cbz	r1, 8004954 <_dtoa_r+0x5c>
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	604a      	str	r2, [r1, #4]
 8004940:	2301      	movs	r3, #1
 8004942:	4093      	lsls	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
 8004946:	4658      	mov	r0, fp
 8004948:	f000 fde2 	bl	8005510 <_Bfree>
 800494c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	1e2b      	subs	r3, r5, #0
 8004956:	bfb9      	ittee	lt
 8004958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800495c:	9303      	strlt	r3, [sp, #12]
 800495e:	2300      	movge	r3, #0
 8004960:	6033      	strge	r3, [r6, #0]
 8004962:	9f03      	ldr	r7, [sp, #12]
 8004964:	4b98      	ldr	r3, [pc, #608]	@ (8004bc8 <_dtoa_r+0x2d0>)
 8004966:	bfbc      	itt	lt
 8004968:	2201      	movlt	r2, #1
 800496a:	6032      	strlt	r2, [r6, #0]
 800496c:	43bb      	bics	r3, r7
 800496e:	d112      	bne.n	8004996 <_dtoa_r+0x9e>
 8004970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800497c:	4323      	orrs	r3, r4
 800497e:	f000 854d 	beq.w	800541c <_dtoa_r+0xb24>
 8004982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004bdc <_dtoa_r+0x2e4>
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 854f 	beq.w	800542c <_dtoa_r+0xb34>
 800498e:	f10a 0303 	add.w	r3, sl, #3
 8004992:	f000 bd49 	b.w	8005428 <_dtoa_r+0xb30>
 8004996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800499a:	2200      	movs	r2, #0
 800499c:	ec51 0b17 	vmov	r0, r1, d7
 80049a0:	2300      	movs	r3, #0
 80049a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80049a6:	f7fc f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80049aa:	4680      	mov	r8, r0
 80049ac:	b158      	cbz	r0, 80049c6 <_dtoa_r+0xce>
 80049ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80049b0:	2301      	movs	r3, #1
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80049b6:	b113      	cbz	r3, 80049be <_dtoa_r+0xc6>
 80049b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80049ba:	4b84      	ldr	r3, [pc, #528]	@ (8004bcc <_dtoa_r+0x2d4>)
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004be0 <_dtoa_r+0x2e8>
 80049c2:	f000 bd33 	b.w	800542c <_dtoa_r+0xb34>
 80049c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80049ca:	aa16      	add	r2, sp, #88	@ 0x58
 80049cc:	a917      	add	r1, sp, #92	@ 0x5c
 80049ce:	4658      	mov	r0, fp
 80049d0:	f001 f888 	bl	8005ae4 <__d2b>
 80049d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80049d8:	4681      	mov	r9, r0
 80049da:	2e00      	cmp	r6, #0
 80049dc:	d077      	beq.n	8004ace <_dtoa_r+0x1d6>
 80049de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80049e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80049f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80049f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80049f8:	4619      	mov	r1, r3
 80049fa:	2200      	movs	r2, #0
 80049fc:	4b74      	ldr	r3, [pc, #464]	@ (8004bd0 <_dtoa_r+0x2d8>)
 80049fe:	f7fb fc43 	bl	8000288 <__aeabi_dsub>
 8004a02:	a369      	add	r3, pc, #420	@ (adr r3, 8004ba8 <_dtoa_r+0x2b0>)
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f7fb fdf6 	bl	80005f8 <__aeabi_dmul>
 8004a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8004bb0 <_dtoa_r+0x2b8>)
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	f7fb fc3b 	bl	800028c <__adddf3>
 8004a16:	4604      	mov	r4, r0
 8004a18:	4630      	mov	r0, r6
 8004a1a:	460d      	mov	r5, r1
 8004a1c:	f7fb fd82 	bl	8000524 <__aeabi_i2d>
 8004a20:	a365      	add	r3, pc, #404	@ (adr r3, 8004bb8 <_dtoa_r+0x2c0>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fde7 	bl	80005f8 <__aeabi_dmul>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4620      	mov	r0, r4
 8004a30:	4629      	mov	r1, r5
 8004a32:	f7fb fc2b 	bl	800028c <__adddf3>
 8004a36:	4604      	mov	r4, r0
 8004a38:	460d      	mov	r5, r1
 8004a3a:	f7fc f877 	bl	8000b2c <__aeabi_d2iz>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4607      	mov	r7, r0
 8004a42:	2300      	movs	r3, #0
 8004a44:	4620      	mov	r0, r4
 8004a46:	4629      	mov	r1, r5
 8004a48:	f7fc f848 	bl	8000adc <__aeabi_dcmplt>
 8004a4c:	b140      	cbz	r0, 8004a60 <_dtoa_r+0x168>
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f7fb fd68 	bl	8000524 <__aeabi_i2d>
 8004a54:	4622      	mov	r2, r4
 8004a56:	462b      	mov	r3, r5
 8004a58:	f7fc f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a5c:	b900      	cbnz	r0, 8004a60 <_dtoa_r+0x168>
 8004a5e:	3f01      	subs	r7, #1
 8004a60:	2f16      	cmp	r7, #22
 8004a62:	d851      	bhi.n	8004b08 <_dtoa_r+0x210>
 8004a64:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd4 <_dtoa_r+0x2dc>)
 8004a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004a72:	f7fc f833 	bl	8000adc <__aeabi_dcmplt>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d048      	beq.n	8004b0c <_dtoa_r+0x214>
 8004a7a:	3f01      	subs	r7, #1
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004a82:	1b9b      	subs	r3, r3, r6
 8004a84:	1e5a      	subs	r2, r3, #1
 8004a86:	bf44      	itt	mi
 8004a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8004a8c:	2300      	movmi	r3, #0
 8004a8e:	9208      	str	r2, [sp, #32]
 8004a90:	bf54      	ite	pl
 8004a92:	f04f 0800 	movpl.w	r8, #0
 8004a96:	9308      	strmi	r3, [sp, #32]
 8004a98:	2f00      	cmp	r7, #0
 8004a9a:	db39      	blt.n	8004b10 <_dtoa_r+0x218>
 8004a9c:	9b08      	ldr	r3, [sp, #32]
 8004a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004aa0:	443b      	add	r3, r7
 8004aa2:	9308      	str	r3, [sp, #32]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8004aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d864      	bhi.n	8004b78 <_dtoa_r+0x280>
 8004aae:	2b05      	cmp	r3, #5
 8004ab0:	bfc4      	itt	gt
 8004ab2:	3b04      	subgt	r3, #4
 8004ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8004abc:	bfcc      	ite	gt
 8004abe:	2400      	movgt	r4, #0
 8004ac0:	2401      	movle	r4, #1
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d863      	bhi.n	8004b8e <_dtoa_r+0x296>
 8004ac6:	e8df f003 	tbb	[pc, r3]
 8004aca:	372a      	.short	0x372a
 8004acc:	5535      	.short	0x5535
 8004ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004ad2:	441e      	add	r6, r3
 8004ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ad8:	2b20      	cmp	r3, #32
 8004ada:	bfc1      	itttt	gt
 8004adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ae0:	409f      	lslgt	r7, r3
 8004ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004aea:	bfd6      	itet	le
 8004aec:	f1c3 0320 	rsble	r3, r3, #32
 8004af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8004af4:	fa04 f003 	lslle.w	r0, r4, r3
 8004af8:	f7fb fd04 	bl	8000504 <__aeabi_ui2d>
 8004afc:	2201      	movs	r2, #1
 8004afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b02:	3e01      	subs	r6, #1
 8004b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8004b06:	e777      	b.n	80049f8 <_dtoa_r+0x100>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e7b8      	b.n	8004a7e <_dtoa_r+0x186>
 8004b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004b0e:	e7b7      	b.n	8004a80 <_dtoa_r+0x188>
 8004b10:	427b      	negs	r3, r7
 8004b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b14:	2300      	movs	r3, #0
 8004b16:	eba8 0807 	sub.w	r8, r8, r7
 8004b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004b1c:	e7c4      	b.n	8004aa8 <_dtoa_r+0x1b0>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	dc35      	bgt.n	8004b94 <_dtoa_r+0x29c>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	9307      	str	r3, [sp, #28]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8004b32:	e00b      	b.n	8004b4c <_dtoa_r+0x254>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e7f3      	b.n	8004b20 <_dtoa_r+0x228>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b3e:	18fb      	adds	r3, r7, r3
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	3301      	adds	r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	9307      	str	r3, [sp, #28]
 8004b48:	bfb8      	it	lt
 8004b4a:	2301      	movlt	r3, #1
 8004b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004b50:	2100      	movs	r1, #0
 8004b52:	2204      	movs	r2, #4
 8004b54:	f102 0514 	add.w	r5, r2, #20
 8004b58:	429d      	cmp	r5, r3
 8004b5a:	d91f      	bls.n	8004b9c <_dtoa_r+0x2a4>
 8004b5c:	6041      	str	r1, [r0, #4]
 8004b5e:	4658      	mov	r0, fp
 8004b60:	f000 fc96 	bl	8005490 <_Balloc>
 8004b64:	4682      	mov	sl, r0
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d13c      	bne.n	8004be4 <_dtoa_r+0x2ec>
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <_dtoa_r+0x2e0>)
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004b72:	e6d8      	b.n	8004926 <_dtoa_r+0x2e>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e7e0      	b.n	8004b3a <_dtoa_r+0x242>
 8004b78:	2401      	movs	r4, #1
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b80:	f04f 33ff 	mov.w	r3, #4294967295
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	9307      	str	r3, [sp, #28]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2312      	movs	r3, #18
 8004b8c:	e7d0      	b.n	8004b30 <_dtoa_r+0x238>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b92:	e7f5      	b.n	8004b80 <_dtoa_r+0x288>
 8004b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	9307      	str	r3, [sp, #28]
 8004b9a:	e7d7      	b.n	8004b4c <_dtoa_r+0x254>
 8004b9c:	3101      	adds	r1, #1
 8004b9e:	0052      	lsls	r2, r2, #1
 8004ba0:	e7d8      	b.n	8004b54 <_dtoa_r+0x25c>
 8004ba2:	bf00      	nop
 8004ba4:	f3af 8000 	nop.w
 8004ba8:	636f4361 	.word	0x636f4361
 8004bac:	3fd287a7 	.word	0x3fd287a7
 8004bb0:	8b60c8b3 	.word	0x8b60c8b3
 8004bb4:	3fc68a28 	.word	0x3fc68a28
 8004bb8:	509f79fb 	.word	0x509f79fb
 8004bbc:	3fd34413 	.word	0x3fd34413
 8004bc0:	08006563 	.word	0x08006563
 8004bc4:	0800657a 	.word	0x0800657a
 8004bc8:	7ff00000 	.word	0x7ff00000
 8004bcc:	08006562 	.word	0x08006562
 8004bd0:	3ff80000 	.word	0x3ff80000
 8004bd4:	08006670 	.word	0x08006670
 8004bd8:	080065d2 	.word	0x080065d2
 8004bdc:	0800655d 	.word	0x0800655d
 8004be0:	08006561 	.word	0x08006561
 8004be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004be8:	6018      	str	r0, [r3, #0]
 8004bea:	9b07      	ldr	r3, [sp, #28]
 8004bec:	2b0e      	cmp	r3, #14
 8004bee:	f200 80a4 	bhi.w	8004d3a <_dtoa_r+0x442>
 8004bf2:	2c00      	cmp	r4, #0
 8004bf4:	f000 80a1 	beq.w	8004d3a <_dtoa_r+0x442>
 8004bf8:	2f00      	cmp	r7, #0
 8004bfa:	dd33      	ble.n	8004c64 <_dtoa_r+0x36c>
 8004bfc:	4bad      	ldr	r3, [pc, #692]	@ (8004eb4 <_dtoa_r+0x5bc>)
 8004bfe:	f007 020f 	and.w	r2, r7, #15
 8004c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c06:	ed93 7b00 	vldr	d7, [r3]
 8004c0a:	05f8      	lsls	r0, r7, #23
 8004c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c14:	d516      	bpl.n	8004c44 <_dtoa_r+0x34c>
 8004c16:	4ba8      	ldr	r3, [pc, #672]	@ (8004eb8 <_dtoa_r+0x5c0>)
 8004c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c20:	f7fb fe14 	bl	800084c <__aeabi_ddiv>
 8004c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c28:	f004 040f 	and.w	r4, r4, #15
 8004c2c:	2603      	movs	r6, #3
 8004c2e:	4da2      	ldr	r5, [pc, #648]	@ (8004eb8 <_dtoa_r+0x5c0>)
 8004c30:	b954      	cbnz	r4, 8004c48 <_dtoa_r+0x350>
 8004c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c3a:	f7fb fe07 	bl	800084c <__aeabi_ddiv>
 8004c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c42:	e028      	b.n	8004c96 <_dtoa_r+0x39e>
 8004c44:	2602      	movs	r6, #2
 8004c46:	e7f2      	b.n	8004c2e <_dtoa_r+0x336>
 8004c48:	07e1      	lsls	r1, r4, #31
 8004c4a:	d508      	bpl.n	8004c5e <_dtoa_r+0x366>
 8004c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c54:	f7fb fcd0 	bl	80005f8 <__aeabi_dmul>
 8004c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	1064      	asrs	r4, r4, #1
 8004c60:	3508      	adds	r5, #8
 8004c62:	e7e5      	b.n	8004c30 <_dtoa_r+0x338>
 8004c64:	f000 80d2 	beq.w	8004e0c <_dtoa_r+0x514>
 8004c68:	427c      	negs	r4, r7
 8004c6a:	4b92      	ldr	r3, [pc, #584]	@ (8004eb4 <_dtoa_r+0x5bc>)
 8004c6c:	4d92      	ldr	r5, [pc, #584]	@ (8004eb8 <_dtoa_r+0x5c0>)
 8004c6e:	f004 020f 	and.w	r2, r4, #15
 8004c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004c7e:	f7fb fcbb 	bl	80005f8 <__aeabi_dmul>
 8004c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004c86:	1124      	asrs	r4, r4, #4
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2602      	movs	r6, #2
 8004c8c:	2c00      	cmp	r4, #0
 8004c8e:	f040 80b2 	bne.w	8004df6 <_dtoa_r+0x4fe>
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1d3      	bne.n	8004c3e <_dtoa_r+0x346>
 8004c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80b7 	beq.w	8004e10 <_dtoa_r+0x518>
 8004ca2:	4b86      	ldr	r3, [pc, #536]	@ (8004ebc <_dtoa_r+0x5c4>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	4629      	mov	r1, r5
 8004caa:	f7fb ff17 	bl	8000adc <__aeabi_dcmplt>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f000 80ae 	beq.w	8004e10 <_dtoa_r+0x518>
 8004cb4:	9b07      	ldr	r3, [sp, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80aa 	beq.w	8004e10 <_dtoa_r+0x518>
 8004cbc:	9b00      	ldr	r3, [sp, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd37      	ble.n	8004d32 <_dtoa_r+0x43a>
 8004cc2:	1e7b      	subs	r3, r7, #1
 8004cc4:	9304      	str	r3, [sp, #16]
 8004cc6:	4620      	mov	r0, r4
 8004cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8004ec0 <_dtoa_r+0x5c8>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	4629      	mov	r1, r5
 8004cce:	f7fb fc93 	bl	80005f8 <__aeabi_dmul>
 8004cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004cd6:	9c00      	ldr	r4, [sp, #0]
 8004cd8:	3601      	adds	r6, #1
 8004cda:	4630      	mov	r0, r6
 8004cdc:	f7fb fc22 	bl	8000524 <__aeabi_i2d>
 8004ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ce4:	f7fb fc88 	bl	80005f8 <__aeabi_dmul>
 8004ce8:	4b76      	ldr	r3, [pc, #472]	@ (8004ec4 <_dtoa_r+0x5cc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	f7fb face 	bl	800028c <__adddf3>
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004cf6:	2c00      	cmp	r4, #0
 8004cf8:	f040 808d 	bne.w	8004e16 <_dtoa_r+0x51e>
 8004cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d00:	4b71      	ldr	r3, [pc, #452]	@ (8004ec8 <_dtoa_r+0x5d0>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	f7fb fac0 	bl	8000288 <__aeabi_dsub>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d10:	462a      	mov	r2, r5
 8004d12:	4633      	mov	r3, r6
 8004d14:	f7fb ff00 	bl	8000b18 <__aeabi_dcmpgt>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	f040 828b 	bne.w	8005234 <_dtoa_r+0x93c>
 8004d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d22:	462a      	mov	r2, r5
 8004d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d28:	f7fb fed8 	bl	8000adc <__aeabi_dcmplt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 8128 	bne.w	8004f82 <_dtoa_r+0x68a>
 8004d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f2c0 815a 	blt.w	8004ff6 <_dtoa_r+0x6fe>
 8004d42:	2f0e      	cmp	r7, #14
 8004d44:	f300 8157 	bgt.w	8004ff6 <_dtoa_r+0x6fe>
 8004d48:	4b5a      	ldr	r3, [pc, #360]	@ (8004eb4 <_dtoa_r+0x5bc>)
 8004d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d4e:	ed93 7b00 	vldr	d7, [r3]
 8004d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	ed8d 7b00 	vstr	d7, [sp]
 8004d5a:	da03      	bge.n	8004d64 <_dtoa_r+0x46c>
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f340 8101 	ble.w	8004f66 <_dtoa_r+0x66e>
 8004d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004d68:	4656      	mov	r6, sl
 8004d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d6e:	4620      	mov	r0, r4
 8004d70:	4629      	mov	r1, r5
 8004d72:	f7fb fd6b 	bl	800084c <__aeabi_ddiv>
 8004d76:	f7fb fed9 	bl	8000b2c <__aeabi_d2iz>
 8004d7a:	4680      	mov	r8, r0
 8004d7c:	f7fb fbd2 	bl	8000524 <__aeabi_i2d>
 8004d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d84:	f7fb fc38 	bl	80005f8 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	4629      	mov	r1, r5
 8004d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d94:	f7fb fa78 	bl	8000288 <__aeabi_dsub>
 8004d98:	f806 4b01 	strb.w	r4, [r6], #1
 8004d9c:	9d07      	ldr	r5, [sp, #28]
 8004d9e:	eba6 040a 	sub.w	r4, r6, sl
 8004da2:	42a5      	cmp	r5, r4
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	f040 8117 	bne.w	8004fda <_dtoa_r+0x6e2>
 8004dac:	f7fb fa6e 	bl	800028c <__adddf3>
 8004db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db4:	4604      	mov	r4, r0
 8004db6:	460d      	mov	r5, r1
 8004db8:	f7fb feae 	bl	8000b18 <__aeabi_dcmpgt>
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	f040 80f9 	bne.w	8004fb4 <_dtoa_r+0x6bc>
 8004dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7fb fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dce:	b118      	cbz	r0, 8004dd8 <_dtoa_r+0x4e0>
 8004dd0:	f018 0f01 	tst.w	r8, #1
 8004dd4:	f040 80ee 	bne.w	8004fb4 <_dtoa_r+0x6bc>
 8004dd8:	4649      	mov	r1, r9
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f000 fb98 	bl	8005510 <_Bfree>
 8004de0:	2300      	movs	r3, #0
 8004de2:	7033      	strb	r3, [r6, #0]
 8004de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004de6:	3701      	adds	r7, #1
 8004de8:	601f      	str	r7, [r3, #0]
 8004dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 831d 	beq.w	800542c <_dtoa_r+0xb34>
 8004df2:	601e      	str	r6, [r3, #0]
 8004df4:	e31a      	b.n	800542c <_dtoa_r+0xb34>
 8004df6:	07e2      	lsls	r2, r4, #31
 8004df8:	d505      	bpl.n	8004e06 <_dtoa_r+0x50e>
 8004dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004dfe:	f7fb fbfb 	bl	80005f8 <__aeabi_dmul>
 8004e02:	3601      	adds	r6, #1
 8004e04:	2301      	movs	r3, #1
 8004e06:	1064      	asrs	r4, r4, #1
 8004e08:	3508      	adds	r5, #8
 8004e0a:	e73f      	b.n	8004c8c <_dtoa_r+0x394>
 8004e0c:	2602      	movs	r6, #2
 8004e0e:	e742      	b.n	8004c96 <_dtoa_r+0x39e>
 8004e10:	9c07      	ldr	r4, [sp, #28]
 8004e12:	9704      	str	r7, [sp, #16]
 8004e14:	e761      	b.n	8004cda <_dtoa_r+0x3e2>
 8004e16:	4b27      	ldr	r3, [pc, #156]	@ (8004eb4 <_dtoa_r+0x5bc>)
 8004e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e22:	4454      	add	r4, sl
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d053      	beq.n	8004ed0 <_dtoa_r+0x5d8>
 8004e28:	4928      	ldr	r1, [pc, #160]	@ (8004ecc <_dtoa_r+0x5d4>)
 8004e2a:	2000      	movs	r0, #0
 8004e2c:	f7fb fd0e 	bl	800084c <__aeabi_ddiv>
 8004e30:	4633      	mov	r3, r6
 8004e32:	462a      	mov	r2, r5
 8004e34:	f7fb fa28 	bl	8000288 <__aeabi_dsub>
 8004e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004e3c:	4656      	mov	r6, sl
 8004e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e42:	f7fb fe73 	bl	8000b2c <__aeabi_d2iz>
 8004e46:	4605      	mov	r5, r0
 8004e48:	f7fb fb6c 	bl	8000524 <__aeabi_i2d>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e54:	f7fb fa18 	bl	8000288 <__aeabi_dsub>
 8004e58:	3530      	adds	r5, #48	@ 0x30
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004e62:	f806 5b01 	strb.w	r5, [r6], #1
 8004e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e6a:	f7fb fe37 	bl	8000adc <__aeabi_dcmplt>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d171      	bne.n	8004f56 <_dtoa_r+0x65e>
 8004e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e76:	4911      	ldr	r1, [pc, #68]	@ (8004ebc <_dtoa_r+0x5c4>)
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f7fb fa05 	bl	8000288 <__aeabi_dsub>
 8004e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004e82:	f7fb fe2b 	bl	8000adc <__aeabi_dcmplt>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f040 8095 	bne.w	8004fb6 <_dtoa_r+0x6be>
 8004e8c:	42a6      	cmp	r6, r4
 8004e8e:	f43f af50 	beq.w	8004d32 <_dtoa_r+0x43a>
 8004e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <_dtoa_r+0x5c8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f7fb fbad 	bl	80005f8 <__aeabi_dmul>
 8004e9e:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <_dtoa_r+0x5c8>)
 8004ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eaa:	f7fb fba5 	bl	80005f8 <__aeabi_dmul>
 8004eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004eb2:	e7c4      	b.n	8004e3e <_dtoa_r+0x546>
 8004eb4:	08006670 	.word	0x08006670
 8004eb8:	08006648 	.word	0x08006648
 8004ebc:	3ff00000 	.word	0x3ff00000
 8004ec0:	40240000 	.word	0x40240000
 8004ec4:	401c0000 	.word	0x401c0000
 8004ec8:	40140000 	.word	0x40140000
 8004ecc:	3fe00000 	.word	0x3fe00000
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	f7fb fb90 	bl	80005f8 <__aeabi_dmul>
 8004ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8004ede:	4656      	mov	r6, sl
 8004ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ee4:	f7fb fe22 	bl	8000b2c <__aeabi_d2iz>
 8004ee8:	4605      	mov	r5, r0
 8004eea:	f7fb fb1b 	bl	8000524 <__aeabi_i2d>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef6:	f7fb f9c7 	bl	8000288 <__aeabi_dsub>
 8004efa:	3530      	adds	r5, #48	@ 0x30
 8004efc:	f806 5b01 	strb.w	r5, [r6], #1
 8004f00:	4602      	mov	r2, r0
 8004f02:	460b      	mov	r3, r1
 8004f04:	42a6      	cmp	r6, r4
 8004f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	d124      	bne.n	8004f5a <_dtoa_r+0x662>
 8004f10:	4bac      	ldr	r3, [pc, #688]	@ (80051c4 <_dtoa_r+0x8cc>)
 8004f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004f16:	f7fb f9b9 	bl	800028c <__adddf3>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f22:	f7fb fdf9 	bl	8000b18 <__aeabi_dcmpgt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d145      	bne.n	8004fb6 <_dtoa_r+0x6be>
 8004f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004f2e:	49a5      	ldr	r1, [pc, #660]	@ (80051c4 <_dtoa_r+0x8cc>)
 8004f30:	2000      	movs	r0, #0
 8004f32:	f7fb f9a9 	bl	8000288 <__aeabi_dsub>
 8004f36:	4602      	mov	r2, r0
 8004f38:	460b      	mov	r3, r1
 8004f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f3e:	f7fb fdcd 	bl	8000adc <__aeabi_dcmplt>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	f43f aef5 	beq.w	8004d32 <_dtoa_r+0x43a>
 8004f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004f4a:	1e73      	subs	r3, r6, #1
 8004f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f52:	2b30      	cmp	r3, #48	@ 0x30
 8004f54:	d0f8      	beq.n	8004f48 <_dtoa_r+0x650>
 8004f56:	9f04      	ldr	r7, [sp, #16]
 8004f58:	e73e      	b.n	8004dd8 <_dtoa_r+0x4e0>
 8004f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80051c8 <_dtoa_r+0x8d0>)
 8004f5c:	f7fb fb4c 	bl	80005f8 <__aeabi_dmul>
 8004f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f64:	e7bc      	b.n	8004ee0 <_dtoa_r+0x5e8>
 8004f66:	d10c      	bne.n	8004f82 <_dtoa_r+0x68a>
 8004f68:	4b98      	ldr	r3, [pc, #608]	@ (80051cc <_dtoa_r+0x8d4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f70:	f7fb fb42 	bl	80005f8 <__aeabi_dmul>
 8004f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f78:	f7fb fdc4 	bl	8000b04 <__aeabi_dcmpge>
 8004f7c:	2800      	cmp	r0, #0
 8004f7e:	f000 8157 	beq.w	8005230 <_dtoa_r+0x938>
 8004f82:	2400      	movs	r4, #0
 8004f84:	4625      	mov	r5, r4
 8004f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	9304      	str	r3, [sp, #16]
 8004f8c:	4656      	mov	r6, sl
 8004f8e:	2700      	movs	r7, #0
 8004f90:	4621      	mov	r1, r4
 8004f92:	4658      	mov	r0, fp
 8004f94:	f000 fabc 	bl	8005510 <_Bfree>
 8004f98:	2d00      	cmp	r5, #0
 8004f9a:	d0dc      	beq.n	8004f56 <_dtoa_r+0x65e>
 8004f9c:	b12f      	cbz	r7, 8004faa <_dtoa_r+0x6b2>
 8004f9e:	42af      	cmp	r7, r5
 8004fa0:	d003      	beq.n	8004faa <_dtoa_r+0x6b2>
 8004fa2:	4639      	mov	r1, r7
 8004fa4:	4658      	mov	r0, fp
 8004fa6:	f000 fab3 	bl	8005510 <_Bfree>
 8004faa:	4629      	mov	r1, r5
 8004fac:	4658      	mov	r0, fp
 8004fae:	f000 faaf 	bl	8005510 <_Bfree>
 8004fb2:	e7d0      	b.n	8004f56 <_dtoa_r+0x65e>
 8004fb4:	9704      	str	r7, [sp, #16]
 8004fb6:	4633      	mov	r3, r6
 8004fb8:	461e      	mov	r6, r3
 8004fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fbe:	2a39      	cmp	r2, #57	@ 0x39
 8004fc0:	d107      	bne.n	8004fd2 <_dtoa_r+0x6da>
 8004fc2:	459a      	cmp	sl, r3
 8004fc4:	d1f8      	bne.n	8004fb8 <_dtoa_r+0x6c0>
 8004fc6:	9a04      	ldr	r2, [sp, #16]
 8004fc8:	3201      	adds	r2, #1
 8004fca:	9204      	str	r2, [sp, #16]
 8004fcc:	2230      	movs	r2, #48	@ 0x30
 8004fce:	f88a 2000 	strb.w	r2, [sl]
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	3201      	adds	r2, #1
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	e7bd      	b.n	8004f56 <_dtoa_r+0x65e>
 8004fda:	4b7b      	ldr	r3, [pc, #492]	@ (80051c8 <_dtoa_r+0x8d0>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f7fb fb0b 	bl	80005f8 <__aeabi_dmul>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	460d      	mov	r5, r1
 8004fea:	f7fb fd6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f43f aebb 	beq.w	8004d6a <_dtoa_r+0x472>
 8004ff4:	e6f0      	b.n	8004dd8 <_dtoa_r+0x4e0>
 8004ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	f000 80db 	beq.w	80051b4 <_dtoa_r+0x8bc>
 8004ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005000:	2a01      	cmp	r2, #1
 8005002:	f300 80bf 	bgt.w	8005184 <_dtoa_r+0x88c>
 8005006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005008:	2a00      	cmp	r2, #0
 800500a:	f000 80b7 	beq.w	800517c <_dtoa_r+0x884>
 800500e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005014:	4646      	mov	r6, r8
 8005016:	9a08      	ldr	r2, [sp, #32]
 8005018:	2101      	movs	r1, #1
 800501a:	441a      	add	r2, r3
 800501c:	4658      	mov	r0, fp
 800501e:	4498      	add	r8, r3
 8005020:	9208      	str	r2, [sp, #32]
 8005022:	f000 fb29 	bl	8005678 <__i2b>
 8005026:	4605      	mov	r5, r0
 8005028:	b15e      	cbz	r6, 8005042 <_dtoa_r+0x74a>
 800502a:	9b08      	ldr	r3, [sp, #32]
 800502c:	2b00      	cmp	r3, #0
 800502e:	dd08      	ble.n	8005042 <_dtoa_r+0x74a>
 8005030:	42b3      	cmp	r3, r6
 8005032:	9a08      	ldr	r2, [sp, #32]
 8005034:	bfa8      	it	ge
 8005036:	4633      	movge	r3, r6
 8005038:	eba8 0803 	sub.w	r8, r8, r3
 800503c:	1af6      	subs	r6, r6, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	9308      	str	r3, [sp, #32]
 8005042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005044:	b1f3      	cbz	r3, 8005084 <_dtoa_r+0x78c>
 8005046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80b7 	beq.w	80051bc <_dtoa_r+0x8c4>
 800504e:	b18c      	cbz	r4, 8005074 <_dtoa_r+0x77c>
 8005050:	4629      	mov	r1, r5
 8005052:	4622      	mov	r2, r4
 8005054:	4658      	mov	r0, fp
 8005056:	f000 fbcf 	bl	80057f8 <__pow5mult>
 800505a:	464a      	mov	r2, r9
 800505c:	4601      	mov	r1, r0
 800505e:	4605      	mov	r5, r0
 8005060:	4658      	mov	r0, fp
 8005062:	f000 fb1f 	bl	80056a4 <__multiply>
 8005066:	4649      	mov	r1, r9
 8005068:	9004      	str	r0, [sp, #16]
 800506a:	4658      	mov	r0, fp
 800506c:	f000 fa50 	bl	8005510 <_Bfree>
 8005070:	9b04      	ldr	r3, [sp, #16]
 8005072:	4699      	mov	r9, r3
 8005074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005076:	1b1a      	subs	r2, r3, r4
 8005078:	d004      	beq.n	8005084 <_dtoa_r+0x78c>
 800507a:	4649      	mov	r1, r9
 800507c:	4658      	mov	r0, fp
 800507e:	f000 fbbb 	bl	80057f8 <__pow5mult>
 8005082:	4681      	mov	r9, r0
 8005084:	2101      	movs	r1, #1
 8005086:	4658      	mov	r0, fp
 8005088:	f000 faf6 	bl	8005678 <__i2b>
 800508c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800508e:	4604      	mov	r4, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 81cf 	beq.w	8005434 <_dtoa_r+0xb3c>
 8005096:	461a      	mov	r2, r3
 8005098:	4601      	mov	r1, r0
 800509a:	4658      	mov	r0, fp
 800509c:	f000 fbac 	bl	80057f8 <__pow5mult>
 80050a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	4604      	mov	r4, r0
 80050a6:	f300 8095 	bgt.w	80051d4 <_dtoa_r+0x8dc>
 80050aa:	9b02      	ldr	r3, [sp, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f040 8087 	bne.w	80051c0 <_dtoa_r+0x8c8>
 80050b2:	9b03      	ldr	r3, [sp, #12]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f040 8089 	bne.w	80051d0 <_dtoa_r+0x8d8>
 80050be:	9b03      	ldr	r3, [sp, #12]
 80050c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050c4:	0d1b      	lsrs	r3, r3, #20
 80050c6:	051b      	lsls	r3, r3, #20
 80050c8:	b12b      	cbz	r3, 80050d6 <_dtoa_r+0x7de>
 80050ca:	9b08      	ldr	r3, [sp, #32]
 80050cc:	3301      	adds	r3, #1
 80050ce:	9308      	str	r3, [sp, #32]
 80050d0:	f108 0801 	add.w	r8, r8, #1
 80050d4:	2301      	movs	r3, #1
 80050d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80050d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 81b0 	beq.w	8005440 <_dtoa_r+0xb48>
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80050e6:	6918      	ldr	r0, [r3, #16]
 80050e8:	f000 fa7a 	bl	80055e0 <__hi0bits>
 80050ec:	f1c0 0020 	rsb	r0, r0, #32
 80050f0:	9b08      	ldr	r3, [sp, #32]
 80050f2:	4418      	add	r0, r3
 80050f4:	f010 001f 	ands.w	r0, r0, #31
 80050f8:	d077      	beq.n	80051ea <_dtoa_r+0x8f2>
 80050fa:	f1c0 0320 	rsb	r3, r0, #32
 80050fe:	2b04      	cmp	r3, #4
 8005100:	dd6b      	ble.n	80051da <_dtoa_r+0x8e2>
 8005102:	9b08      	ldr	r3, [sp, #32]
 8005104:	f1c0 001c 	rsb	r0, r0, #28
 8005108:	4403      	add	r3, r0
 800510a:	4480      	add	r8, r0
 800510c:	4406      	add	r6, r0
 800510e:	9308      	str	r3, [sp, #32]
 8005110:	f1b8 0f00 	cmp.w	r8, #0
 8005114:	dd05      	ble.n	8005122 <_dtoa_r+0x82a>
 8005116:	4649      	mov	r1, r9
 8005118:	4642      	mov	r2, r8
 800511a:	4658      	mov	r0, fp
 800511c:	f000 fbc6 	bl	80058ac <__lshift>
 8005120:	4681      	mov	r9, r0
 8005122:	9b08      	ldr	r3, [sp, #32]
 8005124:	2b00      	cmp	r3, #0
 8005126:	dd05      	ble.n	8005134 <_dtoa_r+0x83c>
 8005128:	4621      	mov	r1, r4
 800512a:	461a      	mov	r2, r3
 800512c:	4658      	mov	r0, fp
 800512e:	f000 fbbd 	bl	80058ac <__lshift>
 8005132:	4604      	mov	r4, r0
 8005134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005136:	2b00      	cmp	r3, #0
 8005138:	d059      	beq.n	80051ee <_dtoa_r+0x8f6>
 800513a:	4621      	mov	r1, r4
 800513c:	4648      	mov	r0, r9
 800513e:	f000 fc21 	bl	8005984 <__mcmp>
 8005142:	2800      	cmp	r0, #0
 8005144:	da53      	bge.n	80051ee <_dtoa_r+0x8f6>
 8005146:	1e7b      	subs	r3, r7, #1
 8005148:	9304      	str	r3, [sp, #16]
 800514a:	4649      	mov	r1, r9
 800514c:	2300      	movs	r3, #0
 800514e:	220a      	movs	r2, #10
 8005150:	4658      	mov	r0, fp
 8005152:	f000 f9ff 	bl	8005554 <__multadd>
 8005156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005158:	4681      	mov	r9, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	f000 8172 	beq.w	8005444 <_dtoa_r+0xb4c>
 8005160:	2300      	movs	r3, #0
 8005162:	4629      	mov	r1, r5
 8005164:	220a      	movs	r2, #10
 8005166:	4658      	mov	r0, fp
 8005168:	f000 f9f4 	bl	8005554 <__multadd>
 800516c:	9b00      	ldr	r3, [sp, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	4605      	mov	r5, r0
 8005172:	dc67      	bgt.n	8005244 <_dtoa_r+0x94c>
 8005174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005176:	2b02      	cmp	r3, #2
 8005178:	dc41      	bgt.n	80051fe <_dtoa_r+0x906>
 800517a:	e063      	b.n	8005244 <_dtoa_r+0x94c>
 800517c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800517e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005182:	e746      	b.n	8005012 <_dtoa_r+0x71a>
 8005184:	9b07      	ldr	r3, [sp, #28]
 8005186:	1e5c      	subs	r4, r3, #1
 8005188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800518a:	42a3      	cmp	r3, r4
 800518c:	bfbf      	itttt	lt
 800518e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005194:	1ae3      	sublt	r3, r4, r3
 8005196:	bfb4      	ite	lt
 8005198:	18d2      	addlt	r2, r2, r3
 800519a:	1b1c      	subge	r4, r3, r4
 800519c:	9b07      	ldr	r3, [sp, #28]
 800519e:	bfbc      	itt	lt
 80051a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80051a2:	2400      	movlt	r4, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	bfb5      	itete	lt
 80051a8:	eba8 0603 	sublt.w	r6, r8, r3
 80051ac:	9b07      	ldrge	r3, [sp, #28]
 80051ae:	2300      	movlt	r3, #0
 80051b0:	4646      	movge	r6, r8
 80051b2:	e730      	b.n	8005016 <_dtoa_r+0x71e>
 80051b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80051b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80051b8:	4646      	mov	r6, r8
 80051ba:	e735      	b.n	8005028 <_dtoa_r+0x730>
 80051bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051be:	e75c      	b.n	800507a <_dtoa_r+0x782>
 80051c0:	2300      	movs	r3, #0
 80051c2:	e788      	b.n	80050d6 <_dtoa_r+0x7de>
 80051c4:	3fe00000 	.word	0x3fe00000
 80051c8:	40240000 	.word	0x40240000
 80051cc:	40140000 	.word	0x40140000
 80051d0:	9b02      	ldr	r3, [sp, #8]
 80051d2:	e780      	b.n	80050d6 <_dtoa_r+0x7de>
 80051d4:	2300      	movs	r3, #0
 80051d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80051d8:	e782      	b.n	80050e0 <_dtoa_r+0x7e8>
 80051da:	d099      	beq.n	8005110 <_dtoa_r+0x818>
 80051dc:	9a08      	ldr	r2, [sp, #32]
 80051de:	331c      	adds	r3, #28
 80051e0:	441a      	add	r2, r3
 80051e2:	4498      	add	r8, r3
 80051e4:	441e      	add	r6, r3
 80051e6:	9208      	str	r2, [sp, #32]
 80051e8:	e792      	b.n	8005110 <_dtoa_r+0x818>
 80051ea:	4603      	mov	r3, r0
 80051ec:	e7f6      	b.n	80051dc <_dtoa_r+0x8e4>
 80051ee:	9b07      	ldr	r3, [sp, #28]
 80051f0:	9704      	str	r7, [sp, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	dc20      	bgt.n	8005238 <_dtoa_r+0x940>
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	dd1e      	ble.n	800523c <_dtoa_r+0x944>
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f47f aec0 	bne.w	8004f86 <_dtoa_r+0x68e>
 8005206:	4621      	mov	r1, r4
 8005208:	2205      	movs	r2, #5
 800520a:	4658      	mov	r0, fp
 800520c:	f000 f9a2 	bl	8005554 <__multadd>
 8005210:	4601      	mov	r1, r0
 8005212:	4604      	mov	r4, r0
 8005214:	4648      	mov	r0, r9
 8005216:	f000 fbb5 	bl	8005984 <__mcmp>
 800521a:	2800      	cmp	r0, #0
 800521c:	f77f aeb3 	ble.w	8004f86 <_dtoa_r+0x68e>
 8005220:	4656      	mov	r6, sl
 8005222:	2331      	movs	r3, #49	@ 0x31
 8005224:	f806 3b01 	strb.w	r3, [r6], #1
 8005228:	9b04      	ldr	r3, [sp, #16]
 800522a:	3301      	adds	r3, #1
 800522c:	9304      	str	r3, [sp, #16]
 800522e:	e6ae      	b.n	8004f8e <_dtoa_r+0x696>
 8005230:	9c07      	ldr	r4, [sp, #28]
 8005232:	9704      	str	r7, [sp, #16]
 8005234:	4625      	mov	r5, r4
 8005236:	e7f3      	b.n	8005220 <_dtoa_r+0x928>
 8005238:	9b07      	ldr	r3, [sp, #28]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8104 	beq.w	800544c <_dtoa_r+0xb54>
 8005244:	2e00      	cmp	r6, #0
 8005246:	dd05      	ble.n	8005254 <_dtoa_r+0x95c>
 8005248:	4629      	mov	r1, r5
 800524a:	4632      	mov	r2, r6
 800524c:	4658      	mov	r0, fp
 800524e:	f000 fb2d 	bl	80058ac <__lshift>
 8005252:	4605      	mov	r5, r0
 8005254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d05a      	beq.n	8005310 <_dtoa_r+0xa18>
 800525a:	6869      	ldr	r1, [r5, #4]
 800525c:	4658      	mov	r0, fp
 800525e:	f000 f917 	bl	8005490 <_Balloc>
 8005262:	4606      	mov	r6, r0
 8005264:	b928      	cbnz	r0, 8005272 <_dtoa_r+0x97a>
 8005266:	4b84      	ldr	r3, [pc, #528]	@ (8005478 <_dtoa_r+0xb80>)
 8005268:	4602      	mov	r2, r0
 800526a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800526e:	f7ff bb5a 	b.w	8004926 <_dtoa_r+0x2e>
 8005272:	692a      	ldr	r2, [r5, #16]
 8005274:	3202      	adds	r2, #2
 8005276:	0092      	lsls	r2, r2, #2
 8005278:	f105 010c 	add.w	r1, r5, #12
 800527c:	300c      	adds	r0, #12
 800527e:	f000 fca7 	bl	8005bd0 <memcpy>
 8005282:	2201      	movs	r2, #1
 8005284:	4631      	mov	r1, r6
 8005286:	4658      	mov	r0, fp
 8005288:	f000 fb10 	bl	80058ac <__lshift>
 800528c:	f10a 0301 	add.w	r3, sl, #1
 8005290:	9307      	str	r3, [sp, #28]
 8005292:	9b00      	ldr	r3, [sp, #0]
 8005294:	4453      	add	r3, sl
 8005296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005298:	9b02      	ldr	r3, [sp, #8]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	462f      	mov	r7, r5
 80052a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80052a2:	4605      	mov	r5, r0
 80052a4:	9b07      	ldr	r3, [sp, #28]
 80052a6:	4621      	mov	r1, r4
 80052a8:	3b01      	subs	r3, #1
 80052aa:	4648      	mov	r0, r9
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	f7ff fa9b 	bl	80047e8 <quorem>
 80052b2:	4639      	mov	r1, r7
 80052b4:	9002      	str	r0, [sp, #8]
 80052b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80052ba:	4648      	mov	r0, r9
 80052bc:	f000 fb62 	bl	8005984 <__mcmp>
 80052c0:	462a      	mov	r2, r5
 80052c2:	9008      	str	r0, [sp, #32]
 80052c4:	4621      	mov	r1, r4
 80052c6:	4658      	mov	r0, fp
 80052c8:	f000 fb78 	bl	80059bc <__mdiff>
 80052cc:	68c2      	ldr	r2, [r0, #12]
 80052ce:	4606      	mov	r6, r0
 80052d0:	bb02      	cbnz	r2, 8005314 <_dtoa_r+0xa1c>
 80052d2:	4601      	mov	r1, r0
 80052d4:	4648      	mov	r0, r9
 80052d6:	f000 fb55 	bl	8005984 <__mcmp>
 80052da:	4602      	mov	r2, r0
 80052dc:	4631      	mov	r1, r6
 80052de:	4658      	mov	r0, fp
 80052e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80052e2:	f000 f915 	bl	8005510 <_Bfree>
 80052e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052ea:	9e07      	ldr	r6, [sp, #28]
 80052ec:	ea43 0102 	orr.w	r1, r3, r2
 80052f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052f2:	4319      	orrs	r1, r3
 80052f4:	d110      	bne.n	8005318 <_dtoa_r+0xa20>
 80052f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80052fa:	d029      	beq.n	8005350 <_dtoa_r+0xa58>
 80052fc:	9b08      	ldr	r3, [sp, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	dd02      	ble.n	8005308 <_dtoa_r+0xa10>
 8005302:	9b02      	ldr	r3, [sp, #8]
 8005304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005308:	9b00      	ldr	r3, [sp, #0]
 800530a:	f883 8000 	strb.w	r8, [r3]
 800530e:	e63f      	b.n	8004f90 <_dtoa_r+0x698>
 8005310:	4628      	mov	r0, r5
 8005312:	e7bb      	b.n	800528c <_dtoa_r+0x994>
 8005314:	2201      	movs	r2, #1
 8005316:	e7e1      	b.n	80052dc <_dtoa_r+0x9e4>
 8005318:	9b08      	ldr	r3, [sp, #32]
 800531a:	2b00      	cmp	r3, #0
 800531c:	db04      	blt.n	8005328 <_dtoa_r+0xa30>
 800531e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005320:	430b      	orrs	r3, r1
 8005322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005324:	430b      	orrs	r3, r1
 8005326:	d120      	bne.n	800536a <_dtoa_r+0xa72>
 8005328:	2a00      	cmp	r2, #0
 800532a:	dded      	ble.n	8005308 <_dtoa_r+0xa10>
 800532c:	4649      	mov	r1, r9
 800532e:	2201      	movs	r2, #1
 8005330:	4658      	mov	r0, fp
 8005332:	f000 fabb 	bl	80058ac <__lshift>
 8005336:	4621      	mov	r1, r4
 8005338:	4681      	mov	r9, r0
 800533a:	f000 fb23 	bl	8005984 <__mcmp>
 800533e:	2800      	cmp	r0, #0
 8005340:	dc03      	bgt.n	800534a <_dtoa_r+0xa52>
 8005342:	d1e1      	bne.n	8005308 <_dtoa_r+0xa10>
 8005344:	f018 0f01 	tst.w	r8, #1
 8005348:	d0de      	beq.n	8005308 <_dtoa_r+0xa10>
 800534a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800534e:	d1d8      	bne.n	8005302 <_dtoa_r+0xa0a>
 8005350:	9a00      	ldr	r2, [sp, #0]
 8005352:	2339      	movs	r3, #57	@ 0x39
 8005354:	7013      	strb	r3, [r2, #0]
 8005356:	4633      	mov	r3, r6
 8005358:	461e      	mov	r6, r3
 800535a:	3b01      	subs	r3, #1
 800535c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005360:	2a39      	cmp	r2, #57	@ 0x39
 8005362:	d052      	beq.n	800540a <_dtoa_r+0xb12>
 8005364:	3201      	adds	r2, #1
 8005366:	701a      	strb	r2, [r3, #0]
 8005368:	e612      	b.n	8004f90 <_dtoa_r+0x698>
 800536a:	2a00      	cmp	r2, #0
 800536c:	dd07      	ble.n	800537e <_dtoa_r+0xa86>
 800536e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005372:	d0ed      	beq.n	8005350 <_dtoa_r+0xa58>
 8005374:	9a00      	ldr	r2, [sp, #0]
 8005376:	f108 0301 	add.w	r3, r8, #1
 800537a:	7013      	strb	r3, [r2, #0]
 800537c:	e608      	b.n	8004f90 <_dtoa_r+0x698>
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	9a07      	ldr	r2, [sp, #28]
 8005382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005388:	4293      	cmp	r3, r2
 800538a:	d028      	beq.n	80053de <_dtoa_r+0xae6>
 800538c:	4649      	mov	r1, r9
 800538e:	2300      	movs	r3, #0
 8005390:	220a      	movs	r2, #10
 8005392:	4658      	mov	r0, fp
 8005394:	f000 f8de 	bl	8005554 <__multadd>
 8005398:	42af      	cmp	r7, r5
 800539a:	4681      	mov	r9, r0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	f04f 020a 	mov.w	r2, #10
 80053a4:	4639      	mov	r1, r7
 80053a6:	4658      	mov	r0, fp
 80053a8:	d107      	bne.n	80053ba <_dtoa_r+0xac2>
 80053aa:	f000 f8d3 	bl	8005554 <__multadd>
 80053ae:	4607      	mov	r7, r0
 80053b0:	4605      	mov	r5, r0
 80053b2:	9b07      	ldr	r3, [sp, #28]
 80053b4:	3301      	adds	r3, #1
 80053b6:	9307      	str	r3, [sp, #28]
 80053b8:	e774      	b.n	80052a4 <_dtoa_r+0x9ac>
 80053ba:	f000 f8cb 	bl	8005554 <__multadd>
 80053be:	4629      	mov	r1, r5
 80053c0:	4607      	mov	r7, r0
 80053c2:	2300      	movs	r3, #0
 80053c4:	220a      	movs	r2, #10
 80053c6:	4658      	mov	r0, fp
 80053c8:	f000 f8c4 	bl	8005554 <__multadd>
 80053cc:	4605      	mov	r5, r0
 80053ce:	e7f0      	b.n	80053b2 <_dtoa_r+0xaba>
 80053d0:	9b00      	ldr	r3, [sp, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	bfcc      	ite	gt
 80053d6:	461e      	movgt	r6, r3
 80053d8:	2601      	movle	r6, #1
 80053da:	4456      	add	r6, sl
 80053dc:	2700      	movs	r7, #0
 80053de:	4649      	mov	r1, r9
 80053e0:	2201      	movs	r2, #1
 80053e2:	4658      	mov	r0, fp
 80053e4:	f000 fa62 	bl	80058ac <__lshift>
 80053e8:	4621      	mov	r1, r4
 80053ea:	4681      	mov	r9, r0
 80053ec:	f000 faca 	bl	8005984 <__mcmp>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dcb0      	bgt.n	8005356 <_dtoa_r+0xa5e>
 80053f4:	d102      	bne.n	80053fc <_dtoa_r+0xb04>
 80053f6:	f018 0f01 	tst.w	r8, #1
 80053fa:	d1ac      	bne.n	8005356 <_dtoa_r+0xa5e>
 80053fc:	4633      	mov	r3, r6
 80053fe:	461e      	mov	r6, r3
 8005400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005404:	2a30      	cmp	r2, #48	@ 0x30
 8005406:	d0fa      	beq.n	80053fe <_dtoa_r+0xb06>
 8005408:	e5c2      	b.n	8004f90 <_dtoa_r+0x698>
 800540a:	459a      	cmp	sl, r3
 800540c:	d1a4      	bne.n	8005358 <_dtoa_r+0xa60>
 800540e:	9b04      	ldr	r3, [sp, #16]
 8005410:	3301      	adds	r3, #1
 8005412:	9304      	str	r3, [sp, #16]
 8005414:	2331      	movs	r3, #49	@ 0x31
 8005416:	f88a 3000 	strb.w	r3, [sl]
 800541a:	e5b9      	b.n	8004f90 <_dtoa_r+0x698>
 800541c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800541e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800547c <_dtoa_r+0xb84>
 8005422:	b11b      	cbz	r3, 800542c <_dtoa_r+0xb34>
 8005424:	f10a 0308 	add.w	r3, sl, #8
 8005428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4650      	mov	r0, sl
 800542e:	b019      	add	sp, #100	@ 0x64
 8005430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005436:	2b01      	cmp	r3, #1
 8005438:	f77f ae37 	ble.w	80050aa <_dtoa_r+0x7b2>
 800543c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800543e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005440:	2001      	movs	r0, #1
 8005442:	e655      	b.n	80050f0 <_dtoa_r+0x7f8>
 8005444:	9b00      	ldr	r3, [sp, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f77f aed6 	ble.w	80051f8 <_dtoa_r+0x900>
 800544c:	4656      	mov	r6, sl
 800544e:	4621      	mov	r1, r4
 8005450:	4648      	mov	r0, r9
 8005452:	f7ff f9c9 	bl	80047e8 <quorem>
 8005456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800545a:	f806 8b01 	strb.w	r8, [r6], #1
 800545e:	9b00      	ldr	r3, [sp, #0]
 8005460:	eba6 020a 	sub.w	r2, r6, sl
 8005464:	4293      	cmp	r3, r2
 8005466:	ddb3      	ble.n	80053d0 <_dtoa_r+0xad8>
 8005468:	4649      	mov	r1, r9
 800546a:	2300      	movs	r3, #0
 800546c:	220a      	movs	r2, #10
 800546e:	4658      	mov	r0, fp
 8005470:	f000 f870 	bl	8005554 <__multadd>
 8005474:	4681      	mov	r9, r0
 8005476:	e7ea      	b.n	800544e <_dtoa_r+0xb56>
 8005478:	080065d2 	.word	0x080065d2
 800547c:	08006554 	.word	0x08006554

08005480 <malloc>:
 8005480:	4b02      	ldr	r3, [pc, #8]	@ (800548c <malloc+0xc>)
 8005482:	4601      	mov	r1, r0
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f7fe bf27 	b.w	80042d8 <_malloc_r>
 800548a:	bf00      	nop
 800548c:	2000002c 	.word	0x2000002c

08005490 <_Balloc>:
 8005490:	b570      	push	{r4, r5, r6, lr}
 8005492:	69c6      	ldr	r6, [r0, #28]
 8005494:	4604      	mov	r4, r0
 8005496:	460d      	mov	r5, r1
 8005498:	b976      	cbnz	r6, 80054b8 <_Balloc+0x28>
 800549a:	2010      	movs	r0, #16
 800549c:	f7ff fff0 	bl	8005480 <malloc>
 80054a0:	4602      	mov	r2, r0
 80054a2:	61e0      	str	r0, [r4, #28]
 80054a4:	b920      	cbnz	r0, 80054b0 <_Balloc+0x20>
 80054a6:	4b18      	ldr	r3, [pc, #96]	@ (8005508 <_Balloc+0x78>)
 80054a8:	4818      	ldr	r0, [pc, #96]	@ (800550c <_Balloc+0x7c>)
 80054aa:	216b      	movs	r1, #107	@ 0x6b
 80054ac:	f000 fb9e 	bl	8005bec <__assert_func>
 80054b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054b4:	6006      	str	r6, [r0, #0]
 80054b6:	60c6      	str	r6, [r0, #12]
 80054b8:	69e6      	ldr	r6, [r4, #28]
 80054ba:	68f3      	ldr	r3, [r6, #12]
 80054bc:	b183      	cbz	r3, 80054e0 <_Balloc+0x50>
 80054be:	69e3      	ldr	r3, [r4, #28]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80054c6:	b9b8      	cbnz	r0, 80054f8 <_Balloc+0x68>
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f605 	lsl.w	r6, r1, r5
 80054ce:	1d72      	adds	r2, r6, #5
 80054d0:	0092      	lsls	r2, r2, #2
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 fba8 	bl	8005c28 <_calloc_r>
 80054d8:	b160      	cbz	r0, 80054f4 <_Balloc+0x64>
 80054da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80054de:	e00e      	b.n	80054fe <_Balloc+0x6e>
 80054e0:	2221      	movs	r2, #33	@ 0x21
 80054e2:	2104      	movs	r1, #4
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fb9f 	bl	8005c28 <_calloc_r>
 80054ea:	69e3      	ldr	r3, [r4, #28]
 80054ec:	60f0      	str	r0, [r6, #12]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e4      	bne.n	80054be <_Balloc+0x2e>
 80054f4:	2000      	movs	r0, #0
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	6802      	ldr	r2, [r0, #0]
 80054fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80054fe:	2300      	movs	r3, #0
 8005500:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005504:	e7f7      	b.n	80054f6 <_Balloc+0x66>
 8005506:	bf00      	nop
 8005508:	08006563 	.word	0x08006563
 800550c:	080065e3 	.word	0x080065e3

08005510 <_Bfree>:
 8005510:	b570      	push	{r4, r5, r6, lr}
 8005512:	69c6      	ldr	r6, [r0, #28]
 8005514:	4605      	mov	r5, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b976      	cbnz	r6, 8005538 <_Bfree+0x28>
 800551a:	2010      	movs	r0, #16
 800551c:	f7ff ffb0 	bl	8005480 <malloc>
 8005520:	4602      	mov	r2, r0
 8005522:	61e8      	str	r0, [r5, #28]
 8005524:	b920      	cbnz	r0, 8005530 <_Bfree+0x20>
 8005526:	4b09      	ldr	r3, [pc, #36]	@ (800554c <_Bfree+0x3c>)
 8005528:	4809      	ldr	r0, [pc, #36]	@ (8005550 <_Bfree+0x40>)
 800552a:	218f      	movs	r1, #143	@ 0x8f
 800552c:	f000 fb5e 	bl	8005bec <__assert_func>
 8005530:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005534:	6006      	str	r6, [r0, #0]
 8005536:	60c6      	str	r6, [r0, #12]
 8005538:	b13c      	cbz	r4, 800554a <_Bfree+0x3a>
 800553a:	69eb      	ldr	r3, [r5, #28]
 800553c:	6862      	ldr	r2, [r4, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005544:	6021      	str	r1, [r4, #0]
 8005546:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	08006563 	.word	0x08006563
 8005550:	080065e3 	.word	0x080065e3

08005554 <__multadd>:
 8005554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005558:	690d      	ldr	r5, [r1, #16]
 800555a:	4607      	mov	r7, r0
 800555c:	460c      	mov	r4, r1
 800555e:	461e      	mov	r6, r3
 8005560:	f101 0c14 	add.w	ip, r1, #20
 8005564:	2000      	movs	r0, #0
 8005566:	f8dc 3000 	ldr.w	r3, [ip]
 800556a:	b299      	uxth	r1, r3
 800556c:	fb02 6101 	mla	r1, r2, r1, r6
 8005570:	0c1e      	lsrs	r6, r3, #16
 8005572:	0c0b      	lsrs	r3, r1, #16
 8005574:	fb02 3306 	mla	r3, r2, r6, r3
 8005578:	b289      	uxth	r1, r1
 800557a:	3001      	adds	r0, #1
 800557c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005580:	4285      	cmp	r5, r0
 8005582:	f84c 1b04 	str.w	r1, [ip], #4
 8005586:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800558a:	dcec      	bgt.n	8005566 <__multadd+0x12>
 800558c:	b30e      	cbz	r6, 80055d2 <__multadd+0x7e>
 800558e:	68a3      	ldr	r3, [r4, #8]
 8005590:	42ab      	cmp	r3, r5
 8005592:	dc19      	bgt.n	80055c8 <__multadd+0x74>
 8005594:	6861      	ldr	r1, [r4, #4]
 8005596:	4638      	mov	r0, r7
 8005598:	3101      	adds	r1, #1
 800559a:	f7ff ff79 	bl	8005490 <_Balloc>
 800559e:	4680      	mov	r8, r0
 80055a0:	b928      	cbnz	r0, 80055ae <__multadd+0x5a>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b0c      	ldr	r3, [pc, #48]	@ (80055d8 <__multadd+0x84>)
 80055a6:	480d      	ldr	r0, [pc, #52]	@ (80055dc <__multadd+0x88>)
 80055a8:	21ba      	movs	r1, #186	@ 0xba
 80055aa:	f000 fb1f 	bl	8005bec <__assert_func>
 80055ae:	6922      	ldr	r2, [r4, #16]
 80055b0:	3202      	adds	r2, #2
 80055b2:	f104 010c 	add.w	r1, r4, #12
 80055b6:	0092      	lsls	r2, r2, #2
 80055b8:	300c      	adds	r0, #12
 80055ba:	f000 fb09 	bl	8005bd0 <memcpy>
 80055be:	4621      	mov	r1, r4
 80055c0:	4638      	mov	r0, r7
 80055c2:	f7ff ffa5 	bl	8005510 <_Bfree>
 80055c6:	4644      	mov	r4, r8
 80055c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055cc:	3501      	adds	r5, #1
 80055ce:	615e      	str	r6, [r3, #20]
 80055d0:	6125      	str	r5, [r4, #16]
 80055d2:	4620      	mov	r0, r4
 80055d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d8:	080065d2 	.word	0x080065d2
 80055dc:	080065e3 	.word	0x080065e3

080055e0 <__hi0bits>:
 80055e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80055e4:	4603      	mov	r3, r0
 80055e6:	bf36      	itet	cc
 80055e8:	0403      	lslcc	r3, r0, #16
 80055ea:	2000      	movcs	r0, #0
 80055ec:	2010      	movcc	r0, #16
 80055ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055f2:	bf3c      	itt	cc
 80055f4:	021b      	lslcc	r3, r3, #8
 80055f6:	3008      	addcc	r0, #8
 80055f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055fc:	bf3c      	itt	cc
 80055fe:	011b      	lslcc	r3, r3, #4
 8005600:	3004      	addcc	r0, #4
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005606:	bf3c      	itt	cc
 8005608:	009b      	lslcc	r3, r3, #2
 800560a:	3002      	addcc	r0, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	db05      	blt.n	800561c <__hi0bits+0x3c>
 8005610:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005614:	f100 0001 	add.w	r0, r0, #1
 8005618:	bf08      	it	eq
 800561a:	2020      	moveq	r0, #32
 800561c:	4770      	bx	lr

0800561e <__lo0bits>:
 800561e:	6803      	ldr	r3, [r0, #0]
 8005620:	4602      	mov	r2, r0
 8005622:	f013 0007 	ands.w	r0, r3, #7
 8005626:	d00b      	beq.n	8005640 <__lo0bits+0x22>
 8005628:	07d9      	lsls	r1, r3, #31
 800562a:	d421      	bmi.n	8005670 <__lo0bits+0x52>
 800562c:	0798      	lsls	r0, r3, #30
 800562e:	bf49      	itett	mi
 8005630:	085b      	lsrmi	r3, r3, #1
 8005632:	089b      	lsrpl	r3, r3, #2
 8005634:	2001      	movmi	r0, #1
 8005636:	6013      	strmi	r3, [r2, #0]
 8005638:	bf5c      	itt	pl
 800563a:	6013      	strpl	r3, [r2, #0]
 800563c:	2002      	movpl	r0, #2
 800563e:	4770      	bx	lr
 8005640:	b299      	uxth	r1, r3
 8005642:	b909      	cbnz	r1, 8005648 <__lo0bits+0x2a>
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	2010      	movs	r0, #16
 8005648:	b2d9      	uxtb	r1, r3
 800564a:	b909      	cbnz	r1, 8005650 <__lo0bits+0x32>
 800564c:	3008      	adds	r0, #8
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	0719      	lsls	r1, r3, #28
 8005652:	bf04      	itt	eq
 8005654:	091b      	lsreq	r3, r3, #4
 8005656:	3004      	addeq	r0, #4
 8005658:	0799      	lsls	r1, r3, #30
 800565a:	bf04      	itt	eq
 800565c:	089b      	lsreq	r3, r3, #2
 800565e:	3002      	addeq	r0, #2
 8005660:	07d9      	lsls	r1, r3, #31
 8005662:	d403      	bmi.n	800566c <__lo0bits+0x4e>
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	f100 0001 	add.w	r0, r0, #1
 800566a:	d003      	beq.n	8005674 <__lo0bits+0x56>
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	4770      	bx	lr
 8005670:	2000      	movs	r0, #0
 8005672:	4770      	bx	lr
 8005674:	2020      	movs	r0, #32
 8005676:	4770      	bx	lr

08005678 <__i2b>:
 8005678:	b510      	push	{r4, lr}
 800567a:	460c      	mov	r4, r1
 800567c:	2101      	movs	r1, #1
 800567e:	f7ff ff07 	bl	8005490 <_Balloc>
 8005682:	4602      	mov	r2, r0
 8005684:	b928      	cbnz	r0, 8005692 <__i2b+0x1a>
 8005686:	4b05      	ldr	r3, [pc, #20]	@ (800569c <__i2b+0x24>)
 8005688:	4805      	ldr	r0, [pc, #20]	@ (80056a0 <__i2b+0x28>)
 800568a:	f240 1145 	movw	r1, #325	@ 0x145
 800568e:	f000 faad 	bl	8005bec <__assert_func>
 8005692:	2301      	movs	r3, #1
 8005694:	6144      	str	r4, [r0, #20]
 8005696:	6103      	str	r3, [r0, #16]
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	080065d2 	.word	0x080065d2
 80056a0:	080065e3 	.word	0x080065e3

080056a4 <__multiply>:
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	4614      	mov	r4, r2
 80056aa:	690a      	ldr	r2, [r1, #16]
 80056ac:	6923      	ldr	r3, [r4, #16]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	bfa8      	it	ge
 80056b2:	4623      	movge	r3, r4
 80056b4:	460f      	mov	r7, r1
 80056b6:	bfa4      	itt	ge
 80056b8:	460c      	movge	r4, r1
 80056ba:	461f      	movge	r7, r3
 80056bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80056c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	6861      	ldr	r1, [r4, #4]
 80056c8:	eb0a 0609 	add.w	r6, sl, r9
 80056cc:	42b3      	cmp	r3, r6
 80056ce:	b085      	sub	sp, #20
 80056d0:	bfb8      	it	lt
 80056d2:	3101      	addlt	r1, #1
 80056d4:	f7ff fedc 	bl	8005490 <_Balloc>
 80056d8:	b930      	cbnz	r0, 80056e8 <__multiply+0x44>
 80056da:	4602      	mov	r2, r0
 80056dc:	4b44      	ldr	r3, [pc, #272]	@ (80057f0 <__multiply+0x14c>)
 80056de:	4845      	ldr	r0, [pc, #276]	@ (80057f4 <__multiply+0x150>)
 80056e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80056e4:	f000 fa82 	bl	8005bec <__assert_func>
 80056e8:	f100 0514 	add.w	r5, r0, #20
 80056ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056f0:	462b      	mov	r3, r5
 80056f2:	2200      	movs	r2, #0
 80056f4:	4543      	cmp	r3, r8
 80056f6:	d321      	bcc.n	800573c <__multiply+0x98>
 80056f8:	f107 0114 	add.w	r1, r7, #20
 80056fc:	f104 0214 	add.w	r2, r4, #20
 8005700:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005704:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005708:	9302      	str	r3, [sp, #8]
 800570a:	1b13      	subs	r3, r2, r4
 800570c:	3b15      	subs	r3, #21
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	3304      	adds	r3, #4
 8005714:	f104 0715 	add.w	r7, r4, #21
 8005718:	42ba      	cmp	r2, r7
 800571a:	bf38      	it	cc
 800571c:	2304      	movcc	r3, #4
 800571e:	9301      	str	r3, [sp, #4]
 8005720:	9b02      	ldr	r3, [sp, #8]
 8005722:	9103      	str	r1, [sp, #12]
 8005724:	428b      	cmp	r3, r1
 8005726:	d80c      	bhi.n	8005742 <__multiply+0x9e>
 8005728:	2e00      	cmp	r6, #0
 800572a:	dd03      	ble.n	8005734 <__multiply+0x90>
 800572c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005730:	2b00      	cmp	r3, #0
 8005732:	d05b      	beq.n	80057ec <__multiply+0x148>
 8005734:	6106      	str	r6, [r0, #16]
 8005736:	b005      	add	sp, #20
 8005738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573c:	f843 2b04 	str.w	r2, [r3], #4
 8005740:	e7d8      	b.n	80056f4 <__multiply+0x50>
 8005742:	f8b1 a000 	ldrh.w	sl, [r1]
 8005746:	f1ba 0f00 	cmp.w	sl, #0
 800574a:	d024      	beq.n	8005796 <__multiply+0xf2>
 800574c:	f104 0e14 	add.w	lr, r4, #20
 8005750:	46a9      	mov	r9, r5
 8005752:	f04f 0c00 	mov.w	ip, #0
 8005756:	f85e 7b04 	ldr.w	r7, [lr], #4
 800575a:	f8d9 3000 	ldr.w	r3, [r9]
 800575e:	fa1f fb87 	uxth.w	fp, r7
 8005762:	b29b      	uxth	r3, r3
 8005764:	fb0a 330b 	mla	r3, sl, fp, r3
 8005768:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800576c:	f8d9 7000 	ldr.w	r7, [r9]
 8005770:	4463      	add	r3, ip
 8005772:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005776:	fb0a c70b 	mla	r7, sl, fp, ip
 800577a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005784:	4572      	cmp	r2, lr
 8005786:	f849 3b04 	str.w	r3, [r9], #4
 800578a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800578e:	d8e2      	bhi.n	8005756 <__multiply+0xb2>
 8005790:	9b01      	ldr	r3, [sp, #4]
 8005792:	f845 c003 	str.w	ip, [r5, r3]
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800579c:	3104      	adds	r1, #4
 800579e:	f1b9 0f00 	cmp.w	r9, #0
 80057a2:	d021      	beq.n	80057e8 <__multiply+0x144>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	f104 0c14 	add.w	ip, r4, #20
 80057aa:	46ae      	mov	lr, r5
 80057ac:	f04f 0a00 	mov.w	sl, #0
 80057b0:	f8bc b000 	ldrh.w	fp, [ip]
 80057b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80057b8:	fb09 770b 	mla	r7, r9, fp, r7
 80057bc:	4457      	add	r7, sl
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80057c4:	f84e 3b04 	str.w	r3, [lr], #4
 80057c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80057cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057d0:	f8be 3000 	ldrh.w	r3, [lr]
 80057d4:	fb09 330a 	mla	r3, r9, sl, r3
 80057d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80057dc:	4562      	cmp	r2, ip
 80057de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057e2:	d8e5      	bhi.n	80057b0 <__multiply+0x10c>
 80057e4:	9f01      	ldr	r7, [sp, #4]
 80057e6:	51eb      	str	r3, [r5, r7]
 80057e8:	3504      	adds	r5, #4
 80057ea:	e799      	b.n	8005720 <__multiply+0x7c>
 80057ec:	3e01      	subs	r6, #1
 80057ee:	e79b      	b.n	8005728 <__multiply+0x84>
 80057f0:	080065d2 	.word	0x080065d2
 80057f4:	080065e3 	.word	0x080065e3

080057f8 <__pow5mult>:
 80057f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057fc:	4615      	mov	r5, r2
 80057fe:	f012 0203 	ands.w	r2, r2, #3
 8005802:	4607      	mov	r7, r0
 8005804:	460e      	mov	r6, r1
 8005806:	d007      	beq.n	8005818 <__pow5mult+0x20>
 8005808:	4c25      	ldr	r4, [pc, #148]	@ (80058a0 <__pow5mult+0xa8>)
 800580a:	3a01      	subs	r2, #1
 800580c:	2300      	movs	r3, #0
 800580e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005812:	f7ff fe9f 	bl	8005554 <__multadd>
 8005816:	4606      	mov	r6, r0
 8005818:	10ad      	asrs	r5, r5, #2
 800581a:	d03d      	beq.n	8005898 <__pow5mult+0xa0>
 800581c:	69fc      	ldr	r4, [r7, #28]
 800581e:	b97c      	cbnz	r4, 8005840 <__pow5mult+0x48>
 8005820:	2010      	movs	r0, #16
 8005822:	f7ff fe2d 	bl	8005480 <malloc>
 8005826:	4602      	mov	r2, r0
 8005828:	61f8      	str	r0, [r7, #28]
 800582a:	b928      	cbnz	r0, 8005838 <__pow5mult+0x40>
 800582c:	4b1d      	ldr	r3, [pc, #116]	@ (80058a4 <__pow5mult+0xac>)
 800582e:	481e      	ldr	r0, [pc, #120]	@ (80058a8 <__pow5mult+0xb0>)
 8005830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005834:	f000 f9da 	bl	8005bec <__assert_func>
 8005838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800583c:	6004      	str	r4, [r0, #0]
 800583e:	60c4      	str	r4, [r0, #12]
 8005840:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005848:	b94c      	cbnz	r4, 800585e <__pow5mult+0x66>
 800584a:	f240 2171 	movw	r1, #625	@ 0x271
 800584e:	4638      	mov	r0, r7
 8005850:	f7ff ff12 	bl	8005678 <__i2b>
 8005854:	2300      	movs	r3, #0
 8005856:	f8c8 0008 	str.w	r0, [r8, #8]
 800585a:	4604      	mov	r4, r0
 800585c:	6003      	str	r3, [r0, #0]
 800585e:	f04f 0900 	mov.w	r9, #0
 8005862:	07eb      	lsls	r3, r5, #31
 8005864:	d50a      	bpl.n	800587c <__pow5mult+0x84>
 8005866:	4631      	mov	r1, r6
 8005868:	4622      	mov	r2, r4
 800586a:	4638      	mov	r0, r7
 800586c:	f7ff ff1a 	bl	80056a4 <__multiply>
 8005870:	4631      	mov	r1, r6
 8005872:	4680      	mov	r8, r0
 8005874:	4638      	mov	r0, r7
 8005876:	f7ff fe4b 	bl	8005510 <_Bfree>
 800587a:	4646      	mov	r6, r8
 800587c:	106d      	asrs	r5, r5, #1
 800587e:	d00b      	beq.n	8005898 <__pow5mult+0xa0>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	b938      	cbnz	r0, 8005894 <__pow5mult+0x9c>
 8005884:	4622      	mov	r2, r4
 8005886:	4621      	mov	r1, r4
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ff0b 	bl	80056a4 <__multiply>
 800588e:	6020      	str	r0, [r4, #0]
 8005890:	f8c0 9000 	str.w	r9, [r0]
 8005894:	4604      	mov	r4, r0
 8005896:	e7e4      	b.n	8005862 <__pow5mult+0x6a>
 8005898:	4630      	mov	r0, r6
 800589a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800589e:	bf00      	nop
 80058a0:	0800663c 	.word	0x0800663c
 80058a4:	08006563 	.word	0x08006563
 80058a8:	080065e3 	.word	0x080065e3

080058ac <__lshift>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	460c      	mov	r4, r1
 80058b2:	6849      	ldr	r1, [r1, #4]
 80058b4:	6923      	ldr	r3, [r4, #16]
 80058b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	4607      	mov	r7, r0
 80058be:	4691      	mov	r9, r2
 80058c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058c4:	f108 0601 	add.w	r6, r8, #1
 80058c8:	42b3      	cmp	r3, r6
 80058ca:	db0b      	blt.n	80058e4 <__lshift+0x38>
 80058cc:	4638      	mov	r0, r7
 80058ce:	f7ff fddf 	bl	8005490 <_Balloc>
 80058d2:	4605      	mov	r5, r0
 80058d4:	b948      	cbnz	r0, 80058ea <__lshift+0x3e>
 80058d6:	4602      	mov	r2, r0
 80058d8:	4b28      	ldr	r3, [pc, #160]	@ (800597c <__lshift+0xd0>)
 80058da:	4829      	ldr	r0, [pc, #164]	@ (8005980 <__lshift+0xd4>)
 80058dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80058e0:	f000 f984 	bl	8005bec <__assert_func>
 80058e4:	3101      	adds	r1, #1
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	e7ee      	b.n	80058c8 <__lshift+0x1c>
 80058ea:	2300      	movs	r3, #0
 80058ec:	f100 0114 	add.w	r1, r0, #20
 80058f0:	f100 0210 	add.w	r2, r0, #16
 80058f4:	4618      	mov	r0, r3
 80058f6:	4553      	cmp	r3, sl
 80058f8:	db33      	blt.n	8005962 <__lshift+0xb6>
 80058fa:	6920      	ldr	r0, [r4, #16]
 80058fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005900:	f104 0314 	add.w	r3, r4, #20
 8005904:	f019 091f 	ands.w	r9, r9, #31
 8005908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800590c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005910:	d02b      	beq.n	800596a <__lshift+0xbe>
 8005912:	f1c9 0e20 	rsb	lr, r9, #32
 8005916:	468a      	mov	sl, r1
 8005918:	2200      	movs	r2, #0
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	fa00 f009 	lsl.w	r0, r0, r9
 8005920:	4310      	orrs	r0, r2
 8005922:	f84a 0b04 	str.w	r0, [sl], #4
 8005926:	f853 2b04 	ldr.w	r2, [r3], #4
 800592a:	459c      	cmp	ip, r3
 800592c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005930:	d8f3      	bhi.n	800591a <__lshift+0x6e>
 8005932:	ebac 0304 	sub.w	r3, ip, r4
 8005936:	3b15      	subs	r3, #21
 8005938:	f023 0303 	bic.w	r3, r3, #3
 800593c:	3304      	adds	r3, #4
 800593e:	f104 0015 	add.w	r0, r4, #21
 8005942:	4584      	cmp	ip, r0
 8005944:	bf38      	it	cc
 8005946:	2304      	movcc	r3, #4
 8005948:	50ca      	str	r2, [r1, r3]
 800594a:	b10a      	cbz	r2, 8005950 <__lshift+0xa4>
 800594c:	f108 0602 	add.w	r6, r8, #2
 8005950:	3e01      	subs	r6, #1
 8005952:	4638      	mov	r0, r7
 8005954:	612e      	str	r6, [r5, #16]
 8005956:	4621      	mov	r1, r4
 8005958:	f7ff fdda 	bl	8005510 <_Bfree>
 800595c:	4628      	mov	r0, r5
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	f842 0f04 	str.w	r0, [r2, #4]!
 8005966:	3301      	adds	r3, #1
 8005968:	e7c5      	b.n	80058f6 <__lshift+0x4a>
 800596a:	3904      	subs	r1, #4
 800596c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005970:	f841 2f04 	str.w	r2, [r1, #4]!
 8005974:	459c      	cmp	ip, r3
 8005976:	d8f9      	bhi.n	800596c <__lshift+0xc0>
 8005978:	e7ea      	b.n	8005950 <__lshift+0xa4>
 800597a:	bf00      	nop
 800597c:	080065d2 	.word	0x080065d2
 8005980:	080065e3 	.word	0x080065e3

08005984 <__mcmp>:
 8005984:	690a      	ldr	r2, [r1, #16]
 8005986:	4603      	mov	r3, r0
 8005988:	6900      	ldr	r0, [r0, #16]
 800598a:	1a80      	subs	r0, r0, r2
 800598c:	b530      	push	{r4, r5, lr}
 800598e:	d10e      	bne.n	80059ae <__mcmp+0x2a>
 8005990:	3314      	adds	r3, #20
 8005992:	3114      	adds	r1, #20
 8005994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800599c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059a4:	4295      	cmp	r5, r2
 80059a6:	d003      	beq.n	80059b0 <__mcmp+0x2c>
 80059a8:	d205      	bcs.n	80059b6 <__mcmp+0x32>
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	bd30      	pop	{r4, r5, pc}
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d3f3      	bcc.n	800599c <__mcmp+0x18>
 80059b4:	e7fb      	b.n	80059ae <__mcmp+0x2a>
 80059b6:	2001      	movs	r0, #1
 80059b8:	e7f9      	b.n	80059ae <__mcmp+0x2a>
	...

080059bc <__mdiff>:
 80059bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	4689      	mov	r9, r1
 80059c2:	4606      	mov	r6, r0
 80059c4:	4611      	mov	r1, r2
 80059c6:	4648      	mov	r0, r9
 80059c8:	4614      	mov	r4, r2
 80059ca:	f7ff ffdb 	bl	8005984 <__mcmp>
 80059ce:	1e05      	subs	r5, r0, #0
 80059d0:	d112      	bne.n	80059f8 <__mdiff+0x3c>
 80059d2:	4629      	mov	r1, r5
 80059d4:	4630      	mov	r0, r6
 80059d6:	f7ff fd5b 	bl	8005490 <_Balloc>
 80059da:	4602      	mov	r2, r0
 80059dc:	b928      	cbnz	r0, 80059ea <__mdiff+0x2e>
 80059de:	4b3f      	ldr	r3, [pc, #252]	@ (8005adc <__mdiff+0x120>)
 80059e0:	f240 2137 	movw	r1, #567	@ 0x237
 80059e4:	483e      	ldr	r0, [pc, #248]	@ (8005ae0 <__mdiff+0x124>)
 80059e6:	f000 f901 	bl	8005bec <__assert_func>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80059f0:	4610      	mov	r0, r2
 80059f2:	b003      	add	sp, #12
 80059f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f8:	bfbc      	itt	lt
 80059fa:	464b      	movlt	r3, r9
 80059fc:	46a1      	movlt	r9, r4
 80059fe:	4630      	mov	r0, r6
 8005a00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a04:	bfba      	itte	lt
 8005a06:	461c      	movlt	r4, r3
 8005a08:	2501      	movlt	r5, #1
 8005a0a:	2500      	movge	r5, #0
 8005a0c:	f7ff fd40 	bl	8005490 <_Balloc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	b918      	cbnz	r0, 8005a1c <__mdiff+0x60>
 8005a14:	4b31      	ldr	r3, [pc, #196]	@ (8005adc <__mdiff+0x120>)
 8005a16:	f240 2145 	movw	r1, #581	@ 0x245
 8005a1a:	e7e3      	b.n	80059e4 <__mdiff+0x28>
 8005a1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a20:	6926      	ldr	r6, [r4, #16]
 8005a22:	60c5      	str	r5, [r0, #12]
 8005a24:	f109 0310 	add.w	r3, r9, #16
 8005a28:	f109 0514 	add.w	r5, r9, #20
 8005a2c:	f104 0e14 	add.w	lr, r4, #20
 8005a30:	f100 0b14 	add.w	fp, r0, #20
 8005a34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a3c:	9301      	str	r3, [sp, #4]
 8005a3e:	46d9      	mov	r9, fp
 8005a40:	f04f 0c00 	mov.w	ip, #0
 8005a44:	9b01      	ldr	r3, [sp, #4]
 8005a46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a4e:	9301      	str	r3, [sp, #4]
 8005a50:	fa1f f38a 	uxth.w	r3, sl
 8005a54:	4619      	mov	r1, r3
 8005a56:	b283      	uxth	r3, r0
 8005a58:	1acb      	subs	r3, r1, r3
 8005a5a:	0c00      	lsrs	r0, r0, #16
 8005a5c:	4463      	add	r3, ip
 8005a5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005a6c:	4576      	cmp	r6, lr
 8005a6e:	f849 3b04 	str.w	r3, [r9], #4
 8005a72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a76:	d8e5      	bhi.n	8005a44 <__mdiff+0x88>
 8005a78:	1b33      	subs	r3, r6, r4
 8005a7a:	3b15      	subs	r3, #21
 8005a7c:	f023 0303 	bic.w	r3, r3, #3
 8005a80:	3415      	adds	r4, #21
 8005a82:	3304      	adds	r3, #4
 8005a84:	42a6      	cmp	r6, r4
 8005a86:	bf38      	it	cc
 8005a88:	2304      	movcc	r3, #4
 8005a8a:	441d      	add	r5, r3
 8005a8c:	445b      	add	r3, fp
 8005a8e:	461e      	mov	r6, r3
 8005a90:	462c      	mov	r4, r5
 8005a92:	4544      	cmp	r4, r8
 8005a94:	d30e      	bcc.n	8005ab4 <__mdiff+0xf8>
 8005a96:	f108 0103 	add.w	r1, r8, #3
 8005a9a:	1b49      	subs	r1, r1, r5
 8005a9c:	f021 0103 	bic.w	r1, r1, #3
 8005aa0:	3d03      	subs	r5, #3
 8005aa2:	45a8      	cmp	r8, r5
 8005aa4:	bf38      	it	cc
 8005aa6:	2100      	movcc	r1, #0
 8005aa8:	440b      	add	r3, r1
 8005aaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005aae:	b191      	cbz	r1, 8005ad6 <__mdiff+0x11a>
 8005ab0:	6117      	str	r7, [r2, #16]
 8005ab2:	e79d      	b.n	80059f0 <__mdiff+0x34>
 8005ab4:	f854 1b04 	ldr.w	r1, [r4], #4
 8005ab8:	46e6      	mov	lr, ip
 8005aba:	0c08      	lsrs	r0, r1, #16
 8005abc:	fa1c fc81 	uxtah	ip, ip, r1
 8005ac0:	4471      	add	r1, lr
 8005ac2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005ac6:	b289      	uxth	r1, r1
 8005ac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005acc:	f846 1b04 	str.w	r1, [r6], #4
 8005ad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005ad4:	e7dd      	b.n	8005a92 <__mdiff+0xd6>
 8005ad6:	3f01      	subs	r7, #1
 8005ad8:	e7e7      	b.n	8005aaa <__mdiff+0xee>
 8005ada:	bf00      	nop
 8005adc:	080065d2 	.word	0x080065d2
 8005ae0:	080065e3 	.word	0x080065e3

08005ae4 <__d2b>:
 8005ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ae8:	460f      	mov	r7, r1
 8005aea:	2101      	movs	r1, #1
 8005aec:	ec59 8b10 	vmov	r8, r9, d0
 8005af0:	4616      	mov	r6, r2
 8005af2:	f7ff fccd 	bl	8005490 <_Balloc>
 8005af6:	4604      	mov	r4, r0
 8005af8:	b930      	cbnz	r0, 8005b08 <__d2b+0x24>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <__d2b+0xa8>)
 8005afe:	4824      	ldr	r0, [pc, #144]	@ (8005b90 <__d2b+0xac>)
 8005b00:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b04:	f000 f872 	bl	8005bec <__assert_func>
 8005b08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b10:	b10d      	cbz	r5, 8005b16 <__d2b+0x32>
 8005b12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	f1b8 0300 	subs.w	r3, r8, #0
 8005b1c:	d023      	beq.n	8005b66 <__d2b+0x82>
 8005b1e:	4668      	mov	r0, sp
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	f7ff fd7c 	bl	800561e <__lo0bits>
 8005b26:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b2a:	b1d0      	cbz	r0, 8005b62 <__d2b+0x7e>
 8005b2c:	f1c0 0320 	rsb	r3, r0, #32
 8005b30:	fa02 f303 	lsl.w	r3, r2, r3
 8005b34:	430b      	orrs	r3, r1
 8005b36:	40c2      	lsrs	r2, r0
 8005b38:	6163      	str	r3, [r4, #20]
 8005b3a:	9201      	str	r2, [sp, #4]
 8005b3c:	9b01      	ldr	r3, [sp, #4]
 8005b3e:	61a3      	str	r3, [r4, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	bf0c      	ite	eq
 8005b44:	2201      	moveq	r2, #1
 8005b46:	2202      	movne	r2, #2
 8005b48:	6122      	str	r2, [r4, #16]
 8005b4a:	b1a5      	cbz	r5, 8005b76 <__d2b+0x92>
 8005b4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b50:	4405      	add	r5, r0
 8005b52:	603d      	str	r5, [r7, #0]
 8005b54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b58:	6030      	str	r0, [r6, #0]
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	b003      	add	sp, #12
 8005b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b62:	6161      	str	r1, [r4, #20]
 8005b64:	e7ea      	b.n	8005b3c <__d2b+0x58>
 8005b66:	a801      	add	r0, sp, #4
 8005b68:	f7ff fd59 	bl	800561e <__lo0bits>
 8005b6c:	9b01      	ldr	r3, [sp, #4]
 8005b6e:	6163      	str	r3, [r4, #20]
 8005b70:	3020      	adds	r0, #32
 8005b72:	2201      	movs	r2, #1
 8005b74:	e7e8      	b.n	8005b48 <__d2b+0x64>
 8005b76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005b7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005b7e:	6038      	str	r0, [r7, #0]
 8005b80:	6918      	ldr	r0, [r3, #16]
 8005b82:	f7ff fd2d 	bl	80055e0 <__hi0bits>
 8005b86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005b8a:	e7e5      	b.n	8005b58 <__d2b+0x74>
 8005b8c:	080065d2 	.word	0x080065d2
 8005b90:	080065e3 	.word	0x080065e3

08005b94 <_mprec_log10>:
 8005b94:	2817      	cmp	r0, #23
 8005b96:	b5d0      	push	{r4, r6, r7, lr}
 8005b98:	4604      	mov	r4, r0
 8005b9a:	dc07      	bgt.n	8005bac <_mprec_log10+0x18>
 8005b9c:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <_mprec_log10+0x30>)
 8005b9e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ba6:	ec41 0b10 	vmov	d0, r0, r1
 8005baa:	bdd0      	pop	{r4, r6, r7, pc}
 8005bac:	4906      	ldr	r1, [pc, #24]	@ (8005bc8 <_mprec_log10+0x34>)
 8005bae:	4f07      	ldr	r7, [pc, #28]	@ (8005bcc <_mprec_log10+0x38>)
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	4632      	mov	r2, r6
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	f7fa fd1e 	bl	80005f8 <__aeabi_dmul>
 8005bbc:	3c01      	subs	r4, #1
 8005bbe:	d1f9      	bne.n	8005bb4 <_mprec_log10+0x20>
 8005bc0:	e7f1      	b.n	8005ba6 <_mprec_log10+0x12>
 8005bc2:	bf00      	nop
 8005bc4:	08006670 	.word	0x08006670
 8005bc8:	3ff00000 	.word	0x3ff00000
 8005bcc:	40240000 	.word	0x40240000

08005bd0 <memcpy>:
 8005bd0:	440a      	add	r2, r1
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xc>
 8005bda:	4770      	bx	lr
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be6:	4291      	cmp	r1, r2
 8005be8:	d1f9      	bne.n	8005bde <memcpy+0xe>
 8005bea:	bd10      	pop	{r4, pc}

08005bec <__assert_func>:
 8005bec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bee:	4614      	mov	r4, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4b09      	ldr	r3, [pc, #36]	@ (8005c18 <__assert_func+0x2c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	68d8      	ldr	r0, [r3, #12]
 8005bfa:	b954      	cbnz	r4, 8005c12 <__assert_func+0x26>
 8005bfc:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <__assert_func+0x30>)
 8005bfe:	461c      	mov	r4, r3
 8005c00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c04:	9100      	str	r1, [sp, #0]
 8005c06:	462b      	mov	r3, r5
 8005c08:	4905      	ldr	r1, [pc, #20]	@ (8005c20 <__assert_func+0x34>)
 8005c0a:	f000 f821 	bl	8005c50 <fiprintf>
 8005c0e:	f000 f831 	bl	8005c74 <abort>
 8005c12:	4b04      	ldr	r3, [pc, #16]	@ (8005c24 <__assert_func+0x38>)
 8005c14:	e7f4      	b.n	8005c00 <__assert_func+0x14>
 8005c16:	bf00      	nop
 8005c18:	2000002c 	.word	0x2000002c
 8005c1c:	08006773 	.word	0x08006773
 8005c20:	08006745 	.word	0x08006745
 8005c24:	08006738 	.word	0x08006738

08005c28 <_calloc_r>:
 8005c28:	b570      	push	{r4, r5, r6, lr}
 8005c2a:	fba1 5402 	umull	r5, r4, r1, r2
 8005c2e:	b93c      	cbnz	r4, 8005c40 <_calloc_r+0x18>
 8005c30:	4629      	mov	r1, r5
 8005c32:	f7fe fb51 	bl	80042d8 <_malloc_r>
 8005c36:	4606      	mov	r6, r0
 8005c38:	b928      	cbnz	r0, 8005c46 <_calloc_r+0x1e>
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	220c      	movs	r2, #12
 8005c42:	6002      	str	r2, [r0, #0]
 8005c44:	e7f9      	b.n	8005c3a <_calloc_r+0x12>
 8005c46:	462a      	mov	r2, r5
 8005c48:	4621      	mov	r1, r4
 8005c4a:	f7fe fa5c 	bl	8004106 <memset>
 8005c4e:	e7f5      	b.n	8005c3c <_calloc_r+0x14>

08005c50 <fiprintf>:
 8005c50:	b40e      	push	{r1, r2, r3}
 8005c52:	b503      	push	{r0, r1, lr}
 8005c54:	4601      	mov	r1, r0
 8005c56:	ab03      	add	r3, sp, #12
 8005c58:	4805      	ldr	r0, [pc, #20]	@ (8005c70 <fiprintf+0x20>)
 8005c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5e:	6800      	ldr	r0, [r0, #0]
 8005c60:	9301      	str	r3, [sp, #4]
 8005c62:	f000 f837 	bl	8005cd4 <_vfiprintf_r>
 8005c66:	b002      	add	sp, #8
 8005c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c6c:	b003      	add	sp, #12
 8005c6e:	4770      	bx	lr
 8005c70:	2000002c 	.word	0x2000002c

08005c74 <abort>:
 8005c74:	b508      	push	{r3, lr}
 8005c76:	2006      	movs	r0, #6
 8005c78:	f000 fb8e 	bl	8006398 <raise>
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fc f89c 	bl	8001dba <_exit>

08005c82 <__sfputc_r>:
 8005c82:	6893      	ldr	r3, [r2, #8]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	b410      	push	{r4}
 8005c8a:	6093      	str	r3, [r2, #8]
 8005c8c:	da08      	bge.n	8005ca0 <__sfputc_r+0x1e>
 8005c8e:	6994      	ldr	r4, [r2, #24]
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	db01      	blt.n	8005c98 <__sfputc_r+0x16>
 8005c94:	290a      	cmp	r1, #10
 8005c96:	d103      	bne.n	8005ca0 <__sfputc_r+0x1e>
 8005c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c9c:	f000 bac0 	b.w	8006220 <__swbuf_r>
 8005ca0:	6813      	ldr	r3, [r2, #0]
 8005ca2:	1c58      	adds	r0, r3, #1
 8005ca4:	6010      	str	r0, [r2, #0]
 8005ca6:	7019      	strb	r1, [r3, #0]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <__sfputs_r>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	4606      	mov	r6, r0
 8005cb4:	460f      	mov	r7, r1
 8005cb6:	4614      	mov	r4, r2
 8005cb8:	18d5      	adds	r5, r2, r3
 8005cba:	42ac      	cmp	r4, r5
 8005cbc:	d101      	bne.n	8005cc2 <__sfputs_r+0x12>
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	e007      	b.n	8005cd2 <__sfputs_r+0x22>
 8005cc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc6:	463a      	mov	r2, r7
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7ff ffda 	bl	8005c82 <__sfputc_r>
 8005cce:	1c43      	adds	r3, r0, #1
 8005cd0:	d1f3      	bne.n	8005cba <__sfputs_r+0xa>
 8005cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cd4 <_vfiprintf_r>:
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	460d      	mov	r5, r1
 8005cda:	b09d      	sub	sp, #116	@ 0x74
 8005cdc:	4614      	mov	r4, r2
 8005cde:	4698      	mov	r8, r3
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	b118      	cbz	r0, 8005cec <_vfiprintf_r+0x18>
 8005ce4:	6a03      	ldr	r3, [r0, #32]
 8005ce6:	b90b      	cbnz	r3, 8005cec <_vfiprintf_r+0x18>
 8005ce8:	f7fe f994 	bl	8004014 <__sinit>
 8005cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cee:	07d9      	lsls	r1, r3, #31
 8005cf0:	d405      	bmi.n	8005cfe <_vfiprintf_r+0x2a>
 8005cf2:	89ab      	ldrh	r3, [r5, #12]
 8005cf4:	059a      	lsls	r2, r3, #22
 8005cf6:	d402      	bmi.n	8005cfe <_vfiprintf_r+0x2a>
 8005cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cfa:	f7fe fa7e 	bl	80041fa <__retarget_lock_acquire_recursive>
 8005cfe:	89ab      	ldrh	r3, [r5, #12]
 8005d00:	071b      	lsls	r3, r3, #28
 8005d02:	d501      	bpl.n	8005d08 <_vfiprintf_r+0x34>
 8005d04:	692b      	ldr	r3, [r5, #16]
 8005d06:	b99b      	cbnz	r3, 8005d30 <_vfiprintf_r+0x5c>
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4630      	mov	r0, r6
 8005d0c:	f000 fac6 	bl	800629c <__swsetup_r>
 8005d10:	b170      	cbz	r0, 8005d30 <_vfiprintf_r+0x5c>
 8005d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d14:	07dc      	lsls	r4, r3, #31
 8005d16:	d504      	bpl.n	8005d22 <_vfiprintf_r+0x4e>
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	b01d      	add	sp, #116	@ 0x74
 8005d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d22:	89ab      	ldrh	r3, [r5, #12]
 8005d24:	0598      	lsls	r0, r3, #22
 8005d26:	d4f7      	bmi.n	8005d18 <_vfiprintf_r+0x44>
 8005d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d2a:	f7fe fa67 	bl	80041fc <__retarget_lock_release_recursive>
 8005d2e:	e7f3      	b.n	8005d18 <_vfiprintf_r+0x44>
 8005d30:	2300      	movs	r3, #0
 8005d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d34:	2320      	movs	r3, #32
 8005d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d3e:	2330      	movs	r3, #48	@ 0x30
 8005d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ef0 <_vfiprintf_r+0x21c>
 8005d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d48:	f04f 0901 	mov.w	r9, #1
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	469a      	mov	sl, r3
 8005d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d54:	b10a      	cbz	r2, 8005d5a <_vfiprintf_r+0x86>
 8005d56:	2a25      	cmp	r2, #37	@ 0x25
 8005d58:	d1f9      	bne.n	8005d4e <_vfiprintf_r+0x7a>
 8005d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005d5e:	d00b      	beq.n	8005d78 <_vfiprintf_r+0xa4>
 8005d60:	465b      	mov	r3, fp
 8005d62:	4622      	mov	r2, r4
 8005d64:	4629      	mov	r1, r5
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ffa2 	bl	8005cb0 <__sfputs_r>
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	f000 80a7 	beq.w	8005ec0 <_vfiprintf_r+0x1ec>
 8005d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d74:	445a      	add	r2, fp
 8005d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d78:	f89a 3000 	ldrb.w	r3, [sl]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	f000 809f 	beq.w	8005ec0 <_vfiprintf_r+0x1ec>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f04f 32ff 	mov.w	r2, #4294967295
 8005d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d8c:	f10a 0a01 	add.w	sl, sl, #1
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	9307      	str	r3, [sp, #28]
 8005d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d9a:	4654      	mov	r4, sl
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da2:	4853      	ldr	r0, [pc, #332]	@ (8005ef0 <_vfiprintf_r+0x21c>)
 8005da4:	f7fa fa1c 	bl	80001e0 <memchr>
 8005da8:	9a04      	ldr	r2, [sp, #16]
 8005daa:	b9d8      	cbnz	r0, 8005de4 <_vfiprintf_r+0x110>
 8005dac:	06d1      	lsls	r1, r2, #27
 8005dae:	bf44      	itt	mi
 8005db0:	2320      	movmi	r3, #32
 8005db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db6:	0713      	lsls	r3, r2, #28
 8005db8:	bf44      	itt	mi
 8005dba:	232b      	movmi	r3, #43	@ 0x2b
 8005dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc6:	d015      	beq.n	8005df4 <_vfiprintf_r+0x120>
 8005dc8:	9a07      	ldr	r2, [sp, #28]
 8005dca:	4654      	mov	r4, sl
 8005dcc:	2000      	movs	r0, #0
 8005dce:	f04f 0c0a 	mov.w	ip, #10
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd8:	3b30      	subs	r3, #48	@ 0x30
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	d94b      	bls.n	8005e76 <_vfiprintf_r+0x1a2>
 8005dde:	b1b0      	cbz	r0, 8005e0e <_vfiprintf_r+0x13a>
 8005de0:	9207      	str	r2, [sp, #28]
 8005de2:	e014      	b.n	8005e0e <_vfiprintf_r+0x13a>
 8005de4:	eba0 0308 	sub.w	r3, r0, r8
 8005de8:	fa09 f303 	lsl.w	r3, r9, r3
 8005dec:	4313      	orrs	r3, r2
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	46a2      	mov	sl, r4
 8005df2:	e7d2      	b.n	8005d9a <_vfiprintf_r+0xc6>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	1d19      	adds	r1, r3, #4
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	9103      	str	r1, [sp, #12]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfbb      	ittet	lt
 8005e00:	425b      	neglt	r3, r3
 8005e02:	f042 0202 	orrlt.w	r2, r2, #2
 8005e06:	9307      	strge	r3, [sp, #28]
 8005e08:	9307      	strlt	r3, [sp, #28]
 8005e0a:	bfb8      	it	lt
 8005e0c:	9204      	strlt	r2, [sp, #16]
 8005e0e:	7823      	ldrb	r3, [r4, #0]
 8005e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e12:	d10a      	bne.n	8005e2a <_vfiprintf_r+0x156>
 8005e14:	7863      	ldrb	r3, [r4, #1]
 8005e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e18:	d132      	bne.n	8005e80 <_vfiprintf_r+0x1ac>
 8005e1a:	9b03      	ldr	r3, [sp, #12]
 8005e1c:	1d1a      	adds	r2, r3, #4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	9203      	str	r2, [sp, #12]
 8005e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e26:	3402      	adds	r4, #2
 8005e28:	9305      	str	r3, [sp, #20]
 8005e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f00 <_vfiprintf_r+0x22c>
 8005e2e:	7821      	ldrb	r1, [r4, #0]
 8005e30:	2203      	movs	r2, #3
 8005e32:	4650      	mov	r0, sl
 8005e34:	f7fa f9d4 	bl	80001e0 <memchr>
 8005e38:	b138      	cbz	r0, 8005e4a <_vfiprintf_r+0x176>
 8005e3a:	9b04      	ldr	r3, [sp, #16]
 8005e3c:	eba0 000a 	sub.w	r0, r0, sl
 8005e40:	2240      	movs	r2, #64	@ 0x40
 8005e42:	4082      	lsls	r2, r0
 8005e44:	4313      	orrs	r3, r2
 8005e46:	3401      	adds	r4, #1
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4e:	4829      	ldr	r0, [pc, #164]	@ (8005ef4 <_vfiprintf_r+0x220>)
 8005e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e54:	2206      	movs	r2, #6
 8005e56:	f7fa f9c3 	bl	80001e0 <memchr>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d03f      	beq.n	8005ede <_vfiprintf_r+0x20a>
 8005e5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ef8 <_vfiprintf_r+0x224>)
 8005e60:	bb1b      	cbnz	r3, 8005eaa <_vfiprintf_r+0x1d6>
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	3307      	adds	r3, #7
 8005e66:	f023 0307 	bic.w	r3, r3, #7
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	9303      	str	r3, [sp, #12]
 8005e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e70:	443b      	add	r3, r7
 8005e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e74:	e76a      	b.n	8005d4c <_vfiprintf_r+0x78>
 8005e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	2001      	movs	r0, #1
 8005e7e:	e7a8      	b.n	8005dd2 <_vfiprintf_r+0xfe>
 8005e80:	2300      	movs	r3, #0
 8005e82:	3401      	adds	r4, #1
 8005e84:	9305      	str	r3, [sp, #20]
 8005e86:	4619      	mov	r1, r3
 8005e88:	f04f 0c0a 	mov.w	ip, #10
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e92:	3a30      	subs	r2, #48	@ 0x30
 8005e94:	2a09      	cmp	r2, #9
 8005e96:	d903      	bls.n	8005ea0 <_vfiprintf_r+0x1cc>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0c6      	beq.n	8005e2a <_vfiprintf_r+0x156>
 8005e9c:	9105      	str	r1, [sp, #20]
 8005e9e:	e7c4      	b.n	8005e2a <_vfiprintf_r+0x156>
 8005ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e7f0      	b.n	8005e8c <_vfiprintf_r+0x1b8>
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	462a      	mov	r2, r5
 8005eb0:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <_vfiprintf_r+0x228>)
 8005eb2:	a904      	add	r1, sp, #16
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f3af 8000 	nop.w
 8005eba:	4607      	mov	r7, r0
 8005ebc:	1c78      	adds	r0, r7, #1
 8005ebe:	d1d6      	bne.n	8005e6e <_vfiprintf_r+0x19a>
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x1fe>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x1fe>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ece:	f7fe f995 	bl	80041fc <__retarget_lock_release_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	065b      	lsls	r3, r3, #25
 8005ed6:	f53f af1f 	bmi.w	8005d18 <_vfiprintf_r+0x44>
 8005eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005edc:	e71e      	b.n	8005d1c <_vfiprintf_r+0x48>
 8005ede:	ab03      	add	r3, sp, #12
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	462a      	mov	r2, r5
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <_vfiprintf_r+0x228>)
 8005ee6:	a904      	add	r1, sp, #16
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f000 f879 	bl	8005fe0 <_printf_i>
 8005eee:	e7e4      	b.n	8005eba <_vfiprintf_r+0x1e6>
 8005ef0:	08006774 	.word	0x08006774
 8005ef4:	0800677e 	.word	0x0800677e
 8005ef8:	00000000 	.word	0x00000000
 8005efc:	08005cb1 	.word	0x08005cb1
 8005f00:	0800677a 	.word	0x0800677a

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4616      	mov	r6, r2
 8005f0a:	4698      	mov	r8, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bfb8      	it	lt
 8005f18:	4613      	movlt	r3, r2
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f20:	4607      	mov	r7, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b10a      	cbz	r2, 8005f2a <_printf_common+0x26>
 8005f26:	3301      	adds	r3, #1
 8005f28:	6033      	str	r3, [r6, #0]
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	0699      	lsls	r1, r3, #26
 8005f2e:	bf42      	ittt	mi
 8005f30:	6833      	ldrmi	r3, [r6, #0]
 8005f32:	3302      	addmi	r3, #2
 8005f34:	6033      	strmi	r3, [r6, #0]
 8005f36:	6825      	ldr	r5, [r4, #0]
 8005f38:	f015 0506 	ands.w	r5, r5, #6
 8005f3c:	d106      	bne.n	8005f4c <_printf_common+0x48>
 8005f3e:	f104 0a19 	add.w	sl, r4, #25
 8005f42:	68e3      	ldr	r3, [r4, #12]
 8005f44:	6832      	ldr	r2, [r6, #0]
 8005f46:	1a9b      	subs	r3, r3, r2
 8005f48:	42ab      	cmp	r3, r5
 8005f4a:	dc26      	bgt.n	8005f9a <_printf_common+0x96>
 8005f4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f50:	6822      	ldr	r2, [r4, #0]
 8005f52:	3b00      	subs	r3, #0
 8005f54:	bf18      	it	ne
 8005f56:	2301      	movne	r3, #1
 8005f58:	0692      	lsls	r2, r2, #26
 8005f5a:	d42b      	bmi.n	8005fb4 <_printf_common+0xb0>
 8005f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f60:	4641      	mov	r1, r8
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c8      	blx	r9
 8005f66:	3001      	adds	r0, #1
 8005f68:	d01e      	beq.n	8005fa8 <_printf_common+0xa4>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	f003 0306 	and.w	r3, r3, #6
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	bf02      	ittt	eq
 8005f76:	68e5      	ldreq	r5, [r4, #12]
 8005f78:	6833      	ldreq	r3, [r6, #0]
 8005f7a:	1aed      	subeq	r5, r5, r3
 8005f7c:	68a3      	ldr	r3, [r4, #8]
 8005f7e:	bf0c      	ite	eq
 8005f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f84:	2500      	movne	r5, #0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfc4      	itt	gt
 8005f8a:	1a9b      	subgt	r3, r3, r2
 8005f8c:	18ed      	addgt	r5, r5, r3
 8005f8e:	2600      	movs	r6, #0
 8005f90:	341a      	adds	r4, #26
 8005f92:	42b5      	cmp	r5, r6
 8005f94:	d11a      	bne.n	8005fcc <_printf_common+0xc8>
 8005f96:	2000      	movs	r0, #0
 8005f98:	e008      	b.n	8005fac <_printf_common+0xa8>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	4652      	mov	r2, sl
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	47c8      	blx	r9
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d103      	bne.n	8005fb0 <_printf_common+0xac>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb0:	3501      	adds	r5, #1
 8005fb2:	e7c6      	b.n	8005f42 <_printf_common+0x3e>
 8005fb4:	18e1      	adds	r1, r4, r3
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	2030      	movs	r0, #48	@ 0x30
 8005fba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fbe:	4422      	add	r2, r4
 8005fc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc8:	3302      	adds	r3, #2
 8005fca:	e7c7      	b.n	8005f5c <_printf_common+0x58>
 8005fcc:	2301      	movs	r3, #1
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	47c8      	blx	r9
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	d0e6      	beq.n	8005fa8 <_printf_common+0xa4>
 8005fda:	3601      	adds	r6, #1
 8005fdc:	e7d9      	b.n	8005f92 <_printf_common+0x8e>
	...

08005fe0 <_printf_i>:
 8005fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	7e0f      	ldrb	r7, [r1, #24]
 8005fe6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe8:	2f78      	cmp	r7, #120	@ 0x78
 8005fea:	4691      	mov	r9, r2
 8005fec:	4680      	mov	r8, r0
 8005fee:	460c      	mov	r4, r1
 8005ff0:	469a      	mov	sl, r3
 8005ff2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ff6:	d807      	bhi.n	8006008 <_printf_i+0x28>
 8005ff8:	2f62      	cmp	r7, #98	@ 0x62
 8005ffa:	d80a      	bhi.n	8006012 <_printf_i+0x32>
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f000 80d2 	beq.w	80061a6 <_printf_i+0x1c6>
 8006002:	2f58      	cmp	r7, #88	@ 0x58
 8006004:	f000 80b9 	beq.w	800617a <_printf_i+0x19a>
 8006008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800600c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006010:	e03a      	b.n	8006088 <_printf_i+0xa8>
 8006012:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006016:	2b15      	cmp	r3, #21
 8006018:	d8f6      	bhi.n	8006008 <_printf_i+0x28>
 800601a:	a101      	add	r1, pc, #4	@ (adr r1, 8006020 <_printf_i+0x40>)
 800601c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006020:	08006079 	.word	0x08006079
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006009 	.word	0x08006009
 800602c:	08006009 	.word	0x08006009
 8006030:	08006009 	.word	0x08006009
 8006034:	08006009 	.word	0x08006009
 8006038:	0800608d 	.word	0x0800608d
 800603c:	08006009 	.word	0x08006009
 8006040:	08006009 	.word	0x08006009
 8006044:	08006009 	.word	0x08006009
 8006048:	08006009 	.word	0x08006009
 800604c:	0800618d 	.word	0x0800618d
 8006050:	080060b7 	.word	0x080060b7
 8006054:	08006147 	.word	0x08006147
 8006058:	08006009 	.word	0x08006009
 800605c:	08006009 	.word	0x08006009
 8006060:	080061af 	.word	0x080061af
 8006064:	08006009 	.word	0x08006009
 8006068:	080060b7 	.word	0x080060b7
 800606c:	08006009 	.word	0x08006009
 8006070:	08006009 	.word	0x08006009
 8006074:	0800614f 	.word	0x0800614f
 8006078:	6833      	ldr	r3, [r6, #0]
 800607a:	1d1a      	adds	r2, r3, #4
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6032      	str	r2, [r6, #0]
 8006080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006084:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006088:	2301      	movs	r3, #1
 800608a:	e09d      	b.n	80061c8 <_printf_i+0x1e8>
 800608c:	6833      	ldr	r3, [r6, #0]
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	6031      	str	r1, [r6, #0]
 8006094:	0606      	lsls	r6, r0, #24
 8006096:	d501      	bpl.n	800609c <_printf_i+0xbc>
 8006098:	681d      	ldr	r5, [r3, #0]
 800609a:	e003      	b.n	80060a4 <_printf_i+0xc4>
 800609c:	0645      	lsls	r5, r0, #25
 800609e:	d5fb      	bpl.n	8006098 <_printf_i+0xb8>
 80060a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	da03      	bge.n	80060b0 <_printf_i+0xd0>
 80060a8:	232d      	movs	r3, #45	@ 0x2d
 80060aa:	426d      	negs	r5, r5
 80060ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060b0:	4859      	ldr	r0, [pc, #356]	@ (8006218 <_printf_i+0x238>)
 80060b2:	230a      	movs	r3, #10
 80060b4:	e011      	b.n	80060da <_printf_i+0xfa>
 80060b6:	6821      	ldr	r1, [r4, #0]
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	0608      	lsls	r0, r1, #24
 80060bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80060c0:	d402      	bmi.n	80060c8 <_printf_i+0xe8>
 80060c2:	0649      	lsls	r1, r1, #25
 80060c4:	bf48      	it	mi
 80060c6:	b2ad      	uxthmi	r5, r5
 80060c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80060ca:	4853      	ldr	r0, [pc, #332]	@ (8006218 <_printf_i+0x238>)
 80060cc:	6033      	str	r3, [r6, #0]
 80060ce:	bf14      	ite	ne
 80060d0:	230a      	movne	r3, #10
 80060d2:	2308      	moveq	r3, #8
 80060d4:	2100      	movs	r1, #0
 80060d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060da:	6866      	ldr	r6, [r4, #4]
 80060dc:	60a6      	str	r6, [r4, #8]
 80060de:	2e00      	cmp	r6, #0
 80060e0:	bfa2      	ittt	ge
 80060e2:	6821      	ldrge	r1, [r4, #0]
 80060e4:	f021 0104 	bicge.w	r1, r1, #4
 80060e8:	6021      	strge	r1, [r4, #0]
 80060ea:	b90d      	cbnz	r5, 80060f0 <_printf_i+0x110>
 80060ec:	2e00      	cmp	r6, #0
 80060ee:	d04b      	beq.n	8006188 <_printf_i+0x1a8>
 80060f0:	4616      	mov	r6, r2
 80060f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f6:	fb03 5711 	mls	r7, r3, r1, r5
 80060fa:	5dc7      	ldrb	r7, [r0, r7]
 80060fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006100:	462f      	mov	r7, r5
 8006102:	42bb      	cmp	r3, r7
 8006104:	460d      	mov	r5, r1
 8006106:	d9f4      	bls.n	80060f2 <_printf_i+0x112>
 8006108:	2b08      	cmp	r3, #8
 800610a:	d10b      	bne.n	8006124 <_printf_i+0x144>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	07df      	lsls	r7, r3, #31
 8006110:	d508      	bpl.n	8006124 <_printf_i+0x144>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	6861      	ldr	r1, [r4, #4]
 8006116:	4299      	cmp	r1, r3
 8006118:	bfde      	ittt	le
 800611a:	2330      	movle	r3, #48	@ 0x30
 800611c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006124:	1b92      	subs	r2, r2, r6
 8006126:	6122      	str	r2, [r4, #16]
 8006128:	f8cd a000 	str.w	sl, [sp]
 800612c:	464b      	mov	r3, r9
 800612e:	aa03      	add	r2, sp, #12
 8006130:	4621      	mov	r1, r4
 8006132:	4640      	mov	r0, r8
 8006134:	f7ff fee6 	bl	8005f04 <_printf_common>
 8006138:	3001      	adds	r0, #1
 800613a:	d14a      	bne.n	80061d2 <_printf_i+0x1f2>
 800613c:	f04f 30ff 	mov.w	r0, #4294967295
 8006140:	b004      	add	sp, #16
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f043 0320 	orr.w	r3, r3, #32
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	4833      	ldr	r0, [pc, #204]	@ (800621c <_printf_i+0x23c>)
 8006150:	2778      	movs	r7, #120	@ 0x78
 8006152:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006156:	6823      	ldr	r3, [r4, #0]
 8006158:	6831      	ldr	r1, [r6, #0]
 800615a:	061f      	lsls	r7, r3, #24
 800615c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006160:	d402      	bmi.n	8006168 <_printf_i+0x188>
 8006162:	065f      	lsls	r7, r3, #25
 8006164:	bf48      	it	mi
 8006166:	b2ad      	uxthmi	r5, r5
 8006168:	6031      	str	r1, [r6, #0]
 800616a:	07d9      	lsls	r1, r3, #31
 800616c:	bf44      	itt	mi
 800616e:	f043 0320 	orrmi.w	r3, r3, #32
 8006172:	6023      	strmi	r3, [r4, #0]
 8006174:	b11d      	cbz	r5, 800617e <_printf_i+0x19e>
 8006176:	2310      	movs	r3, #16
 8006178:	e7ac      	b.n	80060d4 <_printf_i+0xf4>
 800617a:	4827      	ldr	r0, [pc, #156]	@ (8006218 <_printf_i+0x238>)
 800617c:	e7e9      	b.n	8006152 <_printf_i+0x172>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	f023 0320 	bic.w	r3, r3, #32
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	e7f6      	b.n	8006176 <_printf_i+0x196>
 8006188:	4616      	mov	r6, r2
 800618a:	e7bd      	b.n	8006108 <_printf_i+0x128>
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	6825      	ldr	r5, [r4, #0]
 8006190:	6961      	ldr	r1, [r4, #20]
 8006192:	1d18      	adds	r0, r3, #4
 8006194:	6030      	str	r0, [r6, #0]
 8006196:	062e      	lsls	r6, r5, #24
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0x1c0>
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	e002      	b.n	80061a6 <_printf_i+0x1c6>
 80061a0:	0668      	lsls	r0, r5, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0x1bc>
 80061a4:	8019      	strh	r1, [r3, #0]
 80061a6:	2300      	movs	r3, #0
 80061a8:	6123      	str	r3, [r4, #16]
 80061aa:	4616      	mov	r6, r2
 80061ac:	e7bc      	b.n	8006128 <_printf_i+0x148>
 80061ae:	6833      	ldr	r3, [r6, #0]
 80061b0:	1d1a      	adds	r2, r3, #4
 80061b2:	6032      	str	r2, [r6, #0]
 80061b4:	681e      	ldr	r6, [r3, #0]
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	2100      	movs	r1, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fa f810 	bl	80001e0 <memchr>
 80061c0:	b108      	cbz	r0, 80061c6 <_printf_i+0x1e6>
 80061c2:	1b80      	subs	r0, r0, r6
 80061c4:	6060      	str	r0, [r4, #4]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	6123      	str	r3, [r4, #16]
 80061ca:	2300      	movs	r3, #0
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061d0:	e7aa      	b.n	8006128 <_printf_i+0x148>
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	4632      	mov	r2, r6
 80061d6:	4649      	mov	r1, r9
 80061d8:	4640      	mov	r0, r8
 80061da:	47d0      	blx	sl
 80061dc:	3001      	adds	r0, #1
 80061de:	d0ad      	beq.n	800613c <_printf_i+0x15c>
 80061e0:	6823      	ldr	r3, [r4, #0]
 80061e2:	079b      	lsls	r3, r3, #30
 80061e4:	d413      	bmi.n	800620e <_printf_i+0x22e>
 80061e6:	68e0      	ldr	r0, [r4, #12]
 80061e8:	9b03      	ldr	r3, [sp, #12]
 80061ea:	4298      	cmp	r0, r3
 80061ec:	bfb8      	it	lt
 80061ee:	4618      	movlt	r0, r3
 80061f0:	e7a6      	b.n	8006140 <_printf_i+0x160>
 80061f2:	2301      	movs	r3, #1
 80061f4:	4632      	mov	r2, r6
 80061f6:	4649      	mov	r1, r9
 80061f8:	4640      	mov	r0, r8
 80061fa:	47d0      	blx	sl
 80061fc:	3001      	adds	r0, #1
 80061fe:	d09d      	beq.n	800613c <_printf_i+0x15c>
 8006200:	3501      	adds	r5, #1
 8006202:	68e3      	ldr	r3, [r4, #12]
 8006204:	9903      	ldr	r1, [sp, #12]
 8006206:	1a5b      	subs	r3, r3, r1
 8006208:	42ab      	cmp	r3, r5
 800620a:	dcf2      	bgt.n	80061f2 <_printf_i+0x212>
 800620c:	e7eb      	b.n	80061e6 <_printf_i+0x206>
 800620e:	2500      	movs	r5, #0
 8006210:	f104 0619 	add.w	r6, r4, #25
 8006214:	e7f5      	b.n	8006202 <_printf_i+0x222>
 8006216:	bf00      	nop
 8006218:	08006785 	.word	0x08006785
 800621c:	08006796 	.word	0x08006796

08006220 <__swbuf_r>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	460e      	mov	r6, r1
 8006224:	4614      	mov	r4, r2
 8006226:	4605      	mov	r5, r0
 8006228:	b118      	cbz	r0, 8006232 <__swbuf_r+0x12>
 800622a:	6a03      	ldr	r3, [r0, #32]
 800622c:	b90b      	cbnz	r3, 8006232 <__swbuf_r+0x12>
 800622e:	f7fd fef1 	bl	8004014 <__sinit>
 8006232:	69a3      	ldr	r3, [r4, #24]
 8006234:	60a3      	str	r3, [r4, #8]
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	071a      	lsls	r2, r3, #28
 800623a:	d501      	bpl.n	8006240 <__swbuf_r+0x20>
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	b943      	cbnz	r3, 8006252 <__swbuf_r+0x32>
 8006240:	4621      	mov	r1, r4
 8006242:	4628      	mov	r0, r5
 8006244:	f000 f82a 	bl	800629c <__swsetup_r>
 8006248:	b118      	cbz	r0, 8006252 <__swbuf_r+0x32>
 800624a:	f04f 37ff 	mov.w	r7, #4294967295
 800624e:	4638      	mov	r0, r7
 8006250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	6922      	ldr	r2, [r4, #16]
 8006256:	1a98      	subs	r0, r3, r2
 8006258:	6963      	ldr	r3, [r4, #20]
 800625a:	b2f6      	uxtb	r6, r6
 800625c:	4283      	cmp	r3, r0
 800625e:	4637      	mov	r7, r6
 8006260:	dc05      	bgt.n	800626e <__swbuf_r+0x4e>
 8006262:	4621      	mov	r1, r4
 8006264:	4628      	mov	r0, r5
 8006266:	f7fe fa7f 	bl	8004768 <_fflush_r>
 800626a:	2800      	cmp	r0, #0
 800626c:	d1ed      	bne.n	800624a <__swbuf_r+0x2a>
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	3b01      	subs	r3, #1
 8006272:	60a3      	str	r3, [r4, #8]
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	701e      	strb	r6, [r3, #0]
 800627c:	6962      	ldr	r2, [r4, #20]
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	429a      	cmp	r2, r3
 8006282:	d004      	beq.n	800628e <__swbuf_r+0x6e>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	07db      	lsls	r3, r3, #31
 8006288:	d5e1      	bpl.n	800624e <__swbuf_r+0x2e>
 800628a:	2e0a      	cmp	r6, #10
 800628c:	d1df      	bne.n	800624e <__swbuf_r+0x2e>
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f7fe fa69 	bl	8004768 <_fflush_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	d0d9      	beq.n	800624e <__swbuf_r+0x2e>
 800629a:	e7d6      	b.n	800624a <__swbuf_r+0x2a>

0800629c <__swsetup_r>:
 800629c:	b538      	push	{r3, r4, r5, lr}
 800629e:	4b29      	ldr	r3, [pc, #164]	@ (8006344 <__swsetup_r+0xa8>)
 80062a0:	4605      	mov	r5, r0
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	460c      	mov	r4, r1
 80062a6:	b118      	cbz	r0, 80062b0 <__swsetup_r+0x14>
 80062a8:	6a03      	ldr	r3, [r0, #32]
 80062aa:	b90b      	cbnz	r3, 80062b0 <__swsetup_r+0x14>
 80062ac:	f7fd feb2 	bl	8004014 <__sinit>
 80062b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b4:	0719      	lsls	r1, r3, #28
 80062b6:	d422      	bmi.n	80062fe <__swsetup_r+0x62>
 80062b8:	06da      	lsls	r2, r3, #27
 80062ba:	d407      	bmi.n	80062cc <__swsetup_r+0x30>
 80062bc:	2209      	movs	r2, #9
 80062be:	602a      	str	r2, [r5, #0]
 80062c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ca:	e033      	b.n	8006334 <__swsetup_r+0x98>
 80062cc:	0758      	lsls	r0, r3, #29
 80062ce:	d512      	bpl.n	80062f6 <__swsetup_r+0x5a>
 80062d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062d2:	b141      	cbz	r1, 80062e6 <__swsetup_r+0x4a>
 80062d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062d8:	4299      	cmp	r1, r3
 80062da:	d002      	beq.n	80062e2 <__swsetup_r+0x46>
 80062dc:	4628      	mov	r0, r5
 80062de:	f7fd ff8f 	bl	8004200 <_free_r>
 80062e2:	2300      	movs	r3, #0
 80062e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	2300      	movs	r3, #0
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	6923      	ldr	r3, [r4, #16]
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	89a3      	ldrh	r3, [r4, #12]
 80062f8:	f043 0308 	orr.w	r3, r3, #8
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	6923      	ldr	r3, [r4, #16]
 8006300:	b94b      	cbnz	r3, 8006316 <__swsetup_r+0x7a>
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800630c:	d003      	beq.n	8006316 <__swsetup_r+0x7a>
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f883 	bl	800641c <__smakebuf_r>
 8006316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631a:	f013 0201 	ands.w	r2, r3, #1
 800631e:	d00a      	beq.n	8006336 <__swsetup_r+0x9a>
 8006320:	2200      	movs	r2, #0
 8006322:	60a2      	str	r2, [r4, #8]
 8006324:	6962      	ldr	r2, [r4, #20]
 8006326:	4252      	negs	r2, r2
 8006328:	61a2      	str	r2, [r4, #24]
 800632a:	6922      	ldr	r2, [r4, #16]
 800632c:	b942      	cbnz	r2, 8006340 <__swsetup_r+0xa4>
 800632e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006332:	d1c5      	bne.n	80062c0 <__swsetup_r+0x24>
 8006334:	bd38      	pop	{r3, r4, r5, pc}
 8006336:	0799      	lsls	r1, r3, #30
 8006338:	bf58      	it	pl
 800633a:	6962      	ldrpl	r2, [r4, #20]
 800633c:	60a2      	str	r2, [r4, #8]
 800633e:	e7f4      	b.n	800632a <__swsetup_r+0x8e>
 8006340:	2000      	movs	r0, #0
 8006342:	e7f7      	b.n	8006334 <__swsetup_r+0x98>
 8006344:	2000002c 	.word	0x2000002c

08006348 <_raise_r>:
 8006348:	291f      	cmp	r1, #31
 800634a:	b538      	push	{r3, r4, r5, lr}
 800634c:	4605      	mov	r5, r0
 800634e:	460c      	mov	r4, r1
 8006350:	d904      	bls.n	800635c <_raise_r+0x14>
 8006352:	2316      	movs	r3, #22
 8006354:	6003      	str	r3, [r0, #0]
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800635e:	b112      	cbz	r2, 8006366 <_raise_r+0x1e>
 8006360:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006364:	b94b      	cbnz	r3, 800637a <_raise_r+0x32>
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f830 	bl	80063cc <_getpid_r>
 800636c:	4622      	mov	r2, r4
 800636e:	4601      	mov	r1, r0
 8006370:	4628      	mov	r0, r5
 8006372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006376:	f000 b817 	b.w	80063a8 <_kill_r>
 800637a:	2b01      	cmp	r3, #1
 800637c:	d00a      	beq.n	8006394 <_raise_r+0x4c>
 800637e:	1c59      	adds	r1, r3, #1
 8006380:	d103      	bne.n	800638a <_raise_r+0x42>
 8006382:	2316      	movs	r3, #22
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	2001      	movs	r0, #1
 8006388:	e7e7      	b.n	800635a <_raise_r+0x12>
 800638a:	2100      	movs	r1, #0
 800638c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006390:	4620      	mov	r0, r4
 8006392:	4798      	blx	r3
 8006394:	2000      	movs	r0, #0
 8006396:	e7e0      	b.n	800635a <_raise_r+0x12>

08006398 <raise>:
 8006398:	4b02      	ldr	r3, [pc, #8]	@ (80063a4 <raise+0xc>)
 800639a:	4601      	mov	r1, r0
 800639c:	6818      	ldr	r0, [r3, #0]
 800639e:	f7ff bfd3 	b.w	8006348 <_raise_r>
 80063a2:	bf00      	nop
 80063a4:	2000002c 	.word	0x2000002c

080063a8 <_kill_r>:
 80063a8:	b538      	push	{r3, r4, r5, lr}
 80063aa:	4d07      	ldr	r5, [pc, #28]	@ (80063c8 <_kill_r+0x20>)
 80063ac:	2300      	movs	r3, #0
 80063ae:	4604      	mov	r4, r0
 80063b0:	4608      	mov	r0, r1
 80063b2:	4611      	mov	r1, r2
 80063b4:	602b      	str	r3, [r5, #0]
 80063b6:	f7fb fcf0 	bl	8001d9a <_kill>
 80063ba:	1c43      	adds	r3, r0, #1
 80063bc:	d102      	bne.n	80063c4 <_kill_r+0x1c>
 80063be:	682b      	ldr	r3, [r5, #0]
 80063c0:	b103      	cbz	r3, 80063c4 <_kill_r+0x1c>
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	bd38      	pop	{r3, r4, r5, pc}
 80063c6:	bf00      	nop
 80063c8:	200002a4 	.word	0x200002a4

080063cc <_getpid_r>:
 80063cc:	f7fb bcdd 	b.w	8001d8a <_getpid>

080063d0 <__swhatbuf_r>:
 80063d0:	b570      	push	{r4, r5, r6, lr}
 80063d2:	460c      	mov	r4, r1
 80063d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063d8:	2900      	cmp	r1, #0
 80063da:	b096      	sub	sp, #88	@ 0x58
 80063dc:	4615      	mov	r5, r2
 80063de:	461e      	mov	r6, r3
 80063e0:	da0d      	bge.n	80063fe <__swhatbuf_r+0x2e>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80063e8:	f04f 0100 	mov.w	r1, #0
 80063ec:	bf14      	ite	ne
 80063ee:	2340      	movne	r3, #64	@ 0x40
 80063f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063f4:	2000      	movs	r0, #0
 80063f6:	6031      	str	r1, [r6, #0]
 80063f8:	602b      	str	r3, [r5, #0]
 80063fa:	b016      	add	sp, #88	@ 0x58
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
 80063fe:	466a      	mov	r2, sp
 8006400:	f000 f848 	bl	8006494 <_fstat_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	dbec      	blt.n	80063e2 <__swhatbuf_r+0x12>
 8006408:	9901      	ldr	r1, [sp, #4]
 800640a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800640e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006412:	4259      	negs	r1, r3
 8006414:	4159      	adcs	r1, r3
 8006416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800641a:	e7eb      	b.n	80063f4 <__swhatbuf_r+0x24>

0800641c <__smakebuf_r>:
 800641c:	898b      	ldrh	r3, [r1, #12]
 800641e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006420:	079d      	lsls	r5, r3, #30
 8006422:	4606      	mov	r6, r0
 8006424:	460c      	mov	r4, r1
 8006426:	d507      	bpl.n	8006438 <__smakebuf_r+0x1c>
 8006428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	6123      	str	r3, [r4, #16]
 8006430:	2301      	movs	r3, #1
 8006432:	6163      	str	r3, [r4, #20]
 8006434:	b003      	add	sp, #12
 8006436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006438:	ab01      	add	r3, sp, #4
 800643a:	466a      	mov	r2, sp
 800643c:	f7ff ffc8 	bl	80063d0 <__swhatbuf_r>
 8006440:	9f00      	ldr	r7, [sp, #0]
 8006442:	4605      	mov	r5, r0
 8006444:	4639      	mov	r1, r7
 8006446:	4630      	mov	r0, r6
 8006448:	f7fd ff46 	bl	80042d8 <_malloc_r>
 800644c:	b948      	cbnz	r0, 8006462 <__smakebuf_r+0x46>
 800644e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006452:	059a      	lsls	r2, r3, #22
 8006454:	d4ee      	bmi.n	8006434 <__smakebuf_r+0x18>
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	f043 0302 	orr.w	r3, r3, #2
 800645e:	81a3      	strh	r3, [r4, #12]
 8006460:	e7e2      	b.n	8006428 <__smakebuf_r+0xc>
 8006462:	89a3      	ldrh	r3, [r4, #12]
 8006464:	6020      	str	r0, [r4, #0]
 8006466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	9b01      	ldr	r3, [sp, #4]
 800646e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006472:	b15b      	cbz	r3, 800648c <__smakebuf_r+0x70>
 8006474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006478:	4630      	mov	r0, r6
 800647a:	f000 f81d 	bl	80064b8 <_isatty_r>
 800647e:	b128      	cbz	r0, 800648c <__smakebuf_r+0x70>
 8006480:	89a3      	ldrh	r3, [r4, #12]
 8006482:	f023 0303 	bic.w	r3, r3, #3
 8006486:	f043 0301 	orr.w	r3, r3, #1
 800648a:	81a3      	strh	r3, [r4, #12]
 800648c:	89a3      	ldrh	r3, [r4, #12]
 800648e:	431d      	orrs	r5, r3
 8006490:	81a5      	strh	r5, [r4, #12]
 8006492:	e7cf      	b.n	8006434 <__smakebuf_r+0x18>

08006494 <_fstat_r>:
 8006494:	b538      	push	{r3, r4, r5, lr}
 8006496:	4d07      	ldr	r5, [pc, #28]	@ (80064b4 <_fstat_r+0x20>)
 8006498:	2300      	movs	r3, #0
 800649a:	4604      	mov	r4, r0
 800649c:	4608      	mov	r0, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	602b      	str	r3, [r5, #0]
 80064a2:	f7fb fcda 	bl	8001e5a <_fstat>
 80064a6:	1c43      	adds	r3, r0, #1
 80064a8:	d102      	bne.n	80064b0 <_fstat_r+0x1c>
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	b103      	cbz	r3, 80064b0 <_fstat_r+0x1c>
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	200002a4 	.word	0x200002a4

080064b8 <_isatty_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	@ (80064d4 <_isatty_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fb fcd9 	bl	8001e7a <_isatty>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_isatty_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_isatty_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	200002a4 	.word	0x200002a4

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
